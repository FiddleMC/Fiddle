From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Mon, 15 May 2023 20:48:34 +0200
Subject: [PATCH] Read packs - Parse pack meta from JSON

License: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)
Fiddle - https://fiddlemc.org

diff --git a/src/main/java/org/fiddlemc/fiddle/pack/read/meta/FiddlePackMetaParser.java b/src/main/java/org/fiddlemc/fiddle/pack/read/meta/FiddlePackMetaParser.java
new file mode 100644
index 0000000000000000000000000000000000000000..646583ec11528b1651f4670f1795807018f101d0
--- /dev/null
+++ b/src/main/java/org/fiddlemc/fiddle/pack/read/meta/FiddlePackMetaParser.java
@@ -0,0 +1,145 @@
+// Fiddle - read packs - parse meta from JSON
+
+package org.fiddlemc.fiddle.pack.read.meta;
+
+import com.google.gson.JsonElement;
+import it.unimi.dsi.fastutil.ints.IntSet;
+import org.fiddlemc.fiddle.pack.FiddlePackMeta;
+import org.fiddlemc.fiddle.pack.read.ContentNamespacedKeyValidation;
+import org.fiddlemc.fiddle.pack.exception.PackException;
+import org.fiddlemc.fiddle.pack.read.namedjson.NamedJsonElement;
+
+import java.util.Objects;
+
+/**
+ * A utility to parse a {@link org.fiddlemc.fiddle.pack.FiddlePackMeta} instance from JSON.
+ */
+public final class FiddlePackMetaParser {
+
+    private FiddlePackMetaParser() {
+        throw new RuntimeException();
+    }
+
+    public static final int minFormat = 1;
+    public static final int maxFormat = 1;
+    public static final IntSet supportedResourcePackFormats = IntSet.of(13, 15);
+    public static final IntSet supportedDataPackFormats = IntSet.of(12, 15);
+
+    public static final int displayNameMaxLength = 255;
+    public static final int technicalNameMaxLength = 191;
+    public static final int versionMaxLength = 191;
+    public static final int descriptionMaxLength = 262143;
+    public static final int authorMaxLength = 511;
+    public static final int creditsNameMaxLength = 511;
+    public static final int creditsRoleMaxLength = 4095;
+    public static final int websiteMaxLength = 4095;
+    public static final int resourcePackMetaDescriptionMaxLength = 262143;
+
+    public static final String packJsonKey = "pack";
+    public static final String formatJsonKey = "format";
+    public static final String uuidJsonKey = "uuid";
+    public static final String displayNameJsonKey = "display_name";
+    public static final String technicalNameJsonKey = "technical_name";
+    public static final String versionJsonKey = "version";
+    public static final String descriptionJsonKey = "description";
+    public static final String authorsJsonKey = "authors";
+    public static final String creditsJsonKey = "credits";
+    public static final String creditsNameJsonKey = "name";
+    public static final String creditsRoleJsonKey = "role";
+    public static final String websiteJsonKey = "website";
+    public static final String resourcePackMetaJsonKey = "resource_pack_meta";
+    public static final String resourcePackMetaPackJsonKey = "pack";
+    public static final String resourcePackMetaFormatJsonKey = "pack_format";
+    public static final String resourcePackMetaDescriptionJsonKey = "description";
+    public static final String dataPackMetaJsonKey = "data_pack_meta";
+    public static final String dataPackMetaPackJsonKey = "pack";
+    public static final String dataPackMetaFormatJsonKey = "pack_format";
+    public static final String dataPackMetaDescriptionJsonKey = "description";
+
+    private static void enforceSupportedSubFormat(String subName, int format, IntSet supportedFormats) throws PackException {
+        if (supportedFormats.contains(format)) {
+            return;
+        }
+        if (format < 1) {
+            throw new PackException("Invalid " + subName + " format: " + format);
+        }
+        @SuppressWarnings("OptionalGetWithoutIsPresent")
+        var minSupportedFormat = supportedFormats.intStream().min().getAsInt();
+        if (format < minSupportedFormat) {
+            throw new PackException("The " + subName + " format (" + format + ") is older than the minimum that Fiddle has ever been able to read (" + minSupportedFormat + "). Please request the author of the pack to update the contained " + subName + " and raise the format number.");
+        }
+        @SuppressWarnings("OptionalGetWithoutIsPresent")
+        var maxSupportedFormat = supportedFormats.intStream().max().getAsInt();
+        if (format > maxSupportedFormat) {
+            throw new PackException("The " + subName + " format (" + format + ") is newer than the maximum this version of Fiddle can read (" + maxSupportedFormat + "). To load this pack, try updating to the latest version of Fiddle.");
+        }
+        throw new PackException("The " + subName + " format (" + format + ") is not supported because it is only used in a Minecraft snapshot version.");
+    }
+
+    public static FiddlePackMeta fromJson(JsonElement json) throws PackException {
+
+        var packJson = NamedJsonElement.get(json).asJsonObject().getAsJsonObject(packJsonKey);
+
+        int format = packJson.getAsInt(formatJsonKey, minFormat, (primitive, value, min) -> {
+            if (value < 1) {
+                throw new PackException("Invalid Fiddle pack format: " + value);
+            }
+            throw new PackException("The Fiddle pack format (" + value + ") is older than the minimum this version of Fiddle can read (" + min + "). Please request the authors of this pack to update it.");
+        }, maxFormat, (primitive, value, max) -> {
+            throw new PackException("The Fiddle pack format (" + value + ") is newer than the maximum this version of Fiddle can read (" + max + "). To load this pack, try updating to the latest version of Fiddle.");
+        });
+
+        var uuid = packJson.getAsUUID(uuidJsonKey);
+
+        var displayName = Objects.requireNonNull(packJson.getAsString(displayNameJsonKey, true, NamedJsonElement.BlankStringParseResult.THROW_EXCEPTION, displayNameMaxLength));
+
+        var technicalName = packJson.getAsString(technicalNameJsonKey, true, NamedJsonElement.BlankStringParseResult.THROW_EXCEPTION, technicalNameMaxLength);
+        if (!ContentNamespacedKeyValidation.hasOnlyLowerCaseLettersDigitsAndUnderscores(technicalName)) {
+            throw new PackException("The " + technicalNameJsonKey + " value '" + technicalName + "' is invalid: it can only contain lowercase letters (a-z), digits (0-9) and underscores (_)");
+        }
+
+        var version = packJson.getAsStringIfPresent(versionJsonKey, false, NamedJsonElement.BlankStringParseResult.RETURN_NULL, versionMaxLength);
+
+        var description = packJson.getAsStringIfPresent(descriptionJsonKey, true, NamedJsonElement.BlankStringParseResult.RETURN_NULL, descriptionMaxLength);
+
+        var authorsList = packJson.getAsNotNullMappedJsonArrayIfPresent(authorsJsonKey, authorJson -> authorJson.asString(true, NamedJsonElement.BlankStringParseResult.RETURN_NULL, authorMaxLength));
+        var authors = authorsList == null ? new String[0] : authorsList.toArray(new String[0]);
+
+        var creditsList = packJson.getAsMappedJsonArrayIfPresent(creditsJsonKey, creditJson -> {
+            var creditJsonObject = creditJson.asJsonObject();
+            return new FiddlePackMeta.Credit(
+                Objects.requireNonNull(creditJsonObject.getAsString(creditsNameJsonKey, true, NamedJsonElement.BlankStringParseResult.THROW_EXCEPTION, creditsNameMaxLength)),
+                creditJsonObject.getAsStringIfPresent(creditsRoleJsonKey, true, NamedJsonElement.BlankStringParseResult.RETURN_NULL, creditsRoleMaxLength)
+            );
+        });
+        var credits = creditsList == null ? new FiddlePackMeta.Credit[0] : creditsList.toArray(new FiddlePackMeta.Credit[0]);
+
+        var website = packJson.getAsStringIfPresent(websiteJsonKey, true, NamedJsonElement.BlankStringParseResult.RETURN_NULL, websiteMaxLength);
+
+        var resourcePackMetaJson = packJson.getAsJsonObject(resourcePackMetaJsonKey);
+        var resourcePackMetaPackJson = resourcePackMetaJson.getAsJsonObject(resourcePackMetaPackJsonKey);
+        int resourcePackFormat = resourcePackMetaPackJson.getAsInt(resourcePackMetaFormatJsonKey, null, null);
+        enforceSupportedSubFormat("resource pack", resourcePackFormat, supportedResourcePackFormats);
+        var resourcePackDescription = resourcePackMetaPackJson.getAsStringIfPresent(resourcePackMetaDescriptionJsonKey, false, NamedJsonElement.BlankStringParseResult.RETURN_STRING, resourcePackMetaDescriptionMaxLength);
+        var resourcePackMeta = new FiddlePackMeta.ResourcePackMeta(resourcePackFormat, resourcePackDescription);
+
+        var dataPackMetaJson = packJson.getAsJsonObjectIfPresent(dataPackMetaJsonKey);
+        FiddlePackMeta.DataPackMeta dataPackMeta;
+        if (dataPackMetaJson != null) {
+            var dataPackMetaPackJson = dataPackMetaJson.getAsJsonObject(dataPackMetaPackJsonKey);
+            int dataPackFormat = dataPackMetaPackJson.getAsInt(dataPackMetaFormatJsonKey, null, null);
+            enforceSupportedSubFormat("data pack", dataPackFormat, supportedDataPackFormats);
+            var dataPackDescription = dataPackMetaPackJson.getOrNull(dataPackMetaDescriptionJsonKey);
+            if (dataPackDescription != null && dataPackDescription.isJsonNull()) {
+                throw dataPackDescription.nullException();
+            }
+            dataPackMeta = new FiddlePackMeta.DataPackMeta(dataPackFormat, dataPackDescription == null ? null : dataPackDescription.unnamed());
+        } else {
+            dataPackMeta = null;
+        }
+
+        return new FiddlePackMeta(format, uuid, displayName, technicalName, version, description, authors, credits, website, resourcePackMeta, dataPackMeta);
+
+    }
+
+}
