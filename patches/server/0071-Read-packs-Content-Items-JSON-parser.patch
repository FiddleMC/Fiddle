From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Sat, 27 Jan 2024 22:10:36 +0100
Subject: [PATCH] Read packs - Content - Items - JSON parser

Adds the `ItemDefinitionParser` class, that can parse JSON into `ItemDefinition` instances.
This also includes the `ItemDefinitionParser` class, that can parse JSON into corresponding `ItemPropertiesDefinition` instances.

License: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)
Fiddle - https://fiddlemc.org

diff --git a/src/main/java/org/fiddlemc/fiddle/pack/read/fiddlecontent/definition/item/ItemDefinition.java b/src/main/java/org/fiddlemc/fiddle/pack/read/fiddlecontent/definition/item/ItemDefinition.java
index 6972c09118e205e639958ac122a125a4087d32be..9316b3b75d6e3a65f2b0bde04448fe5ced60e366 100644
--- a/src/main/java/org/fiddlemc/fiddle/pack/read/fiddlecontent/definition/item/ItemDefinition.java
+++ b/src/main/java/org/fiddlemc/fiddle/pack/read/fiddlecontent/definition/item/ItemDefinition.java
@@ -21,7 +21,10 @@ public class ItemDefinition
 
     public static final FiddleContentDefinitionType<ItemDefinition> TYPE = new FiddleContentDefinitionType<>(
         "items",
-        "item"
+        // Fiddle start - read packs - items - JSON parser
+        "item",
+        ItemDefinitionParser.INSTANCE
+        // Fiddle end - read packs - items - JSON parser
     );
 
     /**
diff --git a/src/main/java/org/fiddlemc/fiddle/pack/read/fiddlecontent/definition/item/ItemDefinitionParser.java b/src/main/java/org/fiddlemc/fiddle/pack/read/fiddlecontent/definition/item/ItemDefinitionParser.java
new file mode 100644
index 0000000000000000000000000000000000000000..3d622b748afaf194a596cf65eaf708deff98940e
--- /dev/null
+++ b/src/main/java/org/fiddlemc/fiddle/pack/read/fiddlecontent/definition/item/ItemDefinitionParser.java
@@ -0,0 +1,47 @@
+// Fiddle - read packs - items - JSON parser
+
+package org.fiddlemc.fiddle.pack.read.fiddlecontent.definition.item;
+
+import net.minecraft.resources.ResourceLocation;
+import org.fiddlemc.fiddle.pack.exception.PackException;
+import org.fiddlemc.fiddle.pack.read.fiddlecontent.definition.blockoritem.BlockOrItemDefinitionParser;
+import org.fiddlemc.fiddle.pack.read.fiddlecontent.definition.item.parent.ItemDefinitionBase;
+import org.fiddlemc.fiddle.pack.read.fiddlecontent.definition.withparent.FiddleContentDefinitionBase;
+import org.fiddlemc.fiddle.pack.read.fiddlecontent.definition.withparent.FiddleContentDefinitionParent;
+import org.fiddlemc.fiddle.pack.read.namedjson.NamedJsonElement;
+import org.fiddlemc.fiddle.pack.read.namedjson.NamedJsonObject;
+
+public final class ItemDefinitionParser
+    extends BlockOrItemDefinitionParser<ItemPropertiesDefinition, ItemDefinition> {
+
+    public static final String blockJsonKey = "block";
+
+    public static final ItemDefinitionParser INSTANCE = new ItemDefinitionParser();
+
+    private ItemDefinitionParser() {
+        super(ItemPropertiesDefinitionParser.INSTANCE);
+    }
+
+    @Override
+    protected FiddleContentDefinitionBase[] getBases() {
+        return new ItemDefinitionBase[]{
+            ItemDefinitionBase.ITEM,
+            ItemDefinitionBase.BLOCK
+        };
+    }
+
+    @Override
+    protected ItemDefinition parse(
+        ResourceLocation resourceLocation,
+        NamedJsonObject itemJson,
+        FiddleContentDefinitionParent parent,
+        ItemPropertiesDefinition propertiesDefinition
+    ) throws PackException {
+        // Read the block
+        var blockString = itemJson.getAsStringIfPresent(blockJsonKey, true, NamedJsonElement.BlankStringParseResult.THROW_EXCEPTION, null);
+        var block = blockString == null ? null : new ResourceLocation(blockString);
+
+        // Return the definition
+        return new ItemDefinition(resourceLocation, parent, propertiesDefinition, block);
+    }
+}
diff --git a/src/main/java/org/fiddlemc/fiddle/pack/read/fiddlecontent/definition/item/ItemPropertiesDefinitionParser.java b/src/main/java/org/fiddlemc/fiddle/pack/read/fiddlecontent/definition/item/ItemPropertiesDefinitionParser.java
new file mode 100644
index 0000000000000000000000000000000000000000..dfe91ce1935f5b640259c1c3cdbadfd1257aa7ee
--- /dev/null
+++ b/src/main/java/org/fiddlemc/fiddle/pack/read/fiddlecontent/definition/item/ItemPropertiesDefinitionParser.java
@@ -0,0 +1,62 @@
+// Fiddle - read packs - items - JSON parser
+
+package org.fiddlemc.fiddle.pack.read.fiddlecontent.definition.item;
+
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.world.item.Item;
+import org.fiddlemc.fiddle.pack.exception.PackException;
+import org.fiddlemc.fiddle.pack.read.fiddlecontent.definition.blockoritem.BlockOrItemPropertiesDefinitionParser;
+import org.fiddlemc.fiddle.pack.read.fiddlecontent.definition.withparent.FiddleContentDefinitionKeyParent;
+import org.fiddlemc.fiddle.pack.read.fiddlecontent.definition.withparent.FiddleContentDefinitionParent;
+import org.fiddlemc.fiddle.pack.read.namedjson.NamedJsonElement;
+import org.fiddlemc.fiddle.pack.read.namedjson.NamedJsonObject;
+import org.jetbrains.annotations.Nullable;
+
+public class ItemPropertiesDefinitionParser
+    extends BlockOrItemPropertiesDefinitionParser<ItemPropertiesDefinition> {
+
+    public static final String parentJsonKey = "parent";
+    public static final String maxStackSizeJsonKey = "max_stack_size";
+    public static final String isFireResistantJsonKey = "is_fire_resistant";
+
+    public static final ItemPropertiesDefinitionParser INSTANCE = new ItemPropertiesDefinitionParser();
+
+    private ItemPropertiesDefinitionParser() {
+    }
+
+    @Override
+    protected ItemPropertiesDefinition actualParse(NamedJsonObject propertiesJson) throws PackException {
+        @Nullable FiddleContentDefinitionParent parent = null;
+        @Nullable Integer maxStackSize = null;
+        @Nullable Boolean isFireResistant = null;
+        if (propertiesJson != null) {
+
+            // Read the parent
+            var parentString = propertiesJson.getAsStringIfPresent(parentJsonKey, true, NamedJsonElement.BlankStringParseResult.THROW_EXCEPTION, null);
+            if (parentString != null) {
+                var parentResourceLocation = new ResourceLocation(parentString);
+                parent = ItemDefinitionParser.INSTANCE.getBaseByTypedResourceLocation(parentResourceLocation);
+                if (parent == null) {
+                    parent = new FiddleContentDefinitionKeyParent<>(parentResourceLocation);
+                }
+            }
+
+            // Read some more values
+            var readMaxStackSize = propertiesJson.getAsIntIfPresent(maxStackSizeJsonKey, 1, Item.MAX_STACK_SIZE);
+            if (readMaxStackSize != null) {
+                maxStackSize = readMaxStackSize;
+            }
+            var readIsFireResistant = propertiesJson.getAsBooleanIfPresent(isFireResistantJsonKey);
+            if (readIsFireResistant != null) {
+                isFireResistant = readIsFireResistant;
+            }
+
+        }
+        return new ItemPropertiesDefinition(
+            parent,
+            maxStackSize,
+            isFireResistant
+        );
+    }
+
+}
