From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Thu, 25 Jan 2024 20:45:24 +0100
Subject: [PATCH] Read packs - Content - Items - Model

Adds a class `ItemDefinition`, that serves as the in-memory model of items defined in Fiddle packs.
The item properties are modelled in a separate class `ItemPropertiesDefinition`.
The possible bases for items are defined in `ItemDefinitionBase`.

A JSON parser for these definitions is added in the "Read packs - Content - Items - JSON parser" patch,
and the resulting definition instances can be then be loaded by corresponding loading procedures, added in the "Load packs - Content - Items - Register - Implementation" patch.

License: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)
Fiddle - https://fiddlemc.org

diff --git a/src/main/java/org/fiddlemc/fiddle/pack/read/fiddlecontent/definition/item/ItemDefinition.java b/src/main/java/org/fiddlemc/fiddle/pack/read/fiddlecontent/definition/item/ItemDefinition.java
new file mode 100644
index 0000000000000000000000000000000000000000..6972c09118e205e639958ac122a125a4087d32be
--- /dev/null
+++ b/src/main/java/org/fiddlemc/fiddle/pack/read/fiddlecontent/definition/item/ItemDefinition.java
@@ -0,0 +1,52 @@
+// Fiddle - read packs - items - model
+
+package org.fiddlemc.fiddle.pack.read.fiddlecontent.definition.item;
+
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.world.item.BlockItem;
+import net.minecraft.world.item.Item;
+import net.minecraft.world.level.block.Block;
+import org.fiddlemc.fiddle.pack.read.fiddlecontent.definition.FiddleContentDefinitionType;
+import org.fiddlemc.fiddle.pack.read.fiddlecontent.definition.blockoritem.BlockOrItemDefinition;
+import org.fiddlemc.fiddle.pack.read.fiddlecontent.definition.withparent.FiddleContentDefinitionParent;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.ArrayList;
+
+/**
+ * A blueprint of an {@link Item} to be added.
+ */
+public class ItemDefinition
+    extends BlockOrItemDefinition<ItemPropertiesDefinition> {
+
+    public static final FiddleContentDefinitionType<ItemDefinition> TYPE = new FiddleContentDefinitionType<>(
+        "items",
+        "item"
+    );
+
+    /**
+     * The untyped {@link ResourceLocation} pointing to a {@link Block}.
+     * <p>
+     *     This is only used if this item definition is for a {@link BlockItem}.
+     * </p>
+     * <p>
+     *     Even if this definition is for a {@link BlockItem}, this value may be null,
+     *     if the block's untyped {@link ResourceLocation} is the same as
+     *     {@linkplain #untypedResourceLocation this item's}.
+     * </p>
+     */
+    public final @Nullable ResourceLocation block;
+
+    public ItemDefinition(ResourceLocation untypedResourceLocation, FiddleContentDefinitionParent parent, ItemPropertiesDefinition properties, @Nullable ResourceLocation block) {
+        super(TYPE, untypedResourceLocation, parent, properties);
+        this.block = block;
+    }
+
+    @Override
+    public ArrayList<ResourceLocation> buildReferencedResourceLocations() {
+        var references = super.buildReferencedResourceLocations();
+        //TODO
+        return references;
+    }
+
+}
diff --git a/src/main/java/org/fiddlemc/fiddle/pack/read/fiddlecontent/definition/item/ItemPropertiesDefinition.java b/src/main/java/org/fiddlemc/fiddle/pack/read/fiddlecontent/definition/item/ItemPropertiesDefinition.java
new file mode 100644
index 0000000000000000000000000000000000000000..008fd61f179e836e6640c84449160675456a06de
--- /dev/null
+++ b/src/main/java/org/fiddlemc/fiddle/pack/read/fiddlecontent/definition/item/ItemPropertiesDefinition.java
@@ -0,0 +1,34 @@
+// Fiddle - read packs - items - model
+
+package org.fiddlemc.fiddle.pack.read.fiddlecontent.definition.item;
+
+import net.minecraft.world.item.Item;
+import org.fiddlemc.fiddle.pack.read.fiddlecontent.definition.blockoritem.BlockOrItemPropertiesDefinition;
+import org.fiddlemc.fiddle.pack.read.fiddlecontent.definition.withparent.FiddleContentDefinitionParent;
+import org.jetbrains.annotations.Nullable;
+
+/**
+ * The properties of an {@link ItemDefinition}, that can be used to build an
+ * {@link Item.Properties} instance.
+ * <p>
+ *     All values are optional: a default value or the value of the {@link ItemDefinition#parent}
+ *     can always be used instead.
+ * </p>
+ */
+public final class ItemPropertiesDefinition
+    extends BlockOrItemPropertiesDefinition {
+
+    public final @Nullable Integer maxStackSize;
+    public final @Nullable Boolean isFireResistant;
+
+    public ItemPropertiesDefinition(
+        @Nullable FiddleContentDefinitionParent parent,
+        @Nullable Integer maxStackSize,
+        @Nullable Boolean isFireResistant
+    ) {
+        super(parent);
+        this.maxStackSize = maxStackSize;
+        this.isFireResistant = isFireResistant;
+    }
+
+}
diff --git a/src/main/java/org/fiddlemc/fiddle/pack/read/fiddlecontent/definition/item/parent/ItemDefinitionBase.java b/src/main/java/org/fiddlemc/fiddle/pack/read/fiddlecontent/definition/item/parent/ItemDefinitionBase.java
new file mode 100644
index 0000000000000000000000000000000000000000..f350d6858642891f2fd9016ba826d78bd7b7d074
--- /dev/null
+++ b/src/main/java/org/fiddlemc/fiddle/pack/read/fiddlecontent/definition/item/parent/ItemDefinitionBase.java
@@ -0,0 +1,26 @@
+// Fiddle - read packs - items - model
+
+package org.fiddlemc.fiddle.pack.read.fiddlecontent.definition.item.parent;
+
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.world.item.Item;
+import org.fiddlemc.fiddle.pack.read.fiddlecontent.definition.blockoritem.BlockOrItemDefinitionBase;
+import org.fiddlemc.fiddle.pack.read.fiddlecontent.definition.item.ItemDefinition;
+import org.fiddlemc.fiddle.pack.read.fiddlecontent.definition.withparent.FiddleContentDefinitionParent;
+
+/**
+ * A parent for items that can be used in an {@link ItemDefinition}
+ * instead of a particular block. Most bases correspond to some particular subclass of {@link Item}.
+ */
+public final class ItemDefinitionBase
+    extends BlockOrItemDefinitionBase
+    implements FiddleContentDefinitionParent {
+
+    public static final ItemDefinitionBase ITEM = new ItemDefinitionBase(new ResourceLocation(ResourceLocation.DEFAULT_NAMESPACE, ""));
+    public static final ItemDefinitionBase BLOCK = new ItemDefinitionBase(new ResourceLocation(ResourceLocation.DEFAULT_NAMESPACE, "block"));
+
+    private ItemDefinitionBase(ResourceLocation untypedResourceLocation) {
+        this(untypedResourceLocation);
+    }
+
+}
