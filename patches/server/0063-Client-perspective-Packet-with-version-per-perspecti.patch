From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Sat, 29 Jul 2023 09:22:40 +0200
Subject: [PATCH] Client perspective - Packet with version per perspective

Adds an abstract base for Packet implementations that cache a version specific
to each ClientPerspective for which a version is requested.

License: Fiddle Public License Agreement 1.0 (included in license/FPL-1.0.txt)
Fiddle - https://fiddlemc.org

diff --git a/src/main/java/org/fiddlemc/fiddle/packet/PacketWithVersionPerClientPerspective.java b/src/main/java/org/fiddlemc/fiddle/packet/PacketWithVersionPerClientPerspective.java
new file mode 100644
index 0000000000000000000000000000000000000000..e4117ad506ebe69c134c3fdb69179b6387b5b0cc
--- /dev/null
+++ b/src/main/java/org/fiddlemc/fiddle/packet/PacketWithVersionPerClientPerspective.java
@@ -0,0 +1,88 @@
+// Fiddle - client perspective - packets are modifiable - packet with version per client perspective
+
+package org.fiddlemc.fiddle.packet;
+
+import net.minecraft.network.Connection;
+import net.minecraft.network.PacketListener;
+import net.minecraft.network.protocol.Packet;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Objects;
+
+/**
+ * An abstract base for {@link Packet}s that may be intended for multiple targets, with different
+ * {@link ClientPerspective}s.
+ * Therefore, the originally constructed {@link Packet} instance stores a lazily computed {@link Packet}
+ * for each {@link ClientPerspective}. Each such computed {@link Packet} instance stores a reference to the original,
+ * so that it can defer subsequent {@link #adaptForClient} calls.
+ */
+public abstract class PacketWithVersionPerClientPerspective<T extends PacketListener> implements Packet<T> {
+
+    /**
+     * The {@link ClientPerspective} of this instance.
+     * <br>
+     * This is null if and only if this instance is an original packet.
+     */
+    private @Nullable ClientPerspective clientPerspective;
+
+    /**
+     * A map of the {@link ClientPerspective}-specific versions of this packet.
+     * <br>
+     * This is null when this instance is not an original packet, or if this instance is an original packet
+     * but no {@link ClientPerspective}-specific versions have been created yet.
+     */
+    private @Nullable Map<@NotNull ClientPerspective, @NotNull PacketWithVersionPerClientPerspective<T>> specificVersions;
+
+    /**
+     * The original {@link Packet} of this packet.
+     * <br>
+     * This is null if and only if this instance is an original packet.
+     */
+    private @Nullable PacketWithVersionPerClientPerspective<T> original;
+
+    /**
+     * @return A newly constructed {@link Packet} instance, representing the same content as this packet,
+     * but modified to match the given {@link ClientPerspective}.
+     * <br>
+     * {@link #clientPerspective} and {@link #original} do not have to be set before returning.
+     */
+    protected abstract @NotNull PacketWithVersionPerClientPerspective<T> constructVersionForClientPerspective(@NotNull ClientPerspective clientPerspective);
+
+    @Override
+    public @NotNull PacketWithVersionPerClientPerspective<T> adaptForClient(@NotNull Connection connection) {
+        var targetClientPerspective = Objects.requireNonNull(connection.getPlayerClientPerspective());
+        if (this.original != null) {
+            // If this is already the desired packet, return it
+            if (targetClientPerspective == this.clientPerspective) {
+                return this;
+            }
+            // Defer to the original packet
+            return this.original.adaptForClient(connection);
+        }
+        // Instantiate version map
+        if (this.specificVersions == null) {
+            this.specificVersions = new HashMap<>(1);
+        }
+        return this.specificVersions.computeIfAbsent(targetClientPerspective, $ -> {
+            // Construct the desired version
+            var specificVersion = this.constructVersionForClientPerspective(targetClientPerspective);
+            specificVersion.clientPerspective = targetClientPerspective;
+            specificVersion.original = this;
+            return specificVersion;
+        });
+    }
+
+    @Override
+    public @NotNull ClientPerspective getExplicitTargetClientPerspective() {
+        return Objects.requireNonNull(this.clientPerspective);
+    }
+
+    @Override
+    public @Nullable ClientPerspective getExplicitTargetClientPerspectiveOrNull() {
+        return this.clientPerspective;
+    }
+
+}
