From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Sat, 29 Jul 2023 18:53:58 +0200
Subject: [PATCH] Client perspective - Block state visualization - Apply to
 chunk packets - Chunk packet data can use buffer partially

Instead of assuming we can precisely pre-calculate the size of the byte buffer needed
to contain the data in ClientboundLevelChunkPacketData, we begin by assuming that the
used buffer length is indeed the size that we pre-calculated, but we store it in a field (`bufferUsedLength`)
that may be modified if it later becomes clear the the buffer is in fact not entirely filled.
This gives us the opportunity to perform further changes to the chunk data after it has already been
stored in the buffer, when those changes may have a higher final buffer length than we initially
calculated. In that case, we can, instead of allocating a buffer with the precise length known in advance,
allocate a buffer with a length that is sufficient instead, and later set `bufferUsedLength` to the length
that was actually used, without having to re-allocate a new byte buffer with the correct trimmed size.

License: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)
Fiddle - https://fiddlemc.org

diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelChunkPacketData.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelChunkPacketData.java
index f28006e6ea84bb37f94398973772655ccc77520e..1fc308c8b3daab144032aa1f6c4eea49dde24aa8 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelChunkPacketData.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelChunkPacketData.java
@@ -30,6 +30,7 @@ public class ClientboundLevelChunkPacketData {
     // Fiddle end - client perspective - block state visualization - apply to chunk packets - ClientboundLevelChunkPacketData has a reference to its ClientboundLevelChunkWithLightPacket
     private final CompoundTag heightmaps;
     private final byte[] buffer;
+    public int bufferUsedLength; // Fiddle - client perspective - block state visualization - apply to chunk packets - chunk packet data can use buffer partially
     private final List<ClientboundLevelChunkPacketData.BlockEntityInfo> blockEntitiesData;
     // Paper start
     private final java.util.List<net.minecraft.network.protocol.Packet> extraPackets = new java.util.ArrayList<>();
@@ -55,6 +56,7 @@ public class ClientboundLevelChunkPacketData {
         }
 
         this.buffer = new byte[calculateChunkSize(chunk)];
+        this.bufferUsedLength = this.buffer.length; // Fiddle - client perspective - block state visualization - apply to chunk packets - chunk packet data can use buffer partially - initially we assume the entire buffer will be used
 
         // Paper start - Anti-Xray - Add chunk packet info
         if (chunkPacketInfo != null) {
@@ -94,6 +96,7 @@ public class ClientboundLevelChunkPacketData {
                 throw new RuntimeException("Chunk Packet trying to allocate too much memory on read.");
             } else {
                 this.buffer = new byte[i];
+                this.bufferUsedLength = this.buffer.length; // Fiddle - client perspective - block state visualization - apply to chunk packets - chunk packet data can use buffer partially - initially we assume the entire buffer will be used
                 buf.readBytes(this.buffer);
                 this.blockEntitiesData = buf.readList(ClientboundLevelChunkPacketData.BlockEntityInfo::new);
             }
@@ -102,8 +105,10 @@ public class ClientboundLevelChunkPacketData {
 
     public void write(FriendlyByteBuf buf) {
         buf.writeNbt(this.heightmaps, DeepReplacementScope.NOTHING); // Fiddle - client perspective - deep replacements - pass scope - to FriendlyByteBuf#writeNbt - this never contains replaceables
-        buf.writeVarInt(this.buffer.length);
-        buf.writeBytes(this.buffer);
+        // Fiddle start - client perspective - block state visualization - apply to chunk packets - chunk packet data can use buffer partially
+        buf.writeVarInt(this.bufferUsedLength);
+        buf.writeBytes(this.buffer, 0, this.bufferUsedLength);
+        // Fiddle end - client perspective - block state visualization - apply to chunk packets - chunk packet data can use buffer partially
         buf.writeCollection(this.blockEntitiesData, (buf2, entry) -> {
             entry.write(buf2);
         });
