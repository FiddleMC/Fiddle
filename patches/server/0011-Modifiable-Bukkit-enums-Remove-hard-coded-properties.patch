From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Mon, 10 Jul 2023 22:05:08 +0200
Subject: [PATCH] Modifiable Bukkit enums - Remove hard-coded properties -
 Material - Max stack size, durability

Modifies the Material properties getMaxStackSize() and getMaxDurability() so that they are no longer hard-coded.
Determining the values of the properties instead relies on an internal implementation
that matches the already existing checks in org.bukkit.PerMaterialTest.

The property values are also cached after being computed, for performant access.

License: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)
Fiddle - https://fiddlemc.org

diff --git a/src/main/java/org/bukkit/craftbukkit/legacy/CraftLegacy.java b/src/main/java/org/bukkit/craftbukkit/legacy/CraftLegacy.java
index 28d0625a672b44bf8734a55a38dbb8013fb9069a..60e3c358ae4716b00955317cff38aaafe4e0d6a1 100644
--- a/src/main/java/org/bukkit/craftbukkit/legacy/CraftLegacy.java
+++ b/src/main/java/org/bukkit/craftbukkit/legacy/CraftLegacy.java
@@ -377,7 +377,7 @@ public final class CraftLegacy {
             }
 
             // Handle items (and second fallback for blocks)
-            int maxData = material.getMaxDurability() == 0 ? 16 : 1;
+            int maxData = material.hasNonZeroMaxDurability() ? 1 : 16; // Fiddle - modifiable Bukkit enums - Material - remove hard-coded properties - durability
             // Manually do oldold spawn eggs
             if (material == Material.LEGACY_MONSTER_EGG) {
                 maxData = 121; // Vilager + 1
@@ -489,6 +489,18 @@ public final class CraftLegacy {
         }
         // Fiddle end - modifiable Bukkit enums - Material - make legacy conversion complete - ensure correct LEGACY_LONG_GRASS
 
+        // Fiddle start - modifiable Bukkit enums - Material - remove hard-coded properties - durability
+        // Ensure that whether legacy Materials have durability is correct, because this is used to compute their corresponding non-legacy Materials
+        for (Material material : Material.values()) {
+            if (material.isLegacy()) {
+                if ((material.hasNonZeroMaxDurability() != org.bukkit.craftbukkit.util.CraftLegacy.fromLegacy(material, true).hasNonZeroMaxDurability())) {
+                    LOGGER.error("A Bukkit legacy item Material (" + material + " had" + (material.hasNonZeroMaxDurability() ? "" : " no") + " max durability, while its corresponding non-legacy item Material (" + org.bukkit.craftbukkit.util.CraftLegacy.fromLegacy(material, true) + ") did" + (material.hasNonZeroMaxDurability() ? " not" : ""));
+                    System.exit(1);
+                }
+            }
+        }
+        // Fiddle end - modifiable Bukkit enums - Material - remove hard-coded properties - durability
+
     }
 
     public static void main(String[] args) {
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
index 4c182ca08e73a661f1949fef3f773aa413067b85..0b63786e6826ab47a38dbddc1f3a509ba47840e7 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
@@ -76,10 +76,7 @@ import org.bukkit.inventory.ItemStack;
 import org.bukkit.material.MaterialData;
 import org.bukkit.plugin.InvalidPluginException;
 import org.bukkit.plugin.PluginDescriptionFile;
-import org.fiddlemc.fiddle.material.CachedMaterialBooleanProperty;
-import org.fiddlemc.fiddle.material.CachedMaterialFloatProperty;
-import org.fiddlemc.fiddle.material.CachedMaterialProperty;
-import org.fiddlemc.fiddle.material.MaterialDefaultImplementations;
+import org.fiddlemc.fiddle.material.*;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
@@ -89,6 +86,33 @@ public final class CraftMagicNumbers implements UnsafeValues {
 
     private CraftMagicNumbers() {}
 
+    // Fiddle start - modifiable Bukkit enums - Material - remove hard-coded properties - max stack size
+    private final CachedMaterialIntProperty maxStackSizeCache = new CachedMaterialIntProperty(material -> {
+        if (!material.isItem()) {
+            return Item.MAX_STACK_SIZE;
+        }
+        // Based on org.bukkit.PerMaterialTest#maxStackSize
+        if (material == Material.AIR || material == Material.LEGACY_AIR) {
+            return 0;
+        }
+        return getItem(material).getMaxStackSize();
+    });
+    // Fiddle end - modifiable Bukkit enums - Material - remove hard-coded properties - max stack size
+
+    // Fiddle start - modifiable Bukkit enums - Material - remove hard-coded properties - durability
+    private final CachedMaterialShortProperty maxDurabilityCache = new CachedMaterialShortProperty(material -> {
+        // Use hard-coded value instead of non-legacy value, to avoid circular reference
+        if (material.isLegacy()) {
+            return MaterialDefaultImplementations.getMaxDurabilityLegacy(material);
+        }
+        // Based on org.bukkit.PerMaterialTest#testDurability
+        if (material.isBlock()) {
+            return (short) 0;
+        }
+        return (short) getItem(material).getMaxDamage();
+    });
+    // Fiddle end - modifiable Bukkit enums - Material - remove hard-coded properties - durability
+
     // Fiddle start - modifiable Bukkit enums - Material - remove hard-coded properties - most properties
     private final CachedMaterialBooleanProperty isBlockCache = new CachedMaterialBooleanProperty(material -> {
         if (material.isLegacy()) {
@@ -789,6 +813,20 @@ public final class CraftMagicNumbers implements UnsafeValues {
         public static final int TAG_ANY_NUMBER = 99;
     }
 
+    // Fiddle start - modifiable Bukkit enums - Material - remove hard-coded properties - max stack size
+    @Override
+    public int getMaxStackSize(Material material) {
+        return this.maxStackSizeCache.get(material);
+    }
+    // Fiddle end - modifiable Bukkit enums - Material - remove hard-coded properties - max stack size
+
+    // Fiddle start - modifiable Bukkit enums - Material - remove hard-coded properties - durability
+    @Override
+    public short getMaxDurability(Material material) {
+        return this.maxDurabilityCache.get(material);
+    }
+    // Fiddle end - modifiable Bukkit enums - Material - remove hard-coded properties - durability
+
     // Fiddle start - modifiable Bukkit enums - Material - remove hard-coded properties - most properties
     @Override
     public boolean isBlock(Material material) {
diff --git a/src/test/java/org/fiddlemc/fiddle/material/legacy/PerLegacyMaterialTest.java b/src/test/java/org/fiddlemc/fiddle/material/legacy/PerLegacyMaterialTest.java
index 9c6c3a84527c77eda301f5b27f843c045f1dfbbd..329e57fa4bf4bd35415683f60e5e76d1761ad00d 100644
--- a/src/test/java/org/fiddlemc/fiddle/material/legacy/PerLegacyMaterialTest.java
+++ b/src/test/java/org/fiddlemc/fiddle/material/legacy/PerLegacyMaterialTest.java
@@ -35,6 +35,31 @@ public class PerLegacyMaterialTest extends AbstractTestingBase {
         }
     }
 
+    // Fiddle start - modifiable Bukkit enums - Material - remove hard-coded properties - max stack size
+    @Test
+    public void getMaxStackSize() {
+        for (Material material : getMaterials()) {
+            assertEquals("getMaxStackSize equals hard-coded getMaxStackSize for " + material, material.getMaxStackSizeHardcoded(), material.getMaxStackSize());
+        }
+    }
+    // Fiddle end - modifiable Bukkit enums - Material - remove hard-coded properties - max stack size
+
+    // Fiddle start - modifiable Bukkit enums - Material - remove hard-coded properties - durability
+    @Test
+    public void getMaxDurability_hardcoded() {
+        for (Material material : getMaterials()) {
+            assertEquals("getMaxDurability equals hard-coded getMaxDurability for " + material, material.getMaxDurabilityHardcoded(), material.getMaxDurability());
+        }
+    }
+
+    @Test
+    public void getMaxDurability_legacy() {
+        for (Material material : getMaterials()) {
+            assertEquals("getMaxDurability equals legacy getMaxDurability for " + material, material.getMaxDurabilityLegacy(), material.getMaxDurability());
+        }
+    }
+    // Fiddle end - modifiable Bukkit enums - Material - remove hard-coded properties - durability
+
     // Fiddle start - modifiable Bukkit enums - Material - remove hard-coded properties - most properties
     @Test
     public void isBlock() {
diff --git a/src/test/java/org/fiddlemc/fiddle/material/legacy/PerNonLegacyMaterialTest.java b/src/test/java/org/fiddlemc/fiddle/material/legacy/PerNonLegacyMaterialTest.java
index 12889be0db543d9138f328163617c5f583c48018..4e7efd1c5c64d0e4df11ceb4314837f86de1d81a 100644
--- a/src/test/java/org/fiddlemc/fiddle/material/legacy/PerNonLegacyMaterialTest.java
+++ b/src/test/java/org/fiddlemc/fiddle/material/legacy/PerNonLegacyMaterialTest.java
@@ -35,4 +35,22 @@ public class PerNonLegacyMaterialTest extends AbstractTestingBase {
         }
     }
 
+    // Fiddle start - modifiable Bukkit enums - Material - remove hard-coded properties - max stack size
+    @Test
+    public void getMaxStackSize() {
+        for (Material material : getMaterials()) {
+            assertEquals("getMaxStackSize equals hard-coded getMaxStackSize for " + material, material.getMaxStackSizeHardcoded(), material.getMaxStackSize());
+        }
+    }
+    // Fiddle end - modifiable Bukkit enums - Material - remove hard-coded properties - max stack size
+
+    // Fiddle start - modifiable Bukkit enums - Material - remove hard-coded properties - durability
+    @Test
+    public void getMaxDurability() {
+        for (Material material : getMaterials()) {
+            assertEquals("getMaxDurability equals hard-coded getMaxDurability for " + material, material.getMaxDurabilityHardcoded(), material.getMaxDurability());
+        }
+    }
+    // Fiddle end - modifiable Bukkit enums - Material - remove hard-coded properties - durability
+
 }
