From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Wed, 12 Jul 2023 21:35:48 +0200
Subject: [PATCH] Modifiable Bukkit enums - Remove hard-coded properties -
 Material - Data class

Implements the abstract method defined in `UnsafeValues`
in the "Modifiable Bukkit enums - Remove hard-coded properties - Material - Data class" patch in the `fiddle-api` module,
in `CraftMagicNumbers`.

Also adds a test based on the original backing implementation.

License: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)
Fiddle - https://fiddlemc.org

diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
index 012bd1451b337890cd103783a0e14870a675632f..f4c164cca6604ce310d392fc90a95689eaed8881 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
@@ -847,6 +847,48 @@ public final class CraftMagicNumbers implements UnsafeValues {
     }
     // Fiddle end - modifiable Bukkit enums - Material - remove hard-coded properties - durability
 
+    // Fiddle start - modifiable Bukkit enums - Material - remove hard-coded properties - data
+    @Override
+    public @org.jetbrains.annotations.NotNull Class<?> computeData(Material material) {
+        if (material.isLegacy()) {
+            return org.fiddlemc.fiddle.material.MaterialDefaultImplementations.computeDataLegacy(material);
+        }
+        if (!material.isBlock()) {
+            return MaterialData.class;
+        }
+        // Based on org.bukkit.PerMaterialTest#testBlockDataClass
+        var bukkitBlockData = Bukkit.createBlockData(material);
+        var bukkitBlockDataClass = bukkitBlockData.getClass();
+        // Get all interfaces implemented by the class
+        java.util.Set<Class<?>> interfaces = new java.util.HashSet<>(6);
+        java.util.Deque<Class<?>> interfacesToCheck = new java.util.ArrayDeque<>(6);
+        for (Class<?> bukkitBlockDataInterface : bukkitBlockDataClass.getInterfaces()) {
+            if (interfaces.add(bukkitBlockDataInterface)) {
+                interfacesToCheck.add(bukkitBlockDataInterface);
+            }
+        }
+        while (!interfacesToCheck.isEmpty()) {
+            var interfaceToCheck = interfacesToCheck.poll();
+            for (Class<?> interfaceToCheckSubinterface : interfaceToCheck.getInterfaces()) {
+                if (interfaces.add(interfaceToCheckSubinterface)) {
+                    interfacesToCheck.add(interfaceToCheckSubinterface);
+                }
+            }
+        }
+        var validInterfaces = interfaces.stream()
+            // Filter only the interfaces that are in the org.bukkit.block.data package
+            .filter(theInterface -> theInterface.getPackageName().startsWith("org.bukkit.block.data"))
+            // Filter only the interfaces that extend (but are not equal to) org.bukkit.block.data.BlockData
+            .filter(theInterface -> !BlockData.class.equals(theInterface) && BlockData.class.isAssignableFrom(theInterface))
+            .collect(java.util.stream.Collectors.toSet());
+        return validInterfaces.stream()
+            // Filter only the interfaces that are not extended by another interface in the set
+            .filter(theInterface -> interfaces.stream().noneMatch(otherInterface -> !otherInterface.equals(theInterface) && theInterface.isAssignableFrom(otherInterface)))
+            // Find the first such interface, or fall back to MaterialData
+            .findAny().orElse(MaterialData.class);
+    }
+    // Fiddle end - modifiable Bukkit enums - Material - remove hard-coded properties - data
+
     // Fiddle start - modifiable Bukkit enums - Material - remove hard-coded properties - most properties
     @Override
     public boolean isBlock(Material material) {
diff --git a/src/test/java/org/fiddlemc/fiddle/material/legacy/PerLegacyMaterialTest.java b/src/test/java/org/fiddlemc/fiddle/material/legacy/PerLegacyMaterialTest.java
index 404343e96be4c5834fd159578530fb6e1a7a763a..022aef4cd7634687da9847565b0e12bc53c49477 100644
--- a/src/test/java/org/fiddlemc/fiddle/material/legacy/PerLegacyMaterialTest.java
+++ b/src/test/java/org/fiddlemc/fiddle/material/legacy/PerLegacyMaterialTest.java
@@ -61,6 +61,22 @@ public class PerLegacyMaterialTest extends AbstractTestingBase {
     }
     // Fiddle end - modifiable Bukkit enums - Material - remove hard-coded properties - durability
 
+    // Fiddle start - modifiable Bukkit enums - Material - remove hard-coded properties - data
+    @Test
+    public void computeData_general() {
+        for (Material material : getMaterials()) {
+            assertEquals(material.data, material.computeData(), "computeData does not equal hard-coded data for " + material);
+        }
+    }
+
+    @Test
+    public void computeData_legacy() {
+        for (Material material : getMaterials()) {
+            assertEquals(org.fiddlemc.fiddle.material.MaterialDefaultImplementations.computeDataLegacy(material), material.computeData(), "computeData does not equal legacy computeData for " + material);
+        }
+    }
+    // Fiddle end - modifiable Bukkit enums - Material - remove hard-coded properties - data
+
     // Fiddle start - modifiable Bukkit enums - Material - remove hard-coded properties - most properties
     @Test
     public void isBlock() {
diff --git a/src/test/java/org/fiddlemc/fiddle/material/legacy/PerNonLegacyMaterialTest.java b/src/test/java/org/fiddlemc/fiddle/material/legacy/PerNonLegacyMaterialTest.java
index a7e3252b9e4c1d8a218500adc58744335cc636e3..3b7915f67b67f0793fb5e89d16f9930ad885c284 100644
--- a/src/test/java/org/fiddlemc/fiddle/material/legacy/PerNonLegacyMaterialTest.java
+++ b/src/test/java/org/fiddlemc/fiddle/material/legacy/PerNonLegacyMaterialTest.java
@@ -62,4 +62,13 @@ public class PerNonLegacyMaterialTest extends AbstractTestingBase {
     }
     // Fiddle end - modifiable Bukkit enums - Material - remove hard-coded properties - durability
 
+    // Fiddle start - modifiable Bukkit enums - Material - remove hard-coded properties - data
+    @Test
+    public void computeData() {
+        for (Material material : getMaterials()) {
+            assertEquals(material.data, material.computeData(), "computeData does not equal hard-coded data for " + material);
+        }
+    }
+    // Fiddle end - modifiable Bukkit enums - Material - remove hard-coded properties - data
+
 }
