From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Wed, 3 Jan 2024 20:43:27 +0100
Subject: [PATCH] Client perspective - Block state visualization - Apply to
 block update packets - Replace states when writing

Implements replacement of the `BlockState` values written to the `FriendlyByteBuf` based on the target client.

License: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)
Fiddle - https://fiddlemc.org

diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundBlockUpdatePacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundBlockUpdatePacket.java
index d73bd60cad84bbfdf4ac2d6def2cb1d2c52bb7f7..7feb7e3f7fb0e8e959005a58bcde2c084c650367 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundBlockUpdatePacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundBlockUpdatePacket.java
@@ -43,7 +43,22 @@ public class ClientboundBlockUpdatePacket extends org.fiddlemc.fiddle.packet.Pac
     @Override
     public void write(FriendlyByteBuf buf) {
         buf.writeBlockPos(this.pos);
-        buf.writeId(Block.BLOCK_STATE_REGISTRY, this.blockState);
+        // Fiddle start - client perspective - block state visualization - apply to block update packets - replace states when writing - single block update
+        var clientPerspective = this.getExplicitTargetClientPerspective();
+        var player = this.getExplicitTargetClientConnection().getPlayer();
+        var level = (net.minecraft.server.level.ServerLevel) player.level();
+        if (level == null) {
+            level = net.minecraft.server.MinecraftServer.getServer().getAllLevels().iterator().next(); // This fallback shouldn't be necessary, but it could occur when packets are sent with bad timing
+        }
+        var visualizationSetupper = this.blockState.visualizationSetupper;
+        BlockState stateToSend;
+        if (visualizationSetupper == null) {
+            stateToSend = this.blockState;
+        } else {
+            stateToSend = visualizationSetupper.setUp(level, this.pos.getX(), this.pos.getY(), this.pos.getZ(), this.blockState, player, clientPerspective, org.fiddlemc.fiddle.packet.block.BlockStateVisualizationSetupper.BlockStateVisualizationPurpose.PHYSICAL);
+        }
+        buf.writeBlockState(stateToSend);
+        // Fiddle end - client perspective - block state visualization - apply to block update packets - replace states when writing - single block update
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundSectionBlocksUpdatePacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundSectionBlocksUpdatePacket.java
index 8790022b2f20d5d2778ea59d785e21a65e820d3c..84d40b10f532a229da0447f5bc6184e10be0b91d 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundSectionBlocksUpdatePacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundSectionBlocksUpdatePacket.java
@@ -76,8 +76,29 @@ public class ClientboundSectionBlocksUpdatePacket extends org.fiddlemc.fiddle.pa
         buf.writeLong(this.sectionPos.asLong());
         buf.writeVarInt(this.positions.length);
 
+        // Fiddle start - client perspective - block state visualization - apply to block update packets - replace states when writing - section blocks update
+        var clientPerspective = this.getExplicitTargetClientPerspective();
+        var player = this.getExplicitTargetClientConnection().getPlayer();
+        var level = (net.minecraft.server.level.ServerLevel) player.level();
+        if (level == null) {
+            level = net.minecraft.server.MinecraftServer.getServer().getAllLevels().iterator().next(); // This fallback shouldn't be necessary, but it could occur when packets are sent with bad timing
+        }
+        BlockPos.MutableBlockPos pos = new BlockPos.MutableBlockPos();
+        // Fiddle end - client perspective - block state visualization - apply to block update packets - replace states when writing - section blocks update
         for (int i = 0; i < this.positions.length; ++i) {
-            buf.writeVarLong((long) Block.getId(this.states[i]) << 12 | (long) this.positions[i]);
+            // Fiddle start - client perspective - block state visualization - apply to block update packets - replace states when writing - section blocks update
+            var state = this.states[i];
+            var visualizationSetupper = state.visualizationSetupper;
+            BlockState stateToSend;
+            if (visualizationSetupper == null) {
+                stateToSend = state;
+            } else {
+                var positionShort = this.positions[i];
+                pos.set(this.sectionPos.relativeToBlockX(positionShort), this.sectionPos.relativeToBlockY(positionShort), this.sectionPos.relativeToBlockZ(positionShort));
+                stateToSend = visualizationSetupper.setUp(level, pos.getX(), pos.getY(), pos.getZ(), state, player, clientPerspective, org.fiddlemc.fiddle.packet.block.BlockStateVisualizationSetupper.BlockStateVisualizationPurpose.PHYSICAL);
+            }
+            buf.writeVarLong((long) clientPerspective.getPacketBlockStateId(stateToSend) << 12 | (long) this.positions[i]);
+            // Fiddle end - client perspective - block state visualization - apply to block update packets - replace states when writing - section blocks update
         }
 
     }
