From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Thu, 25 Jan 2024 20:45:02 +0100
Subject: [PATCH] Read packs - Content - Definitions - Abstract model

Adds am abstract class `FiddleContentDefinition` for content definitions, as well as a `FiddleContentDefinitionType` class for which a single instance can be created for each content type.

An abstract JSON parser for these definitions is added in the "Read packs - Content - Definitions - Abstract JSON parser" patch,
and the resulting definition instances can be then be loaded by corresponding loading procedures.

License: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)
Fiddle - https://fiddlemc.org

diff --git a/src/main/java/org/fiddlemc/fiddle/pack/read/fiddlecontent/definition/FiddleContentDefinition.java b/src/main/java/org/fiddlemc/fiddle/pack/read/fiddlecontent/definition/FiddleContentDefinition.java
new file mode 100644
index 0000000000000000000000000000000000000000..a0cdf3251318ca7187a4f952305bc5c239702bd4
--- /dev/null
+++ b/src/main/java/org/fiddlemc/fiddle/pack/read/fiddlecontent/definition/FiddleContentDefinition.java
@@ -0,0 +1,120 @@
+// Fiddle - read packs - content definitions - model
+
+package org.fiddlemc.fiddle.pack.read.fiddlecontent.definition;
+
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.world.level.block.StairBlock;
+import org.fiddlemc.fiddle.pack.read.fiddlecontent.definition.block.BlockDefinition;
+import org.fiddlemc.fiddle.pack.read.fiddlecontent.definition.item.ItemDefinition;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.*;
+import java.util.stream.IntStream;
+
+/**
+ * A common base class for content definitions, such as for blocks or items.
+ */
+public abstract class FiddleContentDefinition {
+
+    public final FiddleContentDefinitionType<?> type;
+
+    /**
+     * The untyped {@link ResourceLocation}, for example <code>minecraft:stone_bricks</code>.
+     */
+    public final ResourceLocation untypedResourceLocation;
+
+    protected FiddleContentDefinition(FiddleContentDefinitionType<?> type, ResourceLocation untypedResourceLocation) {
+        this.type = type;
+        this.untypedResourceLocation = untypedResourceLocation;
+    }
+
+    /**
+     * @return The typed {@link ResourceLocation}, for example <code>minecraft:block/stone_bricks</code>.
+     */
+    public final ResourceLocation getTypedResourceLocation() {
+        return new ResourceLocation(this.untypedResourceLocation.getNamespace(), this.type.resourceLocationPathIdentifier + "/" + this.untypedResourceLocation.getPath());
+    }
+
+    /**
+     * The internal implementation for {@link #getReferencedResourceLocations()}.
+     */
+    protected ArrayList<ResourceLocation> buildReferencedResourceLocations() {
+        return new ArrayList<>(0);
+    }
+
+    /**
+     * @return A list of the untyped references, to content of the same {@link #type}, in this definition
+     * that require the referenced content to have been instantiated.
+     * For example, some definitions may refer to a parent of the same resource type,
+     * or may have to refer to them in some way when turned into a resource
+     * (e.g. a {@link StairBlock} has a reference to the corresponding full block state).
+     */
+    public final List<ResourceLocation> getReferencedResourceLocations() {
+        return Collections.unmodifiableList(this.buildReferencedResourceLocations());
+    }
+
+    @Override
+    public final String toString() {
+        return this.untypedResourceLocation.toString();
+    }
+
+    /**
+     * Gets a topologically sorted copy of the given {@code definitions}.
+     * <br>
+     * All definitions in the given list must have the same {@linkplain #type type}
+     * (this is not checked by the implementation of this method).
+     * There may not be duplicate elements in the given list
+     * (this is not checked by the implementation of this method).
+     *
+     * @return A new list, containing the same elements as the given list,
+     * but ordered topologically according to the dependency forest defined by the
+     * {@linkplain #getReferencedResourceLocations references} that definitions have to
+     * other definitions in the list.
+     *
+     * @throws IllegalArgumentException If there is a cyclic dependency in the given definitions.
+     */
+    public static <T extends FiddleContentDefinition> @NotNull List<@NotNull T> getSortedTopologicallyByReferences(@NotNull List<@NotNull T> definitions) {
+        if (definitions.isEmpty()) {
+            return Collections.emptyList();
+        }
+        Map<ResourceLocation, Integer> toIndexInDefinitions = new IdentityHashMap<>();
+        for (int i = 0; i < definitions.size(); i++) {
+            toIndexInDefinitions.put(definitions.get(i).untypedResourceLocation, i);
+        }
+        int[] dependenciesLeftToAdd = new int[definitions.size()];
+        List<List<T>> dependents = new ArrayList<>();
+        for (int i = 0; i < definitions.size(); i++) {
+            dependents.add(new ArrayList<>());
+        }
+        for (var definition : definitions) {
+            for (var dependency : definition.getReferencedResourceLocations()) {
+                var dependencyIndex = toIndexInDefinitions.get(dependency);
+                if (dependencyIndex != null) {
+                    dependents.get(dependencyIndex).add(definition);
+                }
+            }
+        }
+        Queue<T> noUnaddedDependencies = new ArrayDeque<>(definitions.size());
+        for (int i = 0; i < definitions.size(); i++) {
+            if (dependenciesLeftToAdd[i] == 0) {
+                noUnaddedDependencies.add(definitions.get(i));
+            }
+        }
+        List<T> sorted = new ArrayList<>(definitions.size());
+        while (!noUnaddedDependencies.isEmpty()) {
+            var toAdd = noUnaddedDependencies.poll();
+            sorted.add(toAdd);
+            for (var dependent : dependents.get(toIndexInDefinitions.get(toAdd.untypedResourceLocation))) {
+                if (--dependenciesLeftToAdd[toIndexInDefinitions.get(dependent.untypedResourceLocation)] == 0) {
+                    noUnaddedDependencies.add(dependent);
+                }
+            }
+        }
+        if (sorted.size() == definitions.size()) {
+            return sorted;
+        }
+        // There was a cycle
+        throw new IllegalArgumentException("There was a cyclic dependency in definitions of type '" + definitions.get(0).type.resourceLocationPathIdentifier + "'. The cycle is made up of some (but not all) of the following definitions: " + IntStream.range(0, definitions.size()).filter(index -> dependenciesLeftToAdd[index] > 0).mapToObj(definitions::get).map(definition -> definition.untypedResourceLocation.toString()).toList());
+    }
+
+}
diff --git a/src/main/java/org/fiddlemc/fiddle/pack/read/fiddlecontent/definition/FiddleContentDefinitionType.java b/src/main/java/org/fiddlemc/fiddle/pack/read/fiddlecontent/definition/FiddleContentDefinitionType.java
new file mode 100644
index 0000000000000000000000000000000000000000..28e0cd0a0351dd4a70f43bbbb4afda98e905d219
--- /dev/null
+++ b/src/main/java/org/fiddlemc/fiddle/pack/read/fiddlecontent/definition/FiddleContentDefinitionType.java
@@ -0,0 +1,39 @@
+// Fiddle - read packs - content definitions - model
+
+package org.fiddlemc.fiddle.pack.read.fiddlecontent.definition;
+
+import net.minecraft.resources.ResourceLocation;
+
+/**
+ * The type of content of a {@link FiddleContentDefinition}.
+ */
+public class FiddleContentDefinitionType<T extends FiddleContentDefinition> {
+
+    /**
+     * The name of the folder corresponding to this type of resource,
+     * when it is in a namespace folder inside the <code>content</code> folder in a Fiddle pack.
+     */
+    public final String contentSubNamespaceFolderName;
+
+    /**
+     * The identifier in a typed {@link ResourceLocation} path, that is used as a prefix together with the
+     * <code>/</code> character.
+     */
+    public final String resourceLocationPathIdentifier;
+
+    /**
+     * A singular textual name for this type.
+     */
+    public final String textualName;
+
+    public FiddleContentDefinitionType(String contentSubNamespaceFolderName, String resourceLocationPathIdentifier) {
+        this(contentSubNamespaceFolderName, resourceLocationPathIdentifier, resourceLocationPathIdentifier);
+    }
+
+    public FiddleContentDefinitionType(String contentSubNamespaceFolderName, String resourceLocationPathIdentifier, String textualName) {
+        this.contentSubNamespaceFolderName = contentSubNamespaceFolderName;
+        this.resourceLocationPathIdentifier = resourceLocationPathIdentifier;
+        this.textualName = textualName;
+    }
+
+}
