From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Thu, 4 Jan 2024 22:05:13 +0100
Subject: [PATCH] Client perspective - Item replacements - Level event data -
 Play jukebox sound

Fires the level event of starting or stopping the sound of a music disc in a jukebox, with the data value directly being the corresponding music disc `ItemStack` (or `Items#AIR` in the case of stopping).

License: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)
Fiddle - https://fiddlemc.org

diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelEventPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelEventPacket.java
index fa60a241c006596df52bd8f9b80f50a14dc7bc9d..5b1fd6d3f66398b9c55be32f5591feb598cb0645 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelEventPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelEventPacket.java
@@ -189,6 +189,11 @@ public class ClientboundLevelEventPacket extends org.fiddlemc.fiddle.packet.Clon
 
     // Fiddle start - client perspective - item replacements - level event data - data can be Item
     private org.fiddlemc.fiddle.packet.item.ItemInPacketContext getItemInPacketContextByType() {
+        // Fiddle start - client perspective - item replacements - level event data - play jukebox sound
+        if (this.type == net.minecraft.world.level.block.LevelEvent.SOUND_PLAY_JUKEBOX_SONG || this.type == net.minecraft.world.level.block.LevelEvent.SOUND_STOP_JUKEBOX_SONG) {
+            return org.fiddlemc.fiddle.packet.item.ItemInPacketContext.JUKEBOX_MUSIC_DISC;
+        }
+        // Fiddle end - client perspective - item replacements - level event data - play jukebox sound
         throw new IllegalStateException("Tried to convert level event data from Item with an unsupported type: " + this.type);
     }
     // Fiddle end - client perspective - item replacements - level event data - data can be Item
diff --git a/src/main/java/net/minecraft/world/level/block/entity/JukeboxBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/JukeboxBlockEntity.java
index 62acd6686626c84c9fc3964af62097101e8e582f..7c542d041e66532bbebdb8fe6ad30cec9d9b4658 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/JukeboxBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/JukeboxBlockEntity.java
@@ -122,7 +122,7 @@ public class JukeboxBlockEntity extends BlockEntity implements Clearable, Contai
         this.recordStartedTick = this.tickCount;
         this.isPlaying = true;
         this.level.updateNeighborsAt(this.getBlockPos(), this.getBlockState().getBlock());
-        this.level.levelEvent((Player) null, 1010, this.getBlockPos(), Item.getId(this.getFirstItem().getItem()));
+        this.level.levelEvent((Player) null, 1010, this.getBlockPos(), this.getFirstItem()); // Fiddle - client perspective - item replacements - level event data - play jukebox sound
         this.setChanged();
     }
 
@@ -130,7 +130,7 @@ public class JukeboxBlockEntity extends BlockEntity implements Clearable, Contai
         this.isPlaying = false;
         this.level.gameEvent(GameEvent.JUKEBOX_STOP_PLAY, this.getBlockPos(), GameEvent.Context.of(this.getBlockState()));
         this.level.updateNeighborsAt(this.getBlockPos(), this.getBlockState().getBlock());
-        this.level.levelEvent(1011, this.getBlockPos(), 0);
+        this.level.levelEvent(1011, this.getBlockPos(), net.minecraft.world.item.Items.AIR); // Fiddle - client perspective - item replacements - level event data - play jukebox sound
         this.setChanged();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftEffect.java b/src/main/java/org/bukkit/craftbukkit/CraftEffect.java
index 2d8172f1b55f17bbc66dc5e870073c9df28d6abe..721d577e5fa29cb36b4d739e2820679c257e689f 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftEffect.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftEffect.java
@@ -28,7 +28,7 @@ public class CraftEffect {
             break;
         case RECORD_PLAY:
             Preconditions.checkArgument(data == Material.AIR || ((Material) data).isRecord(), "Invalid record type for Material %s!", data);
-            datavalue = Item.getId(CraftMagicNumbers.getItem((Material) data));
+            datavalue = CraftMagicNumbers.getItem((Material) data); // Fiddle - client perspective - item replacements - level event data - play jukebox sound
             break;
         case SMOKE:
             switch ((BlockFace) data) {
