From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Mon, 15 May 2023 21:01:59 +0200
Subject: [PATCH] Read packs - Files provider - Implementation for packs in
 directories

License: Fiddle Public License Agreement 1.0 (included in license/FPL-1.0.txt)
Fiddle - https://fiddlemc.org

diff --git a/src/main/java/org/fiddlemc/fiddle/pack/files/directory/DirectoryFiddlePackFilesProvider.java b/src/main/java/org/fiddlemc/fiddle/pack/files/directory/DirectoryFiddlePackFilesProvider.java
new file mode 100644
index 0000000000000000000000000000000000000000..0e52238afa95c6276bb11b3bffe33901e5ff71d4
--- /dev/null
+++ b/src/main/java/org/fiddlemc/fiddle/pack/files/directory/DirectoryFiddlePackFilesProvider.java
@@ -0,0 +1,82 @@
+// Fiddle - read packs - pack files - directory packs
+
+package org.fiddlemc.fiddle.pack.files.directory;
+
+import org.fiddlemc.fiddle.pack.files.FiddlePackFilesProvider;
+import org.fiddlemc.fiddle.pack.files.RegularFileInPack;
+import org.jetbrains.annotations.Nullable;
+
+import java.io.File;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.List;
+import java.util.stream.Stream;
+
+/**
+ * A {@link FiddlePackFilesProvider} for packs that are defined in a plain file system directory.
+ */
+public class DirectoryFiddlePackFilesProvider implements FiddlePackFilesProvider {
+
+    /**
+     * The directory of this pack.
+     */
+    final File packDirectory;
+
+    /**
+     * May be empty or incomplete while not fully computed yet (instances are added on the fly when they are created).
+     */
+    private final List<FileInDirectoryPack> files = new ArrayList<>(1);
+
+    /**
+     * Null while it has not been computed yet.
+     */
+    private @Nullable List<FileInDirectoryPack> topLevelFiles;
+
+    public DirectoryFiddlePackFilesProvider(File packDirectory) {
+        this.packDirectory = packDirectory;
+    }
+
+    @Override
+    public String getLocation() {
+        return this.packDirectory.getPath();
+    }
+
+    List<FileInDirectoryPack> getTopLevelFilesForDirectoryAndAddToAllFiles(File directory) {
+        File[] directoryFiles = directory.listFiles();
+        if (directoryFiles == null) {
+            return Collections.emptyList();
+        } else {
+            List<FileInDirectoryPack> topLevelFiles = Arrays.stream(directoryFiles)
+                .map(file -> file.isDirectory() ? new DirectoryInDirectoryPack(this, file) : new RegularFileInDirectoryPack(this, file))
+                .toList();
+            this.files.addAll(topLevelFiles);
+            return topLevelFiles;
+        }
+    }
+
+    @Override
+    public Stream<FileInDirectoryPack> getTopLevelFilesStream() {
+        return this.getTopLevelFiles().stream();
+    }
+
+    @Override
+    public List<FileInDirectoryPack> getTopLevelFiles() {
+        if (this.topLevelFiles == null) {
+            this.topLevelFiles = this.getTopLevelFilesForDirectoryAndAddToAllFiles(this.packDirectory);
+        }
+        return this.topLevelFiles;
+    }
+
+    @Override
+    public void closeHandlesAndClearCache() {
+        for (FileInDirectoryPack file : this.files) {
+            if (file instanceof RegularFileInPack regularFile) {
+                regularFile.clearCachedBytes();
+            }
+        }
+        this.files.clear();
+        this.topLevelFiles = null;
+    }
+
+}
diff --git a/src/main/java/org/fiddlemc/fiddle/pack/files/directory/DirectoryInDirectoryPack.java b/src/main/java/org/fiddlemc/fiddle/pack/files/directory/DirectoryInDirectoryPack.java
new file mode 100644
index 0000000000000000000000000000000000000000..d12b7e5e0ad22b51ca160eabfea18723b176d46a
--- /dev/null
+++ b/src/main/java/org/fiddlemc/fiddle/pack/files/directory/DirectoryInDirectoryPack.java
@@ -0,0 +1,48 @@
+package org.fiddlemc.fiddle.pack.files.directory;
+
+import org.fiddlemc.fiddle.pack.files.DirectoryInPack;
+import org.jetbrains.annotations.Nullable;
+
+import java.io.File;
+import java.util.List;
+import java.util.stream.Stream;
+
+class DirectoryInDirectoryPack implements DirectoryInPack, FileInDirectoryPack {
+
+    private final DirectoryFiddlePackFilesProvider filesProvider;
+    private final File file;
+
+    /**
+     * Null while it has not been computed yet.
+     */
+    private @Nullable List<FileInDirectoryPack> topLevelFiles;
+
+    DirectoryInDirectoryPack(DirectoryFiddlePackFilesProvider filesProvider, File file) {
+        this.filesProvider = filesProvider;
+        this.file = file;
+    }
+
+    @Override
+    public DirectoryFiddlePackFilesProvider getFilesProvider() {
+        return this.filesProvider;
+    }
+
+    @Override
+    public File getFile() {
+        return this.file;
+    }
+
+    @Override
+    public Stream<FileInDirectoryPack> getTopLevelFilesStream() {
+        return this.getTopLevelFiles().stream();
+    }
+
+    @Override
+    public List<FileInDirectoryPack> getTopLevelFiles() {
+        if (this.topLevelFiles == null) {
+            this.topLevelFiles = this.filesProvider.getTopLevelFilesForDirectoryAndAddToAllFiles(this.file);
+        }
+        return this.topLevelFiles;
+    }
+
+}
diff --git a/src/main/java/org/fiddlemc/fiddle/pack/files/directory/FileInDirectoryPack.java b/src/main/java/org/fiddlemc/fiddle/pack/files/directory/FileInDirectoryPack.java
new file mode 100644
index 0000000000000000000000000000000000000000..71d43e6de0c5139c8f96967a3a58bb64c7a529fc
--- /dev/null
+++ b/src/main/java/org/fiddlemc/fiddle/pack/files/directory/FileInDirectoryPack.java
@@ -0,0 +1,29 @@
+package org.fiddlemc.fiddle.pack.files.directory;
+
+import org.fiddlemc.fiddle.pack.files.FiddlePackFilesProvider;
+import org.fiddlemc.fiddle.pack.files.FileInPack;
+import org.fiddlemc.fiddle.pack.reader.PackParseException;
+
+import java.io.File;
+import java.nio.file.Paths;
+
+interface FileInDirectoryPack extends FileInPack {
+
+    DirectoryFiddlePackFilesProvider getFilesProvider();
+
+    File getFile();
+
+    default String getPathInArchive() throws PackParseException {
+        try {
+            return Paths.get(this.getFilesProvider().packDirectory.getPath()).relativize(Paths.get(this.getFile().getPath())).toString();
+        } catch (IllegalArgumentException e) {
+            throw new PackParseException("Failed to get the name of a file in a pack directory ('" + this.getFilesProvider().getLocation() + "'): " + e.getMessage(), e);
+        }
+    }
+
+    @Override
+    default String getName() throws PackParseException {
+        return FiddlePackFilesProvider.getNameFromPath(this.getPathInArchive());
+    }
+
+}
diff --git a/src/main/java/org/fiddlemc/fiddle/pack/files/directory/RegularFileInDirectoryPack.java b/src/main/java/org/fiddlemc/fiddle/pack/files/directory/RegularFileInDirectoryPack.java
new file mode 100644
index 0000000000000000000000000000000000000000..1e312a59f57d257df05e156e77c133d1f1ff3cb8
--- /dev/null
+++ b/src/main/java/org/fiddlemc/fiddle/pack/files/directory/RegularFileInDirectoryPack.java
@@ -0,0 +1,38 @@
+package org.fiddlemc.fiddle.pack.files.directory;
+
+import org.fiddlemc.fiddle.pack.files.CachingRegularFileInPack;
+import org.fiddlemc.fiddle.pack.reader.PackParseException;
+
+import java.io.File;
+import java.io.IOException;
+import java.nio.file.Files;
+
+class RegularFileInDirectoryPack extends CachingRegularFileInPack implements FileInDirectoryPack {
+
+    private final DirectoryFiddlePackFilesProvider filesProvider;
+    private final File file;
+
+    RegularFileInDirectoryPack(DirectoryFiddlePackFilesProvider filesProvider, File file) {
+        this.filesProvider = filesProvider;
+        this.file = file;
+    }
+
+    @Override
+    public DirectoryFiddlePackFilesProvider getFilesProvider() {
+        return this.filesProvider;
+    }
+
+    @Override
+    public File getFile() {
+        return this.file;
+    }
+
+    @Override
+    protected byte[] readBytes() throws PackParseException {
+        try {
+            return Files.readAllBytes(this.file.toPath());
+        } catch (IOException e) {
+            throw new PackParseException("An exception of type " + e.getClass().getSimpleName() + " occurred while reading a file ('" + this.getPathInArchive() + "') in a pack folder ('" + this.filesProvider.getLocation() + "'): " + e.getMessage(), e);
+        }
+    }
+}
