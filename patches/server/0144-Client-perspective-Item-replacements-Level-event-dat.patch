From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Sat, 10 Feb 2024 12:02:13 +0100
Subject: [PATCH] Client perspective - Item replacements - Level event data -
 Play jukebox sound

Registers `LevelEvent.SOUND_PLAY_JUKEBOX_SONG` and `LevelEvent.SOUND_STOP_JUKEBOX_SONG` as level event types where the data represents an item.

Also replaces the data passed to the level event in two cases:
* `JukeboxBlockEntity.startPlaying` passes an `ItemStack` instead of only an `Item` id
* `JukeboxBlockEntity.stopPlaying` passes an `Item` instead of a hardcoded id

License: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)
Fiddle - https://fiddlemc.org

diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelEventPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelEventPacket.java
index eb32b2a6ef814c354dc193a1b6c017f6faf1a144..dde3c225477fe903fece08d34b3d4f2a2c75b523 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelEventPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelEventPacket.java
@@ -17,8 +17,16 @@ public class ClientboundLevelEventPacket extends org.fiddlemc.fiddle.packet.Clon
     // Fiddle end - client perspective - block state visualization - level event data - data can be BlockState
     // Fiddle start - client perspective - block state visualization - level event data - data can be Item or ItemStack
     private final static int[] typesWhereDataIsItem = {
+        // Fiddle start - client perspective - item replacements - level event data - play jukebox sound
+        net.minecraft.world.level.block.LevelEvent.SOUND_PLAY_JUKEBOX_SONG,
+        net.minecraft.world.level.block.LevelEvent.SOUND_STOP_JUKEBOX_SONG,
+        // Fiddle end - client perspective - item replacements - level event data - play jukebox sound
     };
     private final static org.fiddlemc.fiddle.packet.item.ItemInPacketContext[] itemInPacketContextForTypes = {
+        // Fiddle start - client perspective - item replacements - level event data - play jukebox sound
+        org.fiddlemc.fiddle.packet.item.ItemInPacketContext.JUKEBOX_MUSIC_DISC,
+        org.fiddlemc.fiddle.packet.item.ItemInPacketContext.JUKEBOX_MUSIC_DISC,
+        // Fiddle end - client perspective - item replacements - level event data - play jukebox sound
     };
     // Fiddle end - client perspective - block state visualization - level event data - data can be Item or ItemStack
     private final int type;
diff --git a/src/main/java/net/minecraft/world/level/block/entity/JukeboxBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/JukeboxBlockEntity.java
index 2c1edc6dfc7fd1a8af977919ce31913365cf3ddd..59a572be7f249dff31d0c59ba68b479673dc51f9 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/JukeboxBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/JukeboxBlockEntity.java
@@ -122,7 +122,7 @@ public class JukeboxBlockEntity extends BlockEntity implements Clearable, Contai
         this.recordStartedTick = this.tickCount;
         this.isPlaying = true;
         this.level.updateNeighborsAt(this.getBlockPos(), this.getBlockState().getBlock());
-        this.level.levelEvent((Player) null, 1010, this.getBlockPos(), Item.getId(this.getFirstItem().getItem()));
+        this.level.levelEvent((Player) null, 1010, this.getBlockPos(), this.getFirstItem()); // Fiddle - client perspective - item replacements - level event data - play jukebox sound
         this.setChanged();
     }
 
@@ -130,7 +130,7 @@ public class JukeboxBlockEntity extends BlockEntity implements Clearable, Contai
         this.isPlaying = false;
         this.level.gameEvent(GameEvent.JUKEBOX_STOP_PLAY, this.getBlockPos(), GameEvent.Context.of(this.getBlockState()));
         this.level.updateNeighborsAt(this.getBlockPos(), this.getBlockState().getBlock());
-        this.level.levelEvent(1011, this.getBlockPos(), 0);
+        this.level.levelEvent(1011, this.getBlockPos(), net.minecraft.world.item.Items.AIR); // Fiddle - client perspective - item replacements - level event data - play jukebox sound
         this.setChanged();
     }
 
