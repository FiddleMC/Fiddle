From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Sat, 27 Jan 2024 14:22:25 +0100
Subject: [PATCH] Load packs - Content - Blocks - Register - Implementation

This provides the implementation, in `BlockByDefinitionLoader`, to register `BlockDefinition` instances as `Block`s in the block registry.
It relies on the more generic implementation, in `BlockOrItemByDefinitionLoader`, provided by the patch "Load packs - Content - Blocks and items - Register - Abstract implementation".

License: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)
Fiddle - https://fiddlemc.org

diff --git a/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java b/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java
index de4c1e4701236e7d5ec77339c51ad6a9d8288bb6..0bdbf9c2c05d2d23b96b0df463f11d0bab9262f3 100644
--- a/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java
+++ b/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java
@@ -80,20 +80,28 @@ import net.minecraft.world.phys.shapes.VoxelShape;
 public abstract class BlockBehaviour implements FeatureElement {
 
     protected static final Direction[] UPDATE_SHAPE_ORDER = new Direction[]{Direction.WEST, Direction.EAST, Direction.NORTH, Direction.SOUTH, Direction.DOWN, Direction.UP};
-    public final boolean hasCollision;
-    protected final float explosionResistance;
-    protected final boolean isRandomlyTicking;
-    protected final SoundType soundType;
-    protected final float friction;
-    protected final float speedFactor;
-    protected final float jumpFactor;
-    protected final boolean dynamicShape;
-    protected final FeatureFlagSet requiredFeatures;
-    protected final BlockBehaviour.Properties properties;
+    // Fiddle start - load packs - blocks - register - implementation - copy properties - final -> non-final
+    public boolean hasCollision;
+    protected float explosionResistance;
+    protected boolean isRandomlyTicking;
+    protected SoundType soundType;
+    protected float friction;
+    protected float speedFactor;
+    protected float jumpFactor;
+    protected boolean dynamicShape;
+    protected FeatureFlagSet requiredFeatures;
+    public BlockBehaviour.Properties properties; // Fiddle end - load packs - blocks - register - implementation - copy properties - protected -> public
+    // Fiddle end - load packs - blocks - register - implementation - copy properties - final -> non-final
     @Nullable
     protected ResourceLocation drops;
 
     public BlockBehaviour(BlockBehaviour.Properties settings) {
+        // Fiddle start - load packs - blocks - register - implementation - copy properties
+        this.setProperties(settings);
+    }
+
+    public void setProperties(BlockBehaviour.Properties settings) {
+        // Fiddle end - load packs - blocks - register - implementation - copy properties
         this.hasCollision = settings.hasCollision;
         this.drops = settings.drops;
         this.explosionResistance = settings.explosionResistance;
@@ -422,7 +430,7 @@ public abstract class BlockBehaviour implements FeatureElement {
 
     public static class Properties {
 
-        Function<BlockState, MapColor> mapColor = (iblockdata) -> {
+        public Function<BlockState, MapColor> mapColor = (iblockdata) -> { // Fiddle - load packs - blocks - register - implementation - verify map color function completeness - package-private -> public
             return MapColor.NONE;
         };
         boolean hasCollision = true;
@@ -615,7 +623,13 @@ public abstract class BlockBehaviour implements FeatureElement {
         }
 
         public BlockBehaviour.Properties ignitedByLava() {
-            this.ignitedByLava = true;
+            // Fiddle start - load packs - blocks - register - implementation - copy properties
+            return this.ignitedByLava(true);
+        }
+
+        public BlockBehaviour.Properties ignitedByLava(boolean ignitedByLava) {
+            this.ignitedByLava = ignitedByLava;
+            // Fiddle end - load packs - blocks - register - implementation - copy properties
             return this;
         }
 
@@ -677,7 +691,13 @@ public abstract class BlockBehaviour implements FeatureElement {
         }
 
         public BlockBehaviour.Properties requiresCorrectToolForDrops() {
-            this.requiresCorrectToolForDrops = true;
+            // Fiddle start - load packs - blocks - register - implementation - copy properties
+            return this.requiresCorrectToolForDrops(true);
+        }
+
+        public BlockBehaviour.Properties requiresCorrectToolForDrops(boolean requiresCorrectToolForDrops) {
+            this.requiresCorrectToolForDrops = requiresCorrectToolForDrops;
+            // Fiddle end - load packs - blocks - register - implementation - copy properties
             return this;
         }
 
diff --git a/src/main/java/org/fiddlemc/fiddle/pack/load/fiddlecontent/block/BlockByDefinitionLoader.java b/src/main/java/org/fiddlemc/fiddle/pack/load/fiddlecontent/block/BlockByDefinitionLoader.java
new file mode 100644
index 0000000000000000000000000000000000000000..a792292a32c0134004784ab019c7bad9df990152
--- /dev/null
+++ b/src/main/java/org/fiddlemc/fiddle/pack/load/fiddlecontent/block/BlockByDefinitionLoader.java
@@ -0,0 +1,136 @@
+// Fiddle - load packs - blocks - register - implementation
+
+package org.fiddlemc.fiddle.pack.load.fiddlecontent.block;
+
+import net.minecraft.core.registries.BuiltInRegistries;
+import net.minecraft.world.level.block.Block;
+import net.minecraft.world.level.block.StairBlock;
+import net.minecraft.world.level.block.state.BlockBehaviour;
+import net.minecraft.world.level.block.state.properties.NoteBlockInstrument;
+import net.minecraft.world.level.material.MapColor;
+import org.fiddlemc.fiddle.pack.load.fiddlecontent.blockoritem.BlockOrItemByDefinitionLoader;
+import org.fiddlemc.fiddle.pack.exception.PackException;
+import org.fiddlemc.fiddle.pack.read.fiddlecontent.definition.block.BlockDefinition;
+import org.fiddlemc.fiddle.pack.read.fiddlecontent.definition.block.BlockDefinitionParser;
+import org.fiddlemc.fiddle.pack.read.fiddlecontent.definition.block.BlockPropertiesDefinition;
+import org.fiddlemc.fiddle.pack.read.fiddlecontent.definition.block.mapcolor.ConditionalMapColorDefinition;
+import org.fiddlemc.fiddle.pack.read.fiddlecontent.definition.block.mapcolor.SingleMapColorDefinition;
+import org.fiddlemc.fiddle.pack.read.fiddlecontent.definition.block.parent.BlockDefinitionBase;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.Arrays;
+
+/**
+ * A class to {@linkplain BuiltInRegistries#BLOCK register} {@link BlockDefinition}s as {@link Block}s.
+ */
+public final class BlockByDefinitionLoader
+    extends BlockOrItemByDefinitionLoader<Block, BlockBehaviour.Properties, BlockPropertiesDefinition, BlockDefinition> {
+
+    public static final BlockByDefinitionLoader INSTANCE = new BlockByDefinitionLoader();
+
+    private BlockByDefinitionLoader() {
+        super(BuiltInRegistries.BLOCK, BlockDefinition.TYPE);
+    }
+
+    @Override
+    public BlockBehaviour.Properties createDefaultProperties() {
+        return BlockBehaviour.Properties.of()
+            .mapColor(MapColor.STONE)
+            .instrument(NoteBlockInstrument.BASEDRUM)
+            .strength(1.5F, 6.0F);
+    }
+
+    @Override
+    protected BlockBehaviour.Properties copyPropertiesFromResource(Block block) {
+        return BlockBehaviour.Properties.copy(block);
+    }
+
+    @Override
+    protected BlockBehaviour.Properties buildProperties(BlockDefinition definition) throws PackException {
+        // Start with the pre-initialized properties
+        var properties = super.buildProperties(definition);
+
+        // Copy the map color
+        var mapColor = definition.propertiesDefinition.mapColor;
+        if (mapColor != null) {
+            if (mapColor instanceof SingleMapColorDefinition singleMapColorDefinition) {
+                properties = properties.mapColor(singleMapColorDefinition.mapColor());
+            } else if (mapColor instanceof ConditionalMapColorDefinition conditionalMapColorDefinition) {
+                properties = properties.mapColor(conditionalMapColorDefinition);
+            } else {
+                throw new UnsupportedOperationException(
+                    "Unknown map color definition type: " + mapColor.getClass().getName());
+            }
+        }
+
+        // Copy some more values
+        var explosionResistance = definition.propertiesDefinition.explosionResistance;
+        if (explosionResistance != null) {
+            properties = properties.explosionResistance(explosionResistance);
+        }
+        var destroyTime = definition.propertiesDefinition.destroyTime;
+        if (destroyTime != null) {
+            properties = properties.destroyTime(destroyTime);
+        }
+        var requiresCorrectToolForDrops = definition.propertiesDefinition.requiresCorrectToolForDrops;
+        if (requiresCorrectToolForDrops != null) {
+            properties = properties.requiresCorrectToolForDrops(requiresCorrectToolForDrops);
+        }
+        var friction = definition.propertiesDefinition.friction;
+        if (friction != null) {
+            properties = properties.friction(friction);
+        }
+        var ignitedByLava = definition.propertiesDefinition.ignitedByLava;
+        if (ignitedByLava != null) {
+            properties = properties.ignitedByLava(ignitedByLava);
+        }
+        var instrument = definition.propertiesDefinition.instrument;
+        if (instrument != null) {
+            properties = properties.instrument(instrument);
+        }
+
+        // Return the properties
+        return properties;
+    }
+
+    @Override
+    protected Block buildResourceFromProperties(BlockDefinition definition, @Nullable Block parentBlock, BlockBehaviour.Properties properties) throws PackException {
+        // Build the block
+        Block block;
+        if (definition.parent == BlockDefinitionBase.STAIRS || parentBlock instanceof StairBlock) {
+            // TODO support reading a block state here, instead of only a block
+            if (definition.fullBlockState == null) {
+                throw new PackException("Stairs " + this.uncapitalizedDefinitionName(definition) +
+                    " is missing a " + BlockDefinitionParser.fullBlockStateJsonKey);
+            }
+            if (!BuiltInRegistries.BLOCK.containsKey(definition.fullBlockState)) {
+                throw new PackException(this.capitalizedDefinitionName(definition) +
+                    " has a full block that doesn't exist: " + definition.fullBlockState);
+            }
+            block = new StairBlock(BuiltInRegistries.BLOCK.get(definition.fullBlockState).defaultBlockState(), properties) {};
+        } else {
+            block = new Block(properties);
+        }
+
+        // Verify that the map color function is complete, if necessary
+        if (block.properties.mapColor instanceof ConditionalMapColorDefinition conditionalMapColorDefinition) {
+            for (var state : block.getStateDefinition().getPossibleStates()) {
+                if (Arrays.stream(conditionalMapColorDefinition.clauses())
+                    .noneMatch(clause -> clause.blockStates().matches(state))) {
+                    throw new PackException("The map color for the block definition '" +
+                        definition.untypedResourceLocation + "' does not specify a value for the block state '"
+                        + state + "'");
+                }
+            }
+        }
+
+        // Return the result
+        return block;
+    }
+
+    @Override
+    protected void copyProperties(Block from, Block to) {
+        to.setProperties(from.properties);
+    }
+
+}
diff --git a/src/main/java/org/fiddlemc/fiddle/pack/read/fiddlecontent/definition/block/parent/BlockDefinitionBase.java b/src/main/java/org/fiddlemc/fiddle/pack/read/fiddlecontent/definition/block/parent/BlockDefinitionBase.java
index c66e667ebe1cdc9ceb0d81add588246ccad0302e..2bf1934b8f7386200474b0323ca26b23e1feb47f 100644
--- a/src/main/java/org/fiddlemc/fiddle/pack/read/fiddlecontent/definition/block/parent/BlockDefinitionBase.java
+++ b/src/main/java/org/fiddlemc/fiddle/pack/read/fiddlecontent/definition/block/parent/BlockDefinitionBase.java
@@ -4,23 +4,35 @@ package org.fiddlemc.fiddle.pack.read.fiddlecontent.definition.block.parent;
 
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.world.level.block.Block;
+import net.minecraft.world.level.block.state.BlockBehaviour;
 import org.fiddlemc.fiddle.pack.read.fiddlecontent.definition.block.BlockDefinition;
 import org.fiddlemc.fiddle.pack.read.fiddlecontent.definition.blockoritem.BlockOrItemDefinitionBase;
 import org.fiddlemc.fiddle.pack.read.fiddlecontent.definition.withparent.FiddleContentDefinitionParent;
 
+import java.util.function.Function;
+
 /**
  * A parent for blocks that can be used in a {@link BlockDefinition}
  * instead of a particular block. Most bases correspond to some particular subclass of {@link Block}.
  */
 public final class BlockDefinitionBase
-    extends BlockOrItemDefinitionBase
+    extends BlockOrItemDefinitionBase<BlockBehaviour.Properties> // Fiddle - load packs - blocks - register - implementation
     implements FiddleContentDefinitionParent {
 
     public static final BlockDefinitionBase BLOCK = new BlockDefinitionBase(new ResourceLocation(ResourceLocation.DEFAULT_NAMESPACE, ""));
     public static final BlockDefinitionBase STAIRS = new BlockDefinitionBase(new ResourceLocation(ResourceLocation.DEFAULT_NAMESPACE, "stairs"));
 
+    // Fiddle start - load packs - blocks - register - implementation
+    private BlockDefinitionBase(
+        ResourceLocation untypedResourceLocation,
+        Function<BlockBehaviour.Properties, BlockBehaviour.Properties> propertiesCreator
+    ) {
+        super(BlockDefinition.TYPE, untypedResourceLocation, propertiesCreator);
+    }
+    // Fiddle end - load packs - blocks - register - implementation
+
     private BlockDefinitionBase(ResourceLocation untypedResourceLocation) {
-        this(untypedResourceLocation);
+        this(untypedResourceLocation, Function.identity()); // Fiddle - load packs - blocks - register - implementation
     }
 
 }
