From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Sat, 6 May 2023 11:54:19 +0200
Subject: [PATCH] Read packs - Scan for and open pack folders and archives

License: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)
Fiddle - https://fiddlemc.org

diff --git a/src/main/java/org/fiddlemc/fiddle/pack/reader/PackReader.java b/src/main/java/org/fiddlemc/fiddle/pack/reader/PackReader.java
index df7251d283b526842927bdbf03e9730fa3a3aa3e..36284f04b0afa54f726dd16c5798d5c1c781f5ec 100644
--- a/src/main/java/org/fiddlemc/fiddle/pack/reader/PackReader.java
+++ b/src/main/java/org/fiddlemc/fiddle/pack/reader/PackReader.java
@@ -6,28 +6,93 @@ import com.mojang.logging.LogUtils;
 import joptsimple.OptionSet;
 import org.slf4j.Logger;
 
+import java.io.File;
+import java.io.IOException;
+import java.util.*;
+
 /**
  * A singleton providing the {@link #scanForAndOpenPacks} and {@link #closeOpenedPacks} methods.
  */
 public final class PackReader {
 
+    public static final String fiddlePacksFolderName = "fiddle_packs";
+
     public static final Logger LOGGER = LogUtils.getClassLogger();
 
     private PackReader() {
         throw new RuntimeException();
     }
 
+    private static final List<PackBeingRead> packsBeingRead = new ArrayList<>();
+
+    /**
+     * @return The packs being read.
+     */
+    public static List<PackBeingRead> getPacksBeingRead() {
+        return Collections.unmodifiableList(packsBeingRead);
+    }
+
     /**
      * Scans for packs in the appropriate places, and performs preparatory reading of their contents,
      * including a bit of making sure that they are valid in ways that is possible to tell at this stage,
      * so that their contents may be used at the right moment later, such as during block registry.
+     * <br>
+     * It adds initial {@link PackBeingRead} instances to {@link #packsBeingRead}.
      */
-    public static void scanForAndOpenPacks(OptionSet optionSet) {}
+    public static void scanForAndOpenPacks(OptionSet optionSet) {
+        for (var checkingPlugins : new boolean[] {false, true}) {
+            var folder = checkingPlugins ? (File) optionSet.valueOf("plugins") : new File(fiddlePacksFolderName);
+            if (folder.exists() && folder.isDirectory()) {
+                for (var file : Objects.requireNonNull(folder.listFiles())) {
+                    var lowerCaseName = file.getName().toLowerCase(Locale.ROOT);
+                    // Accept .jar files in the packs folder too (to use them as packs without the plugin code, which is useful if the code has broken after an update)
+                    if (lowerCaseName.endsWith(".jar") || (!checkingPlugins && (lowerCaseName.endsWith(".zip") || lowerCaseName.endsWith(".rar") || file.isDirectory()))) {
+                        scanForAndOpenPack(file);
+                    }
+                }
+            } else if (!checkingPlugins) {
+                //noinspection ResultOfMethodCallIgnored
+                folder.mkdir();
+            }
+        }
+    }
 
     /**
      * Closes the opened packs, i.e. closes the corresponding open file handles and data
      * any content in memory that is no longer needed.
      */
-    public static void closeOpenedPacks() {}
+    public static void closeOpenedPacks() {
+
+        // Close the opened packs
+        packsBeingRead.forEach(pack -> {
+            try {
+                pack.close();
+            } catch (IOException e) {
+                throw new RuntimeException("Exception while closing a pack that was being read", e);
+            }
+        });
+
+        // Deallocate the opened packs
+        packsBeingRead.clear();
+
+    }
+
+    /**
+     * Scans the given file, which may or may not be a pack.
+     * It will be opened and added to {@link #packsBeingRead} as a {@link PackBeingRead} if it appears to be a pack.
+     */
+    private static void scanForAndOpenPack(File packFile) {
+        try {
+            PackBeingRead pack;
+            if (packFile.isDirectory()) {
+                pack = new DirectoryPackBeingRead(packFile);
+            } else {
+                pack = new ArchivePackBeingRead(packFile);
+            }
+            // TODO Scan the meta file
+        } catch (Exception e) {
+            LOGGER.warn("An exception occurred while checking if a file or folder '" + packFile.getPath() + "' is a Fiddle pack. The file or folder will not be loaded.", e);
+        }
+    }
 
 }
