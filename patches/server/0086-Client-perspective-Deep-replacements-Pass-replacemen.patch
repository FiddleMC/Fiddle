From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Sat, 29 Jul 2023 12:54:28 +0200
Subject: [PATCH] Client perspective - Deep replacements - Pass replacement
 scope

License: Fiddle Public License Agreement 1.0 (included in license/FPL-1.0.txt)
Fiddle - https://fiddlemc.org

diff --git a/src/main/java/net/minecraft/nbt/CompoundTag.java b/src/main/java/net/minecraft/nbt/CompoundTag.java
index 7e94ebe06fc62293e665d6db19e42d947e7eb30f..ffd0c14e0b0af103c6bd9368cd7f6ce5fcf9ad55 100644
--- a/src/main/java/net/minecraft/nbt/CompoundTag.java
+++ b/src/main/java/net/minecraft/nbt/CompoundTag.java
@@ -135,9 +135,16 @@ public class CompoundTag implements Tag {
 
     @Override
     public void write(DataOutput output) throws IOException {
+        // Fiddle start - client perspective - deep replacements - pass scope - to CompoundTag#write
+        throw new UnsupportedOperationException(this.getClass().getSimpleName() + ".write(...) without a replacement scope is not supported");
+    }
+
+    @Override
+    public void write(DataOutput output, @org.jetbrains.annotations.Nullable org.fiddlemc.fiddle.packet.deepreplacement.ClientPerspectiveAndSettingsSupplier clientPerspectiveAndSettings, @org.jetbrains.annotations.NotNull org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacementScope replacementScope) throws IOException {
+        // Fiddle end - client perspective - deep replacements - pass scope - to CompoundTag#write
         for(String string : this.tags.keySet()) {
             Tag tag = this.tags.get(string);
-            writeNamedTag(string, tag, output);
+            writeNamedTag(string, tag, output, clientPerspectiveAndSettings, replacementScope); // Fiddle - client perspective - deep replacements - pass scope - to CompoundTag#writeNamedTag
         }
 
         output.writeByte(0);
@@ -491,11 +498,11 @@ public class CompoundTag implements Tag {
         return this.tags.hashCode();
     }
 
-    private static void writeNamedTag(String key, Tag element, DataOutput output) throws IOException {
+    private static void writeNamedTag(String key, Tag element, DataOutput output, @org.jetbrains.annotations.Nullable org.fiddlemc.fiddle.packet.deepreplacement.ClientPerspectiveAndSettingsSupplier clientPerspectiveAndSettings, @org.jetbrains.annotations.NotNull org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacementScope replacementScope) throws IOException { // Fiddle - client perspective - deep replacements - pass scope - to CompoundTag#writeNamedTag
         output.writeByte(element.getId());
         if (element.getId() != 0) {
             output.writeUTF(key);
-            element.write(output);
+            element.write(output, clientPerspectiveAndSettings, replacementScope); // Fiddle - client perspective - deep replacements - pass scope - to Tag#write
         }
     }
 
diff --git a/src/main/java/net/minecraft/nbt/ListTag.java b/src/main/java/net/minecraft/nbt/ListTag.java
index b74b77ec2fd45c7a44e4f2696c4f57075c3d4080..eb14fa01dfc089e227dc8638a81a0d586419ff43 100644
--- a/src/main/java/net/minecraft/nbt/ListTag.java
+++ b/src/main/java/net/minecraft/nbt/ListTag.java
@@ -117,6 +117,13 @@ public class ListTag extends CollectionTag<Tag> {
 
     @Override
     public void write(DataOutput output) throws IOException {
+        // Fiddle start - client perspective - deep replacements - pass scope - to ListTag#write
+        throw new UnsupportedOperationException(this.getClass().getSimpleName() + ".write(...) without a replacement scope is not supported");
+    }
+
+    @Override
+    public void write(DataOutput output, @org.jetbrains.annotations.Nullable org.fiddlemc.fiddle.packet.deepreplacement.ClientPerspectiveAndSettingsSupplier clientPerspectiveAndSettings, @org.jetbrains.annotations.NotNull org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacementScope replacementScope) throws IOException {
+        // Fiddle end - client perspective - deep replacements - pass scope - to ListTag#write
         if (this.list.isEmpty()) {
             this.type = 0;
         } else {
@@ -127,7 +134,7 @@ public class ListTag extends CollectionTag<Tag> {
         output.writeInt(this.list.size());
 
         for(Tag tag : this.list) {
-            tag.write(output);
+            tag.write(output, clientPerspectiveAndSettings, replacementScope); // Fiddle end - client perspective - deep replacements - pass scope - to Tag#write
         }
 
     }
diff --git a/src/main/java/net/minecraft/nbt/NbtIo.java b/src/main/java/net/minecraft/nbt/NbtIo.java
index 8101b9f29824138e549555fa9aff3913e49f1e50..12aaa8de3f5cb3cac5c9a9d9e47f6a4c93045913 100644
--- a/src/main/java/net/minecraft/nbt/NbtIo.java
+++ b/src/main/java/net/minecraft/nbt/NbtIo.java
@@ -245,7 +245,14 @@ public class NbtIo {
     }
 
     public static void write(CompoundTag nbt, DataOutput output) throws IOException {
-        NbtIo.writeUnnamedTag(nbt, output);
+        // Fiddle start - client perspective - deep replacements - pass scope - to NbtIo#write
+        // The only occurrence of NbtIo#write that is network-related is in FriendlyByteBuf#writeNbt, so by default we assume that calls are not network-related and therefore do not need replacements
+        write(nbt, output, null, org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacementScope.NOTHING);
+    }
+
+    public static void write(CompoundTag nbt, DataOutput output, @org.jetbrains.annotations.Nullable org.fiddlemc.fiddle.packet.deepreplacement.ClientPerspectiveAndSettingsSupplier clientPerspectiveAndSettings, @org.jetbrains.annotations.NotNull org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacementScope replacementScope) throws IOException {
+        // Fiddle end - client perspective - deep replacements - pass scope - to NbtIo#write
+        NbtIo.writeUnnamedTag(nbt, output, clientPerspectiveAndSettings, replacementScope); // Fiddle - client perspective - deep replacements - pass scope - to NbtIo#writeUnnamedTag
     }
 
     public static void parse(DataInput input, StreamTagVisitor scanner) throws IOException {
@@ -273,11 +280,11 @@ public class NbtIo {
         }
     }
 
-    public static void writeUnnamedTag(Tag nbt, DataOutput output) throws IOException {
+    public static void writeUnnamedTag(Tag nbt, DataOutput output, @org.jetbrains.annotations.Nullable org.fiddlemc.fiddle.packet.deepreplacement.ClientPerspectiveAndSettingsSupplier clientPerspectiveAndSettings, @org.jetbrains.annotations.NotNull org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacementScope replacementScope) throws IOException { // Fiddle - client perspective - deep replacements - pass scope - to NbtIo#writeUnnamedTag
         output.writeByte(nbt.getId());
         if (nbt.getId() != 0) {
             output.writeUTF("");
-            nbt.write(output);
+            nbt.write(output, clientPerspectiveAndSettings, replacementScope); // Fiddle - client perspective - deep replacements - pass scope - to Tag#write
         }
     }
 
diff --git a/src/main/java/net/minecraft/nbt/StringTag.java b/src/main/java/net/minecraft/nbt/StringTag.java
index afe6bdb5995cfb9c9e76effc4c159163f9b6e367..9898882ad7bb49f999ef410e7c5759e8c6623dcd 100644
--- a/src/main/java/net/minecraft/nbt/StringTag.java
+++ b/src/main/java/net/minecraft/nbt/StringTag.java
@@ -65,6 +65,13 @@ public class StringTag implements Tag {
 
     @Override
     public void write(DataOutput output) throws IOException {
+        // Fiddle start - client perspective - deep replacements - pass scope - to StringTag#write
+        throw new UnsupportedOperationException(this.getClass().getSimpleName() + ".write(...) without a replacement scope is not supported");
+    }
+
+    @Override
+    public void write(DataOutput output, @org.jetbrains.annotations.Nullable org.fiddlemc.fiddle.packet.deepreplacement.ClientPerspectiveAndSettingsSupplier clientPerspectiveAndSettings, @org.jetbrains.annotations.NotNull org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacementScope replacementScope) throws IOException {
+        // Fiddle end - client perspective - deep replacements - pass scope - to StringTag#write
         try {
             output.writeUTF(this.data);
         } catch (UTFDataFormatException var3) {
diff --git a/src/main/java/net/minecraft/nbt/Tag.java b/src/main/java/net/minecraft/nbt/Tag.java
index 0c3fb39dfff42cc322b82c6da885d39f866aee41..a0616621e48542bac36aa42d67953f02334f874c 100644
--- a/src/main/java/net/minecraft/nbt/Tag.java
+++ b/src/main/java/net/minecraft/nbt/Tag.java
@@ -26,6 +26,13 @@ public interface Tag {
 
     void write(DataOutput output) throws IOException;
 
+    // Fiddle start - client perspective - deep replacements - pass scope - to Tag#write
+    default void write(DataOutput output, @org.jetbrains.annotations.Nullable org.fiddlemc.fiddle.packet.deepreplacement.ClientPerspectiveAndSettingsSupplier clientPerspectiveAndSettings, @org.jetbrains.annotations.NotNull org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacementScope replacementScope) throws IOException {
+        // By default, this simply calls write(DataOutput), which will be the implementation for most non-complex tags
+        this.write(output);
+    }
+    // Fiddle end - client perspective - deep replacements - pass scope - to Tag#write
+
     @Override
     String toString();
 
diff --git a/src/main/java/net/minecraft/network/FriendlyByteBuf.java b/src/main/java/net/minecraft/network/FriendlyByteBuf.java
index 28460c99ae8610f3697105e1fe02aa37829c9cf7..b04c6ede6d76f3ea718ef8165e173bf42367f0f6 100644
--- a/src/main/java/net/minecraft/network/FriendlyByteBuf.java
+++ b/src/main/java/net/minecraft/network/FriendlyByteBuf.java
@@ -80,6 +80,8 @@ import net.minecraft.world.level.Level;
 import net.minecraft.world.phys.BlockHitResult;
 import net.minecraft.world.phys.Vec3;
 import org.fiddlemc.fiddle.packet.deepreplacement.ClientPerspectiveAndSettingsSupplier;
+import org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacementScope;
+import org.fiddlemc.fiddle.packet.item.ItemStackInPacketContext;
 import org.jetbrains.annotations.NotNull;
 import org.joml.Quaternionf;
 import org.joml.Vector3f;
@@ -579,18 +581,51 @@ public class FriendlyByteBuf extends ByteBuf {
 
     // Paper start
     public FriendlyByteBuf writeComponent(final net.kyori.adventure.text.Component component) {
-        return this.writeUtf(PaperAdventure.asJsonString(component, this.adventure$locale), 262144);
+        // Fiddle start - client perspective - deep replacements - pass scope - to FriendlyByteBuf#writeComponent(net.kyori.adventure.text.Component)
+        // By default, we assume all replacements should be made
+        return this.writeComponent(component, DeepReplacementScope.EVERYTHING);
+    }
+
+    public FriendlyByteBuf writeComponent(final net.kyori.adventure.text.Component component, @NotNull DeepReplacementScope replacementScope) {
+        return this.writeComponent(component, this.getClientPerspectiveAndSettingsSupplierUnlessScopeIsNothing(replacementScope), replacementScope);
+    }
+
+    public FriendlyByteBuf writeComponent(final net.kyori.adventure.text.Component component, @NotNull ClientPerspectiveAndSettingsSupplier clientPerspectiveAndSettings, @NotNull DeepReplacementScope replacementScope) {
+        return this.writeUtf(PaperAdventure.asJsonString(component, this.adventure$locale), 262144, true, false, clientPerspectiveAndSettings, replacementScope);
+        // Fiddle end - client perspective - deep replacements - pass scope - to FriendlyByteBuf#writeComponent(net.kyori.adventure.text.Component)
     }
 
     @Deprecated
     public FriendlyByteBuf writeComponent(final net.md_5.bungee.api.chat.BaseComponent[] component) {
-        return this.writeUtf(net.md_5.bungee.chat.ComponentSerializer.toString(component), 262144);
+        // Fiddle start - client perspective - deep replacements - pass scope - to FriendlyByteBuf#writeComponent(net.md_5.bungee.api.chat.BaseComponent[])
+        // By default, we assume all replacements should be made
+        return this.writeComponent(component, DeepReplacementScope.EVERYTHING);
+    }
+
+    public FriendlyByteBuf writeComponent(final net.md_5.bungee.api.chat.BaseComponent[] component, @NotNull DeepReplacementScope replacementScope) {
+        return this.writeComponent(component, this.getClientPerspectiveAndSettingsSupplierUnlessScopeIsNothing(replacementScope), replacementScope);
+    }
+
+    public FriendlyByteBuf writeComponent(final net.md_5.bungee.api.chat.BaseComponent[] component, @NotNull ClientPerspectiveAndSettingsSupplier clientPerspectiveAndSettings, @NotNull DeepReplacementScope replacementScope) {
+        return this.writeUtf(net.md_5.bungee.chat.ComponentSerializer.toString(component), 262144, true, false, clientPerspectiveAndSettings, replacementScope);
+        // Fiddle end - client perspective - deep replacements - pass scope - to FriendlyByteBuf#writeComponent(net.md_5.bungee.api.chat.BaseComponent[])
     }
     // Paper end
 
     public FriendlyByteBuf writeComponent(Component text) {
+        // Fiddle start - client perspective - deep replacements - pass scope - to FriendlyByteBuf#writeComponent(net.minecraft.network.chat.Component)
+        // By default, we assume all replacements should be made
+        return this.writeComponent(text, DeepReplacementScope.EVERYTHING);
+    }
+
+    public FriendlyByteBuf writeComponent(Component text, @NotNull DeepReplacementScope replacementScope) {
+        return this.writeComponent(text, this.getClientPerspectiveAndSettingsSupplierUnlessScopeIsNothing(replacementScope), replacementScope);
+    }
+
+    public FriendlyByteBuf writeComponent(Component text, @NotNull ClientPerspectiveAndSettingsSupplier clientPerspectiveAndSettings, @NotNull DeepReplacementScope replacementScope) {
+        // Fiddle end - client perspective - deep replacements - pass scope - to FriendlyByteBuf#writeComponent(net.minecraft.network.chat.Component)
         //return this.a(IChatBaseComponent.ChatSerializer.a(ichatbasecomponent), 262144); // Paper - comment
-        return this.writeUtf(PaperAdventure.asJsonString(text, this.adventure$locale), 262144); // Paper
+        return this.writeUtf(PaperAdventure.asJsonString(text, this.adventure$locale), 262144, true, false, clientPerspectiveAndSettings, replacementScope); // Paper // Fiddle - client perspective - deep replacements - pass scope - to FriendlyByteBuf#writeComponent(net.minecraft.network.chat.Component)
     }
 
     public <T extends Enum<T>> T readEnum(Class<T> enumClass) {
@@ -666,11 +701,22 @@ public class FriendlyByteBuf extends ByteBuf {
     }
 
     public FriendlyByteBuf writeNbt(@Nullable CompoundTag compound) {
+        // Fiddle start - client perspective - deep replacements - pass scope - to FriendlyByteBuf#writeNbt
+        // By default, we assume all replacements should be made
+        return this.writeNbt(compound, DeepReplacementScope.EVERYTHING);
+    }
+
+    public FriendlyByteBuf writeNbt(@Nullable CompoundTag compound, @NotNull DeepReplacementScope replacementScope) {
+        return this.writeNbt(compound, this.getClientPerspectiveAndSettingsSupplierUnlessScopeIsNothing(replacementScope), replacementScope);
+    }
+
+    public FriendlyByteBuf writeNbt(@Nullable CompoundTag compound, @NotNull ClientPerspectiveAndSettingsSupplier clientPerspectiveAndSettings, @NotNull DeepReplacementScope replacementScope) {
+        // Fiddle end - client perspective - deep replacements - pass scope - to FriendlyByteBuf#writeNbt
         if (compound == null) {
             this.writeByte(0);
         } else {
             try {
-                NbtIo.write(compound, (DataOutput) (new ByteBufOutputStream(this)));
+                NbtIo.write(compound, (DataOutput) (new ByteBufOutputStream(this)), clientPerspectiveAndSettings, replacementScope);
             } catch (Exception ioexception) { // CraftBukkit - IOException -> Exception
                 throw new EncoderException(ioexception);
             }
@@ -708,6 +754,29 @@ public class FriendlyByteBuf extends ByteBuf {
     }
 
     public FriendlyByteBuf writeItem(ItemStack stack) {
+        // Fiddle start - client perspective - deep replacements - pass scope - to FriendlyByteBuf#writeItem
+        return this.writeItem(stack, ItemStackInPacketContext.DEFAULT);
+    }
+
+    public FriendlyByteBuf writeItem(ItemStack stack, @NotNull ItemStackInPacketContext itemStackInPackContext) {
+        // By default, we assume all replacements should be made
+        return this.writeItem(stack, itemStackInPackContext, DeepReplacementScope.EVERYTHING);
+    }
+
+    public FriendlyByteBuf writeItem(ItemStack stack, @NotNull DeepReplacementScope replacementScope) {
+        return this.writeItem(stack, ItemStackInPacketContext.DEFAULT, replacementScope);
+    }
+
+    public FriendlyByteBuf writeItem(ItemStack stack, @NotNull ItemStackInPacketContext itemStackInPackContext, @NotNull DeepReplacementScope replacementScope) {
+        return this.writeItem(stack, itemStackInPackContext, this.getClientPerspectiveAndSettingsSupplierUnlessScopeIsNothing(replacementScope), replacementScope);
+    }
+
+    public FriendlyByteBuf writeItem(ItemStack stack, @NotNull ClientPerspectiveAndSettingsSupplier clientPerspectiveAndSettings, @NotNull DeepReplacementScope replacementScope) {
+        return this.writeItem(stack, ItemStackInPacketContext.DEFAULT, clientPerspectiveAndSettings, replacementScope);
+    }
+
+    public FriendlyByteBuf writeItem(ItemStack stack, @NotNull ItemStackInPacketContext itemStackInPackContext, @NotNull ClientPerspectiveAndSettingsSupplier clientPerspectiveAndSettings, @NotNull DeepReplacementScope replacementScope) {
+        // Fiddle end - client perspective - deep replacements - pass scope - to FriendlyByteBuf#writeItem
         if (stack.isEmpty() || stack.getItem() == null) { // CraftBukkit - NPE fix itemstack.getItem()
             this.writeBoolean(false);
         } else {
@@ -726,7 +795,7 @@ public class FriendlyByteBuf extends ByteBuf {
                 nbttagcompound = stack.getTag();
             }
 
-            this.writeNbt(nbttagcompound);
+            this.writeNbt(nbttagcompound, clientPerspectiveAndSettings, replacementScope); // Fiddle - client perspective - deep replacements - pass scope - to FriendlyByteBuf#writeNbt
         }
 
         return this;
@@ -781,6 +850,25 @@ public class FriendlyByteBuf extends ByteBuf {
     }
 
     public FriendlyByteBuf writeUtf(String string, int maxLength) {
+        // Fiddle start - client perspective - deep replacements - pass scope - to FriendlyByteBuf#writeUtf
+        // By default, we assume all replacements should be made
+        return this.writeUtf(string, true, true, DeepReplacementScope.EVERYTHING);
+    }
+
+    public FriendlyByteBuf writeUtf(String string, boolean canBeRawJsonText, boolean canBeSNBT, @NotNull DeepReplacementScope replacementScope) {
+        return this.writeUtf(string, 32767, canBeRawJsonText, canBeSNBT, this.getClientPerspectiveAndSettingsSupplierUnlessScopeIsNothing(replacementScope), replacementScope);
+    }
+
+    public FriendlyByteBuf writeUtf(String string, boolean canBeRawJsonText, boolean canBeSNBT, @NotNull ClientPerspectiveAndSettingsSupplier clientPerspectiveAndSettings, @NotNull DeepReplacementScope replacementScope) {
+        return this.writeUtf(string, 32767, canBeRawJsonText, canBeSNBT, clientPerspectiveAndSettings, replacementScope);
+    }
+
+    public FriendlyByteBuf writeUtf(String string, int maxLength, boolean canBeRawJsonText, boolean canBeSNBT, @NotNull DeepReplacementScope replacementScope) {
+        return this.writeUtf(string, maxLength, canBeRawJsonText, canBeSNBT, this.getClientPerspectiveAndSettingsSupplierUnlessScopeIsNothing(replacementScope), replacementScope);
+    }
+
+    public FriendlyByteBuf writeUtf(String string, int maxLength, boolean canBeRawJsonText, boolean canBeSNBT, @NotNull ClientPerspectiveAndSettingsSupplier clientPerspectiveAndSettings, @NotNull DeepReplacementScope replacementScope) {
+        // Fiddle end - client perspective - deep replacements - pass scope - to FriendlyByteBuf#writeUtf
         if (string.length() > maxLength) {
             int j = string.length();
 
@@ -808,7 +896,7 @@ public class FriendlyByteBuf extends ByteBuf {
     }
 
     public FriendlyByteBuf writeResourceLocation(ResourceLocation id) {
-        this.writeUtf(id.toString());
+        this.writeUtf(id.toString(), false, false, DeepReplacementScope.NOTHING); // Fiddle - client perspective - deep replacements - pass scope - to FriendlyByteBuf#writeUtf - this never contains replaceables
         return this;
     }
 
@@ -914,7 +1002,7 @@ public class FriendlyByteBuf extends ByteBuf {
 
     public void writeGameProfile(GameProfile gameProfile) {
         this.writeUUID(gameProfile.getId());
-        this.writeUtf(gameProfile.getName());
+        this.writeUtf(gameProfile.getName(), false, false, DeepReplacementScope.NOTHING); // Fiddle - client perspective - deep replacements - pass scope - to FriendlyByteBuf#writeUtf - this never contains replaceables
         this.writeGameProfileProperties(gameProfile.getProperties());
     }
 
@@ -947,11 +1035,13 @@ public class FriendlyByteBuf extends ByteBuf {
     }
 
     public void writeProperty(Property property) {
-        this.writeUtf(property.getName());
-        this.writeUtf(property.getValue());
+        // Fiddle start - client perspective - deep replacements - pass scope - to FriendlyByteBuf#writeUtf - this never contains replaceables
+        this.writeUtf(property.getName(), false, false, DeepReplacementScope.NOTHING);
+        this.writeUtf(property.getValue(), false, false, DeepReplacementScope.NOTHING);
+        // Fiddle end - client perspective - deep replacements - pass scope - to FriendlyByteBuf#writeUtf - this never contains replaceables
         if (property.hasSignature()) {
             this.writeBoolean(true);
-            this.writeUtf(property.getSignature());
+            this.writeUtf(property.getSignature(), false, false, DeepReplacementScope.NOTHING); // Fiddle - client perspective - deep replacements - pass scope - to FriendlyByteBuf#writeUtf - this never contains replaceables
         } else {
             this.writeBoolean(false);
         }
@@ -1772,4 +1862,15 @@ public class FriendlyByteBuf extends ByteBuf {
     }
     // Fiddle end - client perspective - deep replacements - perspective and settings supplier - cache in FriendlyByteBuf
 
+    // Fiddle start - client perspective - deep replacements - pass scope - to FriendlyByteBuf
+    /**
+     * The result of {@link #getClientPerspectiveAndSettingsSupplier()},
+     * unless the given {@code replacementScope} is {@link DeepReplacementScope#NOTHING}, in which case
+     * {@link ClientPerspectiveAndSettingsSupplier#ALWAYS_THROWS_EXCEPTION} is returned.
+     */
+    public @NotNull ClientPerspectiveAndSettingsSupplier getClientPerspectiveAndSettingsSupplierUnlessScopeIsNothing(@NotNull DeepReplacementScope replacementScope) {
+        return replacementScope == DeepReplacementScope.NOTHING ? ClientPerspectiveAndSettingsSupplier.ALWAYS_THROWS_EXCEPTION : this.getClientPerspectiveAndSettingsSupplier();
+    }
+    // Fiddle end - client perspective - deep replacements - pass scope - to FriendlyByteBuf
+
 }
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundCommandSuggestionsPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundCommandSuggestionsPacket.java
index b8c008a311edebe90256bd8482a2402d12ffd0db..e293300bde8cb3afc1060a4b96ae7f1539996f26 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundCommandSuggestionsPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundCommandSuggestionsPacket.java
@@ -37,7 +37,7 @@ public class ClientboundCommandSuggestionsPacket implements Packet<ClientGamePac
         buf.writeVarInt(this.suggestions.getRange().getStart());
         buf.writeVarInt(this.suggestions.getRange().getLength());
         buf.writeCollection(this.suggestions.getList(), (buf2, suggestion) -> {
-            buf2.writeUtf(suggestion.getText());
+            buf2.writeUtf(suggestion.getText(), false, false, org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacementScope.NOTHING); // Fiddle - client perspective - deep replacements - pass scope - to FriendlyByteBuf#writeUtf - this never contains replaceables
             buf2.writeNullable(suggestion.getTooltip(), (buf3, tooltip) -> {
                 buf3.writeComponent(ComponentUtils.fromMessage(tooltip));
             });
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelChunkPacketData.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelChunkPacketData.java
index 39b879f21f958dbd91ab0f74e5d4f3c74928fc33..f1baab95493d3e5c28b17e8a07ed5e5c87840ae6 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelChunkPacketData.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelChunkPacketData.java
@@ -89,7 +89,7 @@ public class ClientboundLevelChunkPacketData {
     }
 
     public void write(FriendlyByteBuf buf) {
-        buf.writeNbt(this.heightmaps);
+        buf.writeNbt(this.heightmaps, org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacementScope.NOTHING); // Fiddle - client perspective - deep replacements - pass scope - to FriendlyByteBuf#writeNbt - this never contains replaceables
         buf.writeVarInt(this.buffer.length);
         buf.writeBytes(this.buffer);
         buf.writeCollection(this.blockEntitiesData, (buf2, entry) -> {
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetPlayerTeamPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetPlayerTeamPacket.java
index 4ebe22ac20f1a98694cc3bec570ef5bbf06f00aa..fac77b5912b652af52ae042459d7c1d6f5ca5fb5 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetPlayerTeamPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetPlayerTeamPacket.java
@@ -76,7 +76,7 @@ public class ClientboundSetPlayerTeamPacket implements Packet<ClientGamePacketLi
         }
 
         if (shouldHavePlayerList(this.method)) {
-            buf.writeCollection(this.players, FriendlyByteBuf::writeUtf);
+            buf.writeCollection(this.players, (sameBuf, player) -> sameBuf.writeUtf(player, false, false, org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacementScope.NOTHING)); // Fiddle - client perspective - deep replacements - pass scope - to FriendlyByteBuf#writeUtf - this never contains replaceables
         }
 
     }
@@ -198,8 +198,10 @@ public class ClientboundSetPlayerTeamPacket implements Packet<ClientGamePacketLi
         public void write(FriendlyByteBuf buf) {
             buf.writeComponent(this.displayName);
             buf.writeByte(this.options);
-            buf.writeUtf(this.nametagVisibility);
-            buf.writeUtf(!io.papermc.paper.configuration.GlobalConfiguration.get().collisions.enablePlayerCollisions ? "never" : this.collisionRule); // Paper
+            // Fiddle start - client perspective - deep replacements - pass scope - to FriendlyByteBuf#writeUtf - this never contains replaceables
+            buf.writeUtf(this.nametagVisibility, false, false, org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacementScope.NOTHING);
+            buf.writeUtf(!io.papermc.paper.configuration.GlobalConfiguration.get().collisions.enablePlayerCollisions ? "never" : this.collisionRule, false, false, org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacementScope.NOTHING); // Paper
+            // Fiddle end - client perspective - deep replacements - pass scope - to FriendlyByteBuf#writeUtf - this never contains replaceables
             buf.writeEnum(this.color);
             buf.writeComponent(this.playerPrefix);
             buf.writeComponent(this.playerSuffix);
diff --git a/src/main/java/net/minecraft/world/item/crafting/ShapedRecipe.java b/src/main/java/net/minecraft/world/item/crafting/ShapedRecipe.java
index 9c1285e31d947f92e0b00149e342e793898e0d7c..b485f87778a93de3a993259b06d2e5962a537441 100644
--- a/src/main/java/net/minecraft/world/item/crafting/ShapedRecipe.java
+++ b/src/main/java/net/minecraft/world/item/crafting/ShapedRecipe.java
@@ -422,7 +422,7 @@ public class ShapedRecipe implements CraftingRecipe {
         public void toNetwork(FriendlyByteBuf buf, ShapedRecipe recipe) {
             buf.writeVarInt(recipe.width);
             buf.writeVarInt(recipe.height);
-            buf.writeUtf(recipe.group);
+            buf.writeUtf(recipe.group, false, false, org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacementScope.NOTHING); // Fiddle - client perspective - deep replacements - pass scope - to FriendlyByteBuf#writeUtf - this never contains replaceables
             buf.writeEnum(recipe.category);
             Iterator iterator = recipe.recipeItems.iterator();
 
