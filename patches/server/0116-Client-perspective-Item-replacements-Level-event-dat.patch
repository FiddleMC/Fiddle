From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Thu, 4 Jan 2024 20:22:02 +0100
Subject: [PATCH] Client perspective - Item replacements - Level event data -
 Data can be Item

Allows the data of level events (`ClientboundLevelEventPacket.data`) to be an `Item` instance,
and provides the implementation of turning it into an integer value for all event types (`ClientboundLevelEventPacket.type`) that can possibly come with an `Item` as data.

License: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)
Fiddle - https://fiddlemc.org

diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelEventPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelEventPacket.java
index a92d7afceec299e2aefccfa558a995b233ad89cd..563ac780f7de798095297ef4b729412e3105f983 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelEventPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelEventPacket.java
@@ -52,6 +52,15 @@ public class ClientboundLevelEventPacket extends org.fiddlemc.fiddle.packet.Clon
                 }
             }
             // Fiddle end - client perspective - block state visualization - level event data - data can be BlockState
+            // Fiddle start - client perspective - item replacements - level event data - data can be Item
+        } else if (this.data instanceof net.minecraft.world.item.Item item) {
+            var itemToSend = org.fiddlemc.fiddle.packet.item.ItemInPacketReplacer.replace(item, this.getItemInPacketContextByType());
+            if (itemToSend != null) {
+                if (org.fiddlemc.fiddle.packet.ClientPerspective.getSinglePacketItemId(itemToSend) != -1) {
+                    return true;
+                }
+            }
+            // Fiddle end - client perspective - item replacements - level event data - data can be Item
         }
         return false;
     }
@@ -123,6 +132,23 @@ public class ClientboundLevelEventPacket extends org.fiddlemc.fiddle.packet.Clon
             var clientPerspective = this.getExplicitTargetClientPerspective();
             return clientPerspective.getPacketBlockStateId(stateToSend);
             // Fiddle end - client perspective - block state visualization - level event data - data can be BlockState
+            // Fiddle start - client perspective - item replacements - level event data - data can be Item
+        } else if (this.data instanceof net.minecraft.world.item.Item item) {
+            // Replace the item
+            net.minecraft.world.item.Item itemToSend;
+            itemToSend = org.fiddlemc.fiddle.packet.item.ItemInPacketReplacer.replace(item, this.getItemInPacketContextByType());
+            if (itemToSend == null) {
+                var clientPerspective = this.getExplicitTargetClientPerspective();
+                itemToSend = org.fiddlemc.fiddle.packet.item.ItemInPacketReplacer.replace(item, clientPerspective, this.getItemInPacketContextByType());
+            }
+            // Turn the item to send into an id that the client can interpret
+            int singleValue = org.fiddlemc.fiddle.packet.ClientPerspective.getSinglePacketItemId(itemToSend);
+            if (singleValue != -1) {
+                return singleValue;
+            }
+            var clientPerspective = this.getExplicitTargetClientPerspective();
+            return clientPerspective.getPacketItemId(itemToSend);
+            // Fiddle end - client perspective - item replacements - level event data - data can be Item
         } else {
             throw new IllegalStateException("A level event packet has an invalid data type: " + this.data.getClass().getName() + " (" + this.data + ")");
         }
@@ -144,5 +170,11 @@ public class ClientboundLevelEventPacket extends org.fiddlemc.fiddle.packet.Clon
     }
     // Fiddle end - client perspective - block state visualization - level event data - data can be BlockState
 
+    // Fiddle start - client perspective - item replacements - level event data - data can be Item
+    private org.fiddlemc.fiddle.packet.item.ItemInPacketContext getItemInPacketContextByType() {
+        throw new IllegalStateException("Tried to convert level event data from Item with an unsupported type: " + this.type);
+    }
+    // Fiddle end - client perspective - item replacements - level event data - data can be Item
+
 }
 
