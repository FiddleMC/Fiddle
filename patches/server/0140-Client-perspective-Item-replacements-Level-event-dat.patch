From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Sat, 10 Feb 2024 13:56:20 +0100
Subject: [PATCH] Client perspective - Item replacements - Level event data -
 Data can be Item or ItemStack

Allows the data of level events (`ClientboundLevelEventPacket.data`) to be an `Item` or `ItemStack` instance,
and provides the implementation of turning it into an integer value for all event types (`ClientboundLevelEventPacket.type`) that can possibly come with an `Item` as data.

License: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)
Fiddle - https://fiddlemc.org

diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelEventPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelEventPacket.java
index e447801333cf4ad744e2b4e22fa9404f7296aee2..eb32b2a6ef814c354dc193a1b6c017f6faf1a144 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelEventPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelEventPacket.java
@@ -15,6 +15,12 @@ public class ClientboundLevelEventPacket extends org.fiddlemc.fiddle.packet.Clon
         org.fiddlemc.fiddle.packet.block.BlockStateVisualizationSetupper.BlockStateVisualizationPurpose.PARTICLE, // Fiddle - client perspective - block state visualization - level event data - block brush complete
     };
     // Fiddle end - client perspective - block state visualization - level event data - data can be BlockState
+    // Fiddle start - client perspective - block state visualization - level event data - data can be Item or ItemStack
+    private final static int[] typesWhereDataIsItem = {
+    };
+    private final static org.fiddlemc.fiddle.packet.item.ItemInPacketContext[] itemInPacketContextForTypes = {
+    };
+    // Fiddle end - client perspective - block state visualization - level event data - data can be Item or ItemStack
     private final int type;
     private final BlockPos pos;
     private final Object data; // Fiddle - client perspective - level event data value replacements - data can be generic
@@ -70,6 +76,28 @@ public class ClientboundLevelEventPacket extends org.fiddlemc.fiddle.packet.Clon
             }
         }
         // Fiddle end - client perspective - block state visualization - level event data - data can be BlockState
+        // Fiddle start - client perspective - item replacements - level event data - data can be Item or ItemStack
+        for (int i = 0; i < typesWhereDataIsItem.length; i++) {
+            if (this.type == typesWhereDataIsItem[i]) {
+                // We can skip cloning if the data that will be sent is always the same
+                // First determine the item that will be sent
+                var itemStack = this.getDataAsItemStack();
+                var item = itemStack == null ? this.getDataAsItem() : null;
+                var context = itemInPacketContextForTypes[i];
+                var itemToSend = itemStack != null ? org.fiddlemc.fiddle.packet.item.ItemInPacketReplacer.replace(itemStack, context) : org.fiddlemc.fiddle.packet.item.ItemInPacketReplacer.replace(item, context);
+                if (itemToSend == null) {
+                    // The item that will be sent cannot be certainly known, so we cannot skip cloning
+                    return false;
+                }
+                if (org.fiddlemc.fiddle.packet.ClientPerspective.getSinglePacketItemId(itemToSend) == -1) {
+                    // The id that will be sent for the item cannot be certainly known, so we cannot skip cloning
+                    return false;
+                }
+                // The same id will be sent to everyone, so we can skip cloning
+                return true;
+            }
+        }
+        // Fiddle end - client perspective - item replacements - level event data - data can be Item or ItemStack
         // Fiddle start - client perspective - level event data value replacements - data can be generic
         if (!(this.data instanceof Integer)) {
             // Whether cloning can be skipped must already have been determined
@@ -148,6 +176,28 @@ public class ClientboundLevelEventPacket extends org.fiddlemc.fiddle.packet.Clon
             }
         }
         // Fiddle end - client perspective - block state visualization - level event data - data can be BlockState
+        // Fiddle start - client perspective - item replacements - level event data - data can be Item or ItemStack
+        for (int i = 0; i < typesWhereDataIsItem.length; i++) {
+            if (this.type == typesWhereDataIsItem[i]) {
+                // Replace the item
+                var itemStack = this.getDataAsItemStack();
+                var item = itemStack == null ? this.getDataAsItem() : null;
+                var context = itemInPacketContextForTypes[i];
+                var itemToSend = itemStack != null ? org.fiddlemc.fiddle.packet.item.ItemInPacketReplacer.replace(itemStack, context) : org.fiddlemc.fiddle.packet.item.ItemInPacketReplacer.replace(item, context);
+                if (itemToSend == null) {
+                    var clientPerspective = this.getExplicitTargetClientPerspective();
+                    itemToSend = itemStack != null ? org.fiddlemc.fiddle.packet.item.ItemInPacketReplacer.replace(itemStack, clientPerspective, context) : org.fiddlemc.fiddle.packet.item.ItemInPacketReplacer.replace(item, clientPerspective, context);
+                }
+                // Turn the item to send into an id that the client can interpret
+                int singleValue = org.fiddlemc.fiddle.packet.ClientPerspective.getSinglePacketItemId(itemToSend);
+                if (singleValue != -1) {
+                    return singleValue;
+                }
+                var clientPerspective = this.getExplicitTargetClientPerspective();
+                return clientPerspective.getPacketItemId(itemToSend);
+            }
+        }
+        // Fiddle end - client perspective - item replacements - level event data - data can be Item or ItemStack
         // Fiddle start - client perspective - level event data value replacements - data can be generic
         if (!(this.data instanceof Integer)) {
             throw new IllegalStateException("Could not determine getData() for non-integer data of type " + this.data.getClass().getName() + ": " + this.data);
@@ -170,5 +220,28 @@ public class ClientboundLevelEventPacket extends org.fiddlemc.fiddle.packet.Clon
     }
     // Fiddle end - client perspective - block state visualization - level event data - data can be BlockState
 
+    // Fiddle start - client perspective - item replacements - level event data - data can be Item or ItemStack
+    /**
+     * @return The data of this packet as a {@link net.minecraft.world.item.ItemStack},
+     * if it represents a specific such item stack,
+     * or null if this packet does not contain a specific item stack
+     * (but just an {@link net.minecraft.world.item.Item}).
+     */
+    private @org.jetbrains.annotations.Nullable net.minecraft.world.item.ItemStack getDataAsItemStack() {
+        if (this.data instanceof net.minecraft.world.item.ItemStack itemStack) {
+            return itemStack;
+        }
+        return null;
+    }
+
+    private net.minecraft.world.item.Item getDataAsItem() {
+        if (this.data instanceof net.minecraft.world.item.Item item) {
+            return item;
+        }
+        // Reverse Item#getId
+        return net.minecraft.core.registries.BuiltInRegistries.ITEM.byId((int) this.data);
+    }
+    // Fiddle end - client perspective - item replacements - level event data - data can be Item or ItemStack
+
 }
 
