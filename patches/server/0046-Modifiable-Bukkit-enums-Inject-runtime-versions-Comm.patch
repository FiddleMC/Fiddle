From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Mon, 10 Jul 2023 22:05:08 +0200
Subject: [PATCH] Modifiable Bukkit enums - Inject runtime versions - Common
 utilities

License: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)
Fiddle - https://fiddlemc.org

diff --git a/src/main/java/net/minecraft/server/Main.java b/src/main/java/net/minecraft/server/Main.java
index 6fd08200c4292c2cd90ed1f21a2cb2a2653ca259..38045bc523547abc903487c56c760333153eeed0 100644
--- a/src/main/java/net/minecraft/server/Main.java
+++ b/src/main/java/net/minecraft/server/Main.java
@@ -152,6 +152,34 @@ public class Main {
             Path path1 = Paths.get("server.properties");
             DedicatedServerSettings dedicatedserversettings = new DedicatedServerSettings(optionset); // CraftBukkit - CLI argument support
 
+            // Fiddle start - modifiable Bukkit enums - inject runtime versions - common utilities
+            ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader();
+            class InjectRuntimeClassVersionHelper {
+
+                /**
+                 * Checks if the given class is loaded, and if it is, prints an error message to the logger.
+                 *
+                 * @return Whether the given class was loaded, or if checking if the given was loaded failed.
+                 */
+                boolean wasClassLoaded(String qualifiedClassName) {
+                    try {
+                        java.lang.reflect.Method findLoadedClassMethod = ClassLoader.class.getDeclaredMethod("findLoadedClass", String.class);
+                        findLoadedClassMethod.setAccessible(true);
+                        if (findLoadedClassMethod.invoke(systemClassLoader, qualifiedClassName) != null) {
+                            LOGGER.error("A Bukkit enum class (" + qualifiedClassName + ") was already loaded before additional values could be added. This may be caused by a plugin using the class before the server started, or an instrumentation agent or class loader runtime flag forcibly loading the class.");
+                            return true;
+                        }
+                    } catch (Exception e) {
+                        LOGGER.error("Failed to check if Bukkit enum classes were already loaded: please add \"--add-opens=java.base/java.lang=ALL-UNNAMED\" to your server command line, for example \"java -jar server.jar --add-opens=java.base/java.lang=ALL-UNNAMED\"", e);
+                        return true;
+                    }
+                    return false;
+                }
+
+            }
+            var injectRuntimeClassVersionHelper = new InjectRuntimeClassVersionHelper();
+            // Fiddle end - modifiable Bukkit enums - inject runtime versions - common utilities
+
             dedicatedserversettings.forceSave();
             // Paper start - load config files early for access below if needed
             org.bukkit.configuration.file.YamlConfiguration bukkitConfiguration = io.papermc.paper.configuration.PaperConfigurations.loadLegacyConfigFile((File) optionset.valueOf("bukkit-settings"));
diff --git a/src/main/java/org/fiddlemc/fiddle/bytebuddy/ByteBuddyWithoutValueOf.java b/src/main/java/org/fiddlemc/fiddle/bytebuddy/ByteBuddyWithoutValueOf.java
new file mode 100644
index 0000000000000000000000000000000000000000..6b59bd353030a0b72ee50b0cbb22f943ad3ed0ee
--- /dev/null
+++ b/src/main/java/org/fiddlemc/fiddle/bytebuddy/ByteBuddyWithoutValueOf.java
@@ -0,0 +1,99 @@
+// Fiddle - modifiable Bukkit enums - inject runtime versions - common utilities
+
+package org.fiddlemc.fiddle.bytebuddy;
+
+import net.bytebuddy.ByteBuddy;
+import net.bytebuddy.build.HashCodeAndEqualsPlugin;
+import net.bytebuddy.description.modifier.*;
+import net.bytebuddy.description.type.TypeDescription;
+import net.bytebuddy.dynamic.DynamicType;
+import net.bytebuddy.dynamic.TargetType;
+import net.bytebuddy.dynamic.scaffold.subclass.ConstructorStrategy;
+import net.bytebuddy.dynamic.scaffold.subclass.SubclassDynamicTypeBuilder;
+import net.bytebuddy.implementation.MethodDelegation;
+import net.bytebuddy.implementation.SuperMethodCall;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.List;
+
+/**
+ * An extension to {@link ByteBuddy} that permits an alternative to the {@link ByteBuddy#makeEnumeration} method:
+ * {@link #makeEnumerationWithoutValueOf}.
+ */
+@HashCodeAndEqualsPlugin.Enhance
+public class ByteBuddyWithoutValueOf extends ByteBuddy {
+
+    public ByteBuddyWithoutValueOf() {
+        super();
+    }
+
+    /**
+     * A modified version of {@link ByteBuddy#makeEnumeration},
+     * that does not add an implementation of an enum's static {@code valueOf(String)} method.
+     */
+    public DynamicType.Builder<? extends Enum<?>> makeEnumerationWithoutValueOf(Collection<? extends String> values) {
+        // Copied from ByteBuddy#makeEnumeration, except for marked lines
+        if (values.isEmpty()) {
+            throw new IllegalArgumentException("Require at least one enumeration constant");
+        }
+        TypeDescription.Generic enumType = TypeDescription.Generic.Builder.parameterizedType(Enum.class, TargetType.class).build();
+        return new SubclassDynamicTypeBuilder<Enum<?>>(instrumentedTypeFactory.subclass(namingStrategy.subclass(enumType),
+            ModifierContributor.Resolver.of(Visibility.PUBLIC, TypeManifestation.FINAL, EnumerationState.ENUMERATION).resolve(),
+            enumType),
+            classFileVersion,
+            auxiliaryTypeNamingStrategy,
+            annotationValueFilterFactory,
+            annotationRetention,
+            implementationContextFactory,
+            methodGraphCompiler,
+            typeValidation,
+            visibilityBridgeStrategy,
+            classWriterStrategy,
+            ignoredMethods,
+            ConstructorStrategy.Default.NO_CONSTRUCTORS)
+            .defineConstructor(Visibility.PRIVATE).withParameters(String.class, int.class)
+            .intercept(SuperMethodCall.INSTANCE)
+            .defineMethod(EnumerationImplementationWithoutValueOf.ENUM_VALUES_METHOD_NAME, // Modified from ByteBuddy#makeEnumeration
+                TargetType[].class,
+                Visibility.PUBLIC, Ownership.STATIC)
+            .intercept(new EnumerationImplementationWithoutValueOf(new ArrayList<>(values))); // Modified from ByteBuddy#makeEnumeration
+    }
+
+    /**
+     * A convenience function that calls {@link #makeEnumerationWithoutValueOf(Collection)}
+     * and also immediately applies the given target as implementation for {@code valueOf}.
+     */
+    public DynamicType.Builder<? extends Enum<?>> makeEnumerationWithoutValueOf(Collection<? extends String> values, Class<?> delegationTarget) {
+        return this.makeEnumerationWithoutValueOf(values)
+            .defineMethod(EnumerationImplementationWithoutValueOf.ENUM_VALUE_OF_METHOD_NAME, TargetType.class, Visibility.PUBLIC, Ownership.STATIC)
+            .withParameters(String.class)
+            .intercept(MethodDelegation.to(delegationTarget));
+    }
+
+    /**
+     * An extension to {@link ByteBuddy.EnumerationImplementation},
+     * for use in {@link #makeEnumerationWithoutValueOf}.
+     */
+    @HashCodeAndEqualsPlugin.Enhance
+    private static class EnumerationImplementationWithoutValueOf extends EnumerationImplementation {
+
+        /**
+         * This simply exposes {@link ByteBuddy.EnumerationImplementation#ENUM_VALUE_OF_METHOD_NAME}
+         * as public.
+         */
+        public static final String ENUM_VALUE_OF_METHOD_NAME = ByteBuddy.EnumerationImplementation.ENUM_VALUE_OF_METHOD_NAME;
+
+        /**
+         * This simply exposes {@link ByteBuddy.EnumerationImplementation#ENUM_VALUES_METHOD_NAME}
+         * for use inside the {@link ByteBuddyWithoutValueOf} class.
+         */
+        private static final String ENUM_VALUES_METHOD_NAME = ByteBuddy.EnumerationImplementation.ENUM_VALUES_METHOD_NAME;
+
+        private EnumerationImplementationWithoutValueOf(List<String> values) {
+            super(values);
+        }
+
+    }
+
+}
