From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Sat, 15 Jul 2023 20:05:46 +0200
Subject: [PATCH] Cache Block and Item registry key - Use - Block

Replaces lookups of `Block` registry keys (occurrences of `BuiltInRegistries.BLOCK.getKey`) with the lazily computed value in `Block` (`Block.getKeyInBlockRegistry` or `Block.getKeyInBlockRegistryString`) added in the "Cache Block and Item registry key - Provide" patch.

License: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)
Fiddle - https://fiddlemc.org

diff --git a/src/main/java/net/minecraft/advancements/critereon/BeeNestDestroyedTrigger.java b/src/main/java/net/minecraft/advancements/critereon/BeeNestDestroyedTrigger.java
index 0a46a798dc0a08300a388bd902d79c6437917d16..90768141e9cabd089732001bff655c2322690579 100644
--- a/src/main/java/net/minecraft/advancements/critereon/BeeNestDestroyedTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/BeeNestDestroyedTrigger.java
@@ -74,7 +74,7 @@ public class BeeNestDestroyedTrigger extends SimpleCriterionTrigger<BeeNestDestr
         public JsonObject serializeToJson(SerializationContext predicateSerializer) {
             JsonObject jsonObject = super.serializeToJson(predicateSerializer);
             if (this.block != null) {
-                jsonObject.addProperty("block", BuiltInRegistries.BLOCK.getKey(this.block).toString());
+                jsonObject.addProperty("block", this.block.getKeyInBlockRegistryString()); // Fiddle - cache registry keys as fields - use instead of lookup - block
             }
 
             jsonObject.add("item", this.item.serializeToJson());
diff --git a/src/main/java/net/minecraft/advancements/critereon/BlockPredicate.java b/src/main/java/net/minecraft/advancements/critereon/BlockPredicate.java
index f2143dc406a69ffa8be10b3738b43dea6f3ffc1d..9f476c2c6eeac6d953ec8d9085b61ef1fae19127 100644
--- a/src/main/java/net/minecraft/advancements/critereon/BlockPredicate.java
+++ b/src/main/java/net/minecraft/advancements/critereon/BlockPredicate.java
@@ -103,7 +103,7 @@ public class BlockPredicate {
                 JsonArray jsonArray = new JsonArray();
 
                 for(Block block : this.blocks) {
-                    jsonArray.add(BuiltInRegistries.BLOCK.getKey(block).toString());
+                    jsonArray.add(block.getKeyInBlockRegistryString()); // Fiddle - cache registry keys as fields - use instead of lookup - block
                 }
 
                 jsonObject.add("blocks", jsonArray);
diff --git a/src/main/java/net/minecraft/advancements/critereon/EnterBlockTrigger.java b/src/main/java/net/minecraft/advancements/critereon/EnterBlockTrigger.java
index ec6ce962e475b3be3f77e3cdfab99f48589323dc..761a8a0a2f8fc3a4b0c898c3bcc6d498a38b2bee 100644
--- a/src/main/java/net/minecraft/advancements/critereon/EnterBlockTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/EnterBlockTrigger.java
@@ -68,7 +68,7 @@ public class EnterBlockTrigger extends SimpleCriterionTrigger<EnterBlockTrigger.
         public JsonObject serializeToJson(SerializationContext predicateSerializer) {
             JsonObject jsonObject = super.serializeToJson(predicateSerializer);
             if (this.block != null) {
-                jsonObject.addProperty("block", BuiltInRegistries.BLOCK.getKey(this.block).toString());
+                jsonObject.addProperty("block", this.block.getKeyInBlockRegistryString()); // Fiddle - cache registry keys as fields - use instead of lookup - block
             }
 
             jsonObject.add("state", this.state.serializeToJson());
diff --git a/src/main/java/net/minecraft/advancements/critereon/SlideDownBlockTrigger.java b/src/main/java/net/minecraft/advancements/critereon/SlideDownBlockTrigger.java
index b9e8cc3ff15befce815ead8f7c57a31d3931be1a..a94635ff34dfb6b7d08d9ff20db2a414e3f985ab 100644
--- a/src/main/java/net/minecraft/advancements/critereon/SlideDownBlockTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/SlideDownBlockTrigger.java
@@ -68,7 +68,7 @@ public class SlideDownBlockTrigger extends SimpleCriterionTrigger<SlideDownBlock
         public JsonObject serializeToJson(SerializationContext predicateSerializer) {
             JsonObject jsonObject = super.serializeToJson(predicateSerializer);
             if (this.block != null) {
-                jsonObject.addProperty("block", BuiltInRegistries.BLOCK.getKey(this.block).toString());
+                jsonObject.addProperty("block", this.block.getKeyInBlockRegistryString()); // Fiddle - cache registry keys as fields - use instead of lookup - block
             }
 
             jsonObject.add("state", this.state.serializeToJson());
diff --git a/src/main/java/net/minecraft/data/BlockFamilies.java b/src/main/java/net/minecraft/data/BlockFamilies.java
index 4de8d267184db19b473e5512d834cbb858763d42..d8eaa180fc264b72c6fa2ea8e1fa82165c4fd92c 100644
--- a/src/main/java/net/minecraft/data/BlockFamilies.java
+++ b/src/main/java/net/minecraft/data/BlockFamilies.java
@@ -80,7 +80,7 @@ public class BlockFamilies {
         BlockFamily.Builder builder = new BlockFamily.Builder(baseBlock);
         BlockFamily blockFamily = MAP.put(baseBlock, builder.getFamily());
         if (blockFamily != null) {
-            throw new IllegalStateException("Duplicate family definition for " + BuiltInRegistries.BLOCK.getKey(baseBlock));
+            throw new IllegalStateException("Duplicate family definition for " + baseBlock.getKeyInBlockRegistryString()); // Fiddle - cache registry keys as fields - use instead of lookup - block
         } else {
             return builder;
         }
diff --git a/src/main/java/net/minecraft/data/info/BlockListReport.java b/src/main/java/net/minecraft/data/info/BlockListReport.java
index 56634e1fd937cd7ac01312e4bd6fffdb13abae5e..85aec1f60600b60865daae27b82913eb387fcab1 100644
--- a/src/main/java/net/minecraft/data/info/BlockListReport.java
+++ b/src/main/java/net/minecraft/data/info/BlockListReport.java
@@ -27,7 +27,7 @@ public class BlockListReport implements DataProvider {
         JsonObject jsonObject = new JsonObject();
 
         for(Block block : BuiltInRegistries.BLOCK) {
-            ResourceLocation resourceLocation = BuiltInRegistries.BLOCK.getKey(block);
+            ResourceLocation resourceLocation = block.getKeyInBlockRegistry(); // Fiddle - cache registry keys as fields - use instead of lookup - block
             JsonObject jsonObject2 = new JsonObject();
             StateDefinition<Block, BlockState> stateDefinition = block.getStateDefinition();
             if (!stateDefinition.getProperties().isEmpty()) {
diff --git a/src/main/java/net/minecraft/data/loot/BlockLootSubProvider.java b/src/main/java/net/minecraft/data/loot/BlockLootSubProvider.java
index c899f7ca073e60f54ea30e89e2ad98479c5fa48c..0762e6a3325a877e9d63094e56c3a542e026f422 100644
--- a/src/main/java/net/minecraft/data/loot/BlockLootSubProvider.java
+++ b/src/main/java/net/minecraft/data/loot/BlockLootSubProvider.java
@@ -276,7 +276,7 @@ public abstract class BlockLootSubProvider implements LootTableSubProvider {
                 if (resourceLocation != BuiltInLootTables.EMPTY && set.add(resourceLocation)) {
                     LootTable.Builder builder = this.map.remove(resourceLocation);
                     if (builder == null) {
-                        throw new IllegalStateException(String.format(Locale.ROOT, "Missing loottable '%s' for '%s'", resourceLocation, BuiltInRegistries.BLOCK.getKey(block)));
+                        throw new IllegalStateException(String.format(Locale.ROOT, "Missing loottable '%s' for '%s'", resourceLocation, block.getKeyInBlockRegistryString())); // Fiddle - cache registry keys as fields - use instead of lookup - block
                     }
 
                     exporter.accept(resourceLocation, builder);
diff --git a/src/main/java/net/minecraft/data/models/model/ModelLocationUtils.java b/src/main/java/net/minecraft/data/models/model/ModelLocationUtils.java
index 8af069656927ccb77ddcb90cef3f7ad30dd96cac..9348b4d7e6711ae8db5b7f48f3c068baca53f655 100644
--- a/src/main/java/net/minecraft/data/models/model/ModelLocationUtils.java
+++ b/src/main/java/net/minecraft/data/models/model/ModelLocationUtils.java
@@ -17,14 +17,14 @@ public class ModelLocationUtils {
     }
 
     public static ResourceLocation getModelLocation(Block block, String suffix) {
-        ResourceLocation resourceLocation = BuiltInRegistries.BLOCK.getKey(block);
+        ResourceLocation resourceLocation = block.getKeyInBlockRegistry(); // Fiddle - cache registry keys as fields - use instead of lookup - block
         return resourceLocation.withPath((path) -> {
             return "block/" + path + suffix;
         });
     }
 
     public static ResourceLocation getModelLocation(Block block) {
-        ResourceLocation resourceLocation = BuiltInRegistries.BLOCK.getKey(block);
+        ResourceLocation resourceLocation = block.getKeyInBlockRegistry(); // Fiddle - cache registry keys as fields - use instead of lookup - block
         return resourceLocation.withPrefix("block/");
     }
 
diff --git a/src/main/java/net/minecraft/data/models/model/TextureMapping.java b/src/main/java/net/minecraft/data/models/model/TextureMapping.java
index b36d296bdd8028d55ab05d5d536821470e232968..4abf4227a928fbcba1e08bbadd30404f4ac47d70 100644
--- a/src/main/java/net/minecraft/data/models/model/TextureMapping.java
+++ b/src/main/java/net/minecraft/data/models/model/TextureMapping.java
@@ -294,12 +294,12 @@ public class TextureMapping {
     }
 
     public static ResourceLocation getBlockTexture(Block block) {
-        ResourceLocation resourceLocation = BuiltInRegistries.BLOCK.getKey(block);
+        ResourceLocation resourceLocation = block.getKeyInBlockRegistry(); // Fiddle - cache registry keys as fields - use instead of lookup - block
         return resourceLocation.withPrefix("block/");
     }
 
     public static ResourceLocation getBlockTexture(Block block, String suffix) {
-        ResourceLocation resourceLocation = BuiltInRegistries.BLOCK.getKey(block);
+        ResourceLocation resourceLocation = block.getKeyInBlockRegistry(); // Fiddle - cache registry keys as fields - use instead of lookup - block
         return resourceLocation.withPath((path) -> {
             return "block/" + path + suffix;
         });
diff --git a/src/main/java/net/minecraft/nbt/NbtUtils.java b/src/main/java/net/minecraft/nbt/NbtUtils.java
index 6dac24354192bea79a4b9eb721543110826790b2..f7960144ac83214183bb76c14dbed6d891f6c4a3 100644
--- a/src/main/java/net/minecraft/nbt/NbtUtils.java
+++ b/src/main/java/net/minecraft/nbt/NbtUtils.java
@@ -267,7 +267,7 @@ public final class NbtUtils {
 
     public static CompoundTag writeBlockState(BlockState state) {
         CompoundTag compoundTag = new CompoundTag();
-        compoundTag.putString("Name", BuiltInRegistries.BLOCK.getKey(state.getBlock()).toString());
+        compoundTag.putString("Name", state.getBlock().getKeyInBlockRegistryString()); // Fiddle - cache registry keys as fields - use instead of lookup - block
         ImmutableMap<Property<?>, Comparable<?>> immutableMap = state.getValues();
         if (!immutableMap.isEmpty()) {
             CompoundTag compoundTag2 = new CompoundTag();
diff --git a/src/main/java/net/minecraft/world/item/DebugStickItem.java b/src/main/java/net/minecraft/world/item/DebugStickItem.java
index bb39241bb9951fba4dd9d9b254edaab2e8721526..0e68153cfcfc7065348dbb15192cde1bcff64525 100644
--- a/src/main/java/net/minecraft/world/item/DebugStickItem.java
+++ b/src/main/java/net/minecraft/world/item/DebugStickItem.java
@@ -63,7 +63,7 @@ public class DebugStickItem extends Item {
             Block block = state.getBlock();
             StateDefinition<Block, BlockState> blockstatelist = block.getStateDefinition();
             Collection<Property<?>> collection = blockstatelist.getProperties();
-            String s = BuiltInRegistries.BLOCK.getKey(block).toString();
+            String s = block.getKeyInBlockRegistryString(); // Fiddle - cache registry keys as fields - use instead of lookup - block
 
             if (collection.isEmpty()) {
                 DebugStickItem.message(player, Component.translatable(this.getDescriptionId() + ".empty", s));
diff --git a/src/main/java/net/minecraft/world/item/Items.java b/src/main/java/net/minecraft/world/item/Items.java
index 1225c28aa72ac54ac103c72a5eb92e7349e9c94d..00b89b6a05418f1349316f7da274c04c5ab3107c 100644
--- a/src/main/java/net/minecraft/world/item/Items.java
+++ b/src/main/java/net/minecraft/world/item/Items.java
@@ -1293,7 +1293,7 @@ public class Items {
     }
 
     public static Item registerBlock(Block block, Item item) {
-        return registerItem(BuiltInRegistries.BLOCK.getKey(block), item);
+        return registerItem(block.getKeyInBlockRegistry(), item); // Fiddle - cache registry keys as fields - use instead of lookup - block
     }
 
     public static Item registerItem(String id, Item item) {
diff --git a/src/main/java/net/minecraft/world/level/block/Block.java b/src/main/java/net/minecraft/world/level/block/Block.java
index 1c87b53cbe921ec50ab51ac399c4ad76183f04d9..eeebdb66829ec0cf96a61a2a33f8f7d0352667be 100644
--- a/src/main/java/net/minecraft/world/level/block/Block.java
+++ b/src/main/java/net/minecraft/world/level/block/Block.java
@@ -491,7 +491,7 @@ public class Block extends BlockBehaviour implements ItemLike {
 
     public String getDescriptionId() {
         if (this.descriptionId == null) {
-            this.descriptionId = Util.makeDescriptionId("block", BuiltInRegistries.BLOCK.getKey(this));
+            this.descriptionId = Util.makeDescriptionId("block", this.getKeyInBlockRegistry()); // Fiddle - cache registry keys as fields - use instead of lookup - block
         }
 
         return this.descriptionId;
@@ -591,7 +591,7 @@ public class Block extends BlockBehaviour implements ItemLike {
     }
 
     public String toString() {
-        return "Block{" + BuiltInRegistries.BLOCK.getKey(this) + "}";
+        return "Block{" + this.getKeyInBlockRegistryString() + "}"; // Fiddle - cache registry keys as fields - use instead of lookup - block
     }
 
     public void appendHoverText(ItemStack stack, @Nullable BlockGetter world, List<Component> tooltip, TooltipFlag options) {}
diff --git a/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java b/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java
index de4c1e4701236e7d5ec77339c51ad6a9d8288bb6..f04af61600505c69458b75ba40cbb78efae6f0ef 100644
--- a/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java
+++ b/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java
@@ -396,7 +396,7 @@ public abstract class BlockBehaviour implements FeatureElement {
 
     public final ResourceLocation getLootTable() {
         if (this.drops == null) {
-            ResourceLocation minecraftkey = BuiltInRegistries.BLOCK.getKey(this.asBlock());
+            ResourceLocation minecraftkey = this.asBlock().getKeyInBlockRegistry(); // Fiddle - cache registry keys as fields - use instead of lookup - block
 
             this.drops = minecraftkey.withPrefix("blocks/");
         }
@@ -1337,7 +1337,7 @@ public abstract class BlockBehaviour implements FeatureElement {
 
                 this.collisionShape = block.getCollisionShape(state, EmptyBlockGetter.INSTANCE, BlockPos.ZERO, CollisionContext.empty());
                 if (!this.collisionShape.isEmpty() && state.hasOffsetFunction()) {
-                    throw new IllegalStateException(String.format(Locale.ROOT, "%s has a collision shape and an offset type, but is not marked as dynamicShape in its properties.", BuiltInRegistries.BLOCK.getKey(block)));
+                    throw new IllegalStateException(String.format(Locale.ROOT, "%s has a collision shape and an offset type, but is not marked as dynamicShape in its properties.", block.getKeyInBlockRegistryString())); // Fiddle - cache registry keys as fields - use instead of lookup - block
                 } else {
                     this.largeCollisionShape = Arrays.stream(Direction.Axis.values()).anyMatch((enumdirection_enumaxis) -> {
                         return this.collisionShape.min(enumdirection_enumaxis) < 0.0D || this.collisionShape.max(enumdirection_enumaxis) > 1.0D;
diff --git a/src/main/java/net/minecraft/world/level/chunk/UpgradeData.java b/src/main/java/net/minecraft/world/level/chunk/UpgradeData.java
index 8e2a7ea230fedb9094a159a83c9d69f6df3832f3..b37c972300ef6bc5dfa45eae6e0254d3e0833383 100644
--- a/src/main/java/net/minecraft/world/level/chunk/UpgradeData.java
+++ b/src/main/java/net/minecraft/world/level/chunk/UpgradeData.java
@@ -241,7 +241,7 @@ public class UpgradeData {
             ListTag listTag = new ListTag();
             this.neighborBlockTicks.forEach((blockTick) -> {
                 listTag.add(blockTick.save((block) -> {
-                    return BuiltInRegistries.BLOCK.getKey(block).toString();
+                    return block.getKeyInBlockRegistryString(); // Fiddle - cache registry keys as fields - use instead of lookup - block
                 }));
             });
             compoundTag.put("neighbor_block_ticks", listTag);
diff --git a/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java b/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
index 9c6a2884c34a9f6e775103da42480cd6b8c693b3..e3560978ac85bda5f52b03f193f2620190790313 100644
--- a/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
+++ b/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
@@ -642,7 +642,7 @@ public class ChunkSerializer {
         long i = world.getLevelData().getGameTime();
 
         nbt.put("block_ticks", tickSchedulers.blocks().save(i, (block) -> {
-            return BuiltInRegistries.BLOCK.getKey(block).toString();
+            return block.getKeyInBlockRegistryString(); // Fiddle - cache registry keys as fields - use instead of lookup - block
         }));
         nbt.put("fluid_ticks", tickSchedulers.fluids().save(i, (fluidtype) -> {
             return BuiltInRegistries.FLUID.getKey(fluidtype).toString();
diff --git a/src/main/java/net/minecraft/world/level/levelgen/flat/FlatLayerInfo.java b/src/main/java/net/minecraft/world/level/levelgen/flat/FlatLayerInfo.java
index 115ed65e19510dbc0da9340db9f8dcf53979827e..20145a0f00c751103ff7affb379ddc72ad14125f 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/flat/FlatLayerInfo.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/flat/FlatLayerInfo.java
@@ -32,6 +32,6 @@ public class FlatLayerInfo {
 
     @Override
     public String toString() {
-        return (this.height != 1 ? this.height + "*" : "") + BuiltInRegistries.BLOCK.getKey(this.block);
+        return (this.height != 1 ? this.height + "*" : "") + this.block.getKeyInBlockRegistryString(); // Fiddle - cache registry keys as fields - use instead of lookup - block
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/redstone/NeighborUpdater.java b/src/main/java/net/minecraft/world/level/redstone/NeighborUpdater.java
index 19faa8f5f891c1ffbed0af8391dee8202433c447..5c41903197b405bdaea917e46af03b0cd14029a1 100644
--- a/src/main/java/net/minecraft/world/level/redstone/NeighborUpdater.java
+++ b/src/main/java/net/minecraft/world/level/redstone/NeighborUpdater.java
@@ -74,9 +74,9 @@ public interface NeighborUpdater {
 
             crashreportsystemdetails.setDetail("Source block type", () -> {
                 try {
-                    return String.format(Locale.ROOT, "ID #%s (%s // %s)", BuiltInRegistries.BLOCK.getKey(sourceBlock), sourceBlock.getDescriptionId(), sourceBlock.getClass().getCanonicalName());
+                    return String.format(Locale.ROOT, "ID #%s (%s // %s)", sourceBlock.getKeyInBlockRegistryString(), sourceBlock.getDescriptionId(), sourceBlock.getClass().getCanonicalName()); // Fiddle - cache registry keys as fields - use instead of lookup - block
                 } catch (Throwable throwable1) {
-                    return "ID #" + BuiltInRegistries.BLOCK.getKey(sourceBlock);
+                    return "ID #" + sourceBlock.getKeyInBlockRegistryString(); // Fiddle - cache registry keys as fields - use instead of lookup - block
                 }
             });
             CrashReportCategory.populateBlockDetails(crashreportsystemdetails, world, pos, state);
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/functions/CopyBlockState.java b/src/main/java/net/minecraft/world/level/storage/loot/functions/CopyBlockState.java
index ff731969d5c3630c3eec6478e5cbc01c21cec32d..ba85b1ec9e34ba0b1d055c280a309ba2110ba610 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/functions/CopyBlockState.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/functions/CopyBlockState.java
@@ -103,7 +103,7 @@ public class CopyBlockState extends LootItemConditionalFunction {
         @Override
         public void serialize(JsonObject json, CopyBlockState object, JsonSerializationContext context) {
             super.serialize(json, object, context);
-            json.addProperty("block", BuiltInRegistries.BLOCK.getKey(object.block).toString());
+            json.addProperty("block", object.block.getKeyInBlockRegistryString()); // Fiddle - cache registry keys as fields - use instead of lookup - block
             JsonArray jsonArray = new JsonArray();
             object.properties.forEach((property) -> {
                 jsonArray.add(property.getName());
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/predicates/LootItemBlockStatePropertyCondition.java b/src/main/java/net/minecraft/world/level/storage/loot/predicates/LootItemBlockStatePropertyCondition.java
index 7b5bba1dae1357c29072d0f1ea69dbc358abe53f..0e1a50fa2a53ac0166d6c510a3da3c2c9d3c162c 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/predicates/LootItemBlockStatePropertyCondition.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/predicates/LootItemBlockStatePropertyCondition.java
@@ -67,7 +67,7 @@ public class LootItemBlockStatePropertyCondition implements LootItemCondition {
     public static class Serializer implements net.minecraft.world.level.storage.loot.Serializer<LootItemBlockStatePropertyCondition> {
         @Override
         public void serialize(JsonObject json, LootItemBlockStatePropertyCondition object, JsonSerializationContext context) {
-            json.addProperty("block", BuiltInRegistries.BLOCK.getKey(object.block).toString());
+            json.addProperty("block", object.block.getKeyInBlockRegistryString()); // Fiddle - cache registry keys as fields - use instead of lookup - block
             json.add("properties", object.properties.serializeToJson());
         }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/CraftBlockData.java b/src/main/java/org/bukkit/craftbukkit/block/data/CraftBlockData.java
index 9abfacbf024eec80c9dac2af4e9338eb2a790128..05ea00a3424761417d77bfca7d1e1e60773bedf9 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/CraftBlockData.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/CraftBlockData.java
@@ -236,7 +236,7 @@ public class CraftBlockData implements BlockData {
 
     // Mimicked from BlockDataAbstract#toString()
     public String toString(Map<Property<?>, Comparable<?>> states) {
-        StringBuilder stateString = new StringBuilder(BuiltInRegistries.BLOCK.getKey(this.state.getBlock()).toString());
+        StringBuilder stateString = new StringBuilder(this.state.getBlock().getKeyInBlockRegistryString()); // Fiddle - cache registry keys as fields - use instead of lookup - block
 
         if (!states.isEmpty()) {
             stateString.append('[');
@@ -549,7 +549,7 @@ public class CraftBlockData implements BlockData {
         if (material != null) {
             Block block = CraftMagicNumbers.getBlock(material);
             if (block != null) {
-                net.minecraft.resources.ResourceLocation key = BuiltInRegistries.BLOCK.getKey(block);
+                net.minecraft.resources.ResourceLocation key = block.getKeyInBlockRegistry(); // Fiddle - cache registry keys as fields - use instead of lookup - block
                 data = data == null ? key.toString() : key + data;
             }
         }
@@ -569,7 +569,7 @@ public class CraftBlockData implements BlockData {
             try {
                 // Material provided, force that material in
                 if (block != null) {
-                    data = BuiltInRegistries.BLOCK.getKey(block) + data;
+                    data = block.getKeyInBlockRegistryString() + data; // Fiddle - cache registry keys as fields - use instead of lookup - block
                 }
 
                 StringReader reader = new StringReader(data);
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
index 1481c8ca684eddca3eb5db3aceac4877043b9fcd..51bc172de7274db043a3009d0ae815dec2894a6c 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
@@ -1784,7 +1784,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
         if (isTag && result.right().isPresent() && result.right().get().tag() instanceof net.minecraft.core.HolderSet.Named<net.minecraft.world.level.block.Block> namedSet) {
             key = namedSet.key().location();
         } else if (result.left().isPresent()) {
-            key = net.minecraft.core.registries.BuiltInRegistries.BLOCK.getKey(result.left().get().blockState().getBlock());
+            key = result.left().get().blockState().getBlock().getKeyInBlockRegistry(); // Fiddle - cache registry keys as fields - use instead of lookup - block
         }
 
         if (key == null) {
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
index 404ab414215bcd4833016d4fac6ed1dd5937277f..caf9b386a2d2de64eabd6b2ddcad03e223b928ce 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
@@ -153,7 +153,7 @@ public final class CraftMagicNumbers implements UnsafeValues {
         }
         // Paper end
         for (Block block : BuiltInRegistries.BLOCK) {
-            BLOCK_MATERIAL.put(block, Material.getMaterial(BuiltInRegistries.BLOCK.getKey(block).getPath().toUpperCase(Locale.ROOT)));
+            BLOCK_MATERIAL.put(block, Material.getMaterial(block.getKeyInBlockRegistry().getPath().toUpperCase(Locale.ROOT))); // Fiddle - cache registry keys as fields - use instead of lookup - block
         }
 
         for (Item item : BuiltInRegistries.ITEM) {
