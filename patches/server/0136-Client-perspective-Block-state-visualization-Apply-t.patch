From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Mon, 1 Jan 2024 19:07:41 +0100
Subject: [PATCH] Client perspective - Block state visualization - Apply to
 chunk packets - Call setup for all blocks in chunk packet

Provides the implementation to call the visualization setups for all blocks in a chunk packet being sent to a client.
This does not add any invocations of this implementation yet: that is added in the "Client perspective - Block state visualization - Apply to chunk packets - Visualization step after anti-x-ray" patch.

License: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)
Fiddle - https://fiddlemc.org

diff --git a/src/main/java/com/destroystokyo/paper/antixray/BitStorageWriter.java b/src/main/java/com/destroystokyo/paper/antixray/BitStorageWriter.java
index e4540ea278f2dc871cb6a3cb8897559bfd65e134..641d650c5638b660bb4f1eb7e7d5d6b7ccf0c80f 100644
--- a/src/main/java/com/destroystokyo/paper/antixray/BitStorageWriter.java
+++ b/src/main/java/com/destroystokyo/paper/antixray/BitStorageWriter.java
@@ -10,6 +10,12 @@ public final class BitStorageWriter {
     private long current;
     private boolean dirty;
 
+    // Fiddle start - client perspective - block state visualization - apply to chunk packets - call setup for all blocks in chunk packet
+    public int getIndex() {
+        return this.longInBufferIndex;
+    }
+    // Fiddle end - client perspective - block state visualization - apply to chunk packets - call setup for all blocks in chunk packet
+
     public void setBuffer(byte[] buffer) {
         this.buffer = buffer;
     }
diff --git a/src/main/java/com/destroystokyo/paper/antixray/ChunkPacketInfo.java b/src/main/java/com/destroystokyo/paper/antixray/ChunkPacketInfo.java
index 31dfc95700dbfe0740b2ec13c16cbb867144efeb..631992ffc7a8409000c5401ae0db80b361a1c394 100644
--- a/src/main/java/com/destroystokyo/paper/antixray/ChunkPacketInfo.java
+++ b/src/main/java/com/destroystokyo/paper/antixray/ChunkPacketInfo.java
@@ -11,6 +11,11 @@ public sealed abstract class ChunkPacketInfo<T> permits ChunkPacketInfoAntiXray
     private final int[] bits;
     private final Object[] palettes;
     private final int[] indexes;
+    // Fiddle start - client perspective - block state visualization - apply to chunk packets - call setup for all blocks in chunk packet - store more indices in ChunkPacketInfo
+    private final int[] nonEmptyBlockCountIndices;
+    private final int[] biomesInclusiveStartIndices;
+    private final int[] biomesExclusiveEndIndices;
+    // Fiddle end - client perspective - block state visualization - apply to chunk packets - call setup for all blocks in chunk packet - store more indices in ChunkPacketInfo
     private final Object[][] presetValues;
     private byte[] buffer;
 
@@ -21,6 +26,11 @@ public sealed abstract class ChunkPacketInfo<T> permits ChunkPacketInfoAntiXray
         bits = new int[sections];
         palettes = new Object[sections];
         indexes = new int[sections];
+        // Fiddle start - client perspective - block state visualization - apply to chunk packets - call setup for all blocks in chunk packet - store more indices in ChunkPacketInfo
+        this.nonEmptyBlockCountIndices = new int[sections];
+        this.biomesInclusiveStartIndices = new int[sections];
+        this.biomesExclusiveEndIndices = new int[sections];
+        // Fiddle end - client perspective - block state visualization - apply to chunk packets - call setup for all blocks in chunk packet - store more indices in ChunkPacketInfo
         presetValues = new Object[sections][];
     }
 
@@ -65,6 +75,32 @@ public sealed abstract class ChunkPacketInfo<T> permits ChunkPacketInfoAntiXray
         indexes[chunkSectionIndex] = index;
     }
 
+    // Fiddle start - client perspective - block state visualization - apply to chunk packets - call setup for all blocks in chunk packet - store more indices in ChunkPacketInfo
+    public int getNonEmptyBlockCountIndex(int chunkSectionIndex) {
+        return this.nonEmptyBlockCountIndices[chunkSectionIndex];
+    }
+
+    public void setNonEmptyBlockCountIndex(int chunkSectionIndex, int index) {
+        this.nonEmptyBlockCountIndices[chunkSectionIndex] = index;
+    }
+
+    public int getBiomesInclusiveStartIndex(int chunkSectionIndex) {
+        return this.biomesInclusiveStartIndices[chunkSectionIndex];
+    }
+
+    public void setBiomesInclusiveStartIndex(int chunkSectionIndex, int index) {
+        this.biomesInclusiveStartIndices[chunkSectionIndex] = index;
+    }
+
+    public int getBiomesExclusiveEndIndex(int chunkSectionIndex) {
+        return this.biomesExclusiveEndIndices[chunkSectionIndex];
+    }
+
+    public void setBiomesExclusiveEndIndex(int chunkSectionIndex, int index) {
+        this.biomesExclusiveEndIndices[chunkSectionIndex] = index;
+    }
+    // Fiddle end - client perspective - block state visualization - apply to chunk packets - call setup for all blocks in chunk packet - store more indices in ChunkPacketInfo
+
     @SuppressWarnings("unchecked")
     public T[] getPresetValues(int chunkSectionIndex) {
         return (T[]) presetValues[chunkSectionIndex];
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelChunkPacketData.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelChunkPacketData.java
index b05afa6344d3d68d8aadd2cb1d5a72ef049d6f9d..a4229dd69906cdf8c6a8b8885df0e3424a22de3e 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelChunkPacketData.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelChunkPacketData.java
@@ -28,7 +28,7 @@ public class ClientboundLevelChunkPacketData {
     private final ClientboundLevelChunkWithLightPacket containingPacket;
     // Fiddle end - client perspective - block state visualization - apply to chunk packets - ClientboundLevelChunkPacketData has a reference to its ClientboundLevelChunkWithLightPacket
     private final CompoundTag heightmaps;
-    private final byte[] buffer;
+    public byte[] buffer; // Fiddle - client perspective - block state visualization - apply to chunk packets - call setup for all blocks in chunk packet - private -> public, final -> non-final
     public int bufferUsedLength; // Fiddle - client perspective - block state visualization - apply to chunk packets - chunk packet data can use buffer partially
     private final List<ClientboundLevelChunkPacketData.BlockEntityInfo> blockEntitiesData;
     // Paper start - Handle oversized block entities in chunks
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelChunkWithLightPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelChunkWithLightPacket.java
index a02c0217fc221684d6b2a09b3a408a511f8cee19..aa1e848ae52d3426c3077ce3741f62ae81c8e25b 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelChunkWithLightPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelChunkWithLightPacket.java
@@ -40,7 +40,7 @@ public class ClientboundLevelChunkWithLightPacket extends org.fiddlemc.fiddle.pa
         this.x = chunkPos.x;
         this.z = chunkPos.z;
         // Fiddle start - client perspective - block state visualization - apply to chunk packets - every ChunkPacketInfo is ChunkPacketInfoAntiXray
-        boolean isChunkPacketInfoNeeded = modifyBlocks;
+        boolean isChunkPacketInfoNeeded = true/*We would need the perspective here to say whether it needs visualization*/; // Fiddle - client perspective - block state visualization - apply to chunk packets - every ChunkPacketInfo is ChunkPacketInfoAntiXray - no effective changes to this field except the type is inferred // Fiddle - client perspective - block state visualization - apply to chunk packets - call setup for all blocks in chunk packet - also create ChunkPacketInfo if needed for visualization
         var chunkPacketInfo = isChunkPacketInfoNeeded ? chunk.getLevel().chunkPacketBlockController.getChunkPacketInfo(this, chunk, modifyBlocks) : null; // No effective changes to this field except the type is inferred
         // Fiddle start - block state visualization - apply to chunk packets - store ChunkPacketInfo and chunk details
         this.chunkPacketInfo = chunkPacketInfo;
diff --git a/src/main/java/net/minecraft/util/SimpleBitStorage.java b/src/main/java/net/minecraft/util/SimpleBitStorage.java
index 453c1d7e01970fd817d27f59c3b00ffc70e8ca0c..2ffada355965b1121a55493f9291fa2fed069ac6 100644
--- a/src/main/java/net/minecraft/util/SimpleBitStorage.java
+++ b/src/main/java/net/minecraft/util/SimpleBitStorage.java
@@ -72,6 +72,16 @@ public class SimpleBitStorage implements BitStorage {
 
     }
 
+    // Fiddle start - client perspective - block state visualization - apply to chunk packets - call setup for all blocks in chunk packet - packet buffer length calculation
+    public static int getValuesPerLong(int elementBits) {
+        return 64 / elementBits;
+    }
+
+    public static int getLongArrayLength(int numberOfCompactedValuesInLongArray, int valuesPerLong) {
+        return (numberOfCompactedValuesInLongArray + valuesPerLong - 1) / valuesPerLong;
+    }
+    // Fiddle end - client perspective - block state visualization - apply to chunk packets - call setup for all blocks in chunk packet - packet buffer length calculation
+
     private int cellIndex(int index) {
         //long l = Integer.toUnsignedLong(this.divideMul); // Paper - Perf: Optimize SimpleBitStorage
         //long m = Integer.toUnsignedLong(this.divideAdd); // Paper - Perf: Optimize SimpleBitStorage
diff --git a/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java b/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java
index ed35745d72e5b5d615d2b64e98388ca96be98452..9ff3e44ea85309196aa00e1496768cd60f428df6 100644
--- a/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java
+++ b/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java
@@ -200,9 +200,14 @@ public class LevelChunkSection {
 
     // Paper start - Anti-Xray - Add chunk packet info
     public void write(FriendlyByteBuf buf, @org.jetbrains.annotations.Nullable com.destroystokyo.paper.antixray.ChunkPacketInfoAntiXray chunkPacketInfo, int chunkSectionIndex) { // Fiddle - client perspective - block state visualization - apply to chunk packets - every ChunkPacketInfo is ChunkPacketInfoAntiXray - the parameter type is always ChunkPacketInfoAntiXray, and it is filled with data by this method if it is non-null
+        // Fiddle start - client perspective - block state visualization - apply to chunk packets - call setup for all blocks in chunk packet - store more indices in ChunkPacketInfo
+        chunkPacketInfo.setNonEmptyBlockCountIndex(chunkSectionIndex, buf.writerIndex());
+        // Fiddle end - client perspective - block state visualization - apply to chunk packets - call setup for all blocks in chunk packet - store more indices in ChunkPacketInfo
         buf.writeShort(this.nonEmptyBlockCount);
         this.states.write(buf, chunkPacketInfo, chunkSectionIndex);
+        chunkPacketInfo.setBiomesInclusiveStartIndex(chunkSectionIndex, buf.writerIndex()); // Fiddle - client perspective - block state visualization - apply to chunk packets - call setup for all blocks in chunk packet - store more indices in ChunkPacketInfo
         this.biomes.write(buf, null, chunkSectionIndex);
+        chunkPacketInfo.setBiomesExclusiveEndIndex(chunkSectionIndex, buf.writerIndex()); // Fiddle - client perspective - block state visualization - apply to chunk packets - call setup for all blocks in chunk packet - store more indices in ChunkPacketInfo
         // Paper end
     }
 
diff --git a/src/main/java/org/fiddlemc/fiddle/packet/block/SetUpVisualizationForChunkPackets.java b/src/main/java/org/fiddlemc/fiddle/packet/block/SetUpVisualizationForChunkPackets.java
new file mode 100644
index 0000000000000000000000000000000000000000..7419f8233c8d1c2611d355f56aabf1702ee2061b
--- /dev/null
+++ b/src/main/java/org/fiddlemc/fiddle/packet/block/SetUpVisualizationForChunkPackets.java
@@ -0,0 +1,311 @@
+// Fiddle - client perspective - block state visualization - apply to chunk packets - call setup for all blocks in chunk packet
+
+package org.fiddlemc.fiddle.packet.block;
+
+import com.destroystokyo.paper.antixray.BitStorageReader;
+import com.destroystokyo.paper.antixray.BitStorageWriter;
+import io.netty.buffer.Unpooled;
+import it.unimi.dsi.fastutil.ints.Int2IntMap;
+import it.unimi.dsi.fastutil.ints.Int2IntOpenHashMap;
+import it.unimi.dsi.fastutil.ints.IntArrayList;
+import it.unimi.dsi.fastutil.ints.IntOpenHashSet;
+import net.minecraft.core.SectionPos;
+import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.network.VarInt;
+import net.minecraft.network.protocol.game.ClientboundLevelChunkWithLightPacket;
+import net.minecraft.util.Mth;
+import net.minecraft.util.SimpleBitStorage;
+import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.chunk.LevelChunkSection;
+import net.minecraft.world.level.chunk.PalettedContainer;
+
+import java.util.Arrays;
+
+/**
+ * A class that statically provides the {@link #setUpAndModifyBuffer} functionality.
+ */
+public final class SetUpVisualizationForChunkPackets {
+
+    private SetUpVisualizationForChunkPackets() {
+        throw new RuntimeException();
+    }
+
+    /**
+     * Utility function to compute the maximum serialized size of a {@link PalettedContainer}
+     * for the given parameters.
+     * <p>
+     *     This implementation is based on the implementation of {@link PalettedContainer#getSerializedSize()}.
+     * </p>
+     */
+    private static int computeMaxSerializedPalettedContainerSize(int storageEntries) {
+        /*
+        We assume (which is the worst case) that every storage entry has a different id in the palette,
+        in which case the maximum bits per entry would be used. In turn, the maximum bits per entry is 31
+        (since ids are nonnegative signed integers). In that case, 2 31-bit values fit into the 64-bit longs
+        in the storage array, meaning the storage array length is half the number of entries.
+         */
+        int paletteSerializedSize = 0; // Based on GlobalPalette#getSerializedSize
+        int storageArrayLength = storageEntries / 2;
+        return 1 + paletteSerializedSize + VarInt.getByteSize(storageArrayLength) + storageArrayLength * 8;
+    }
+
+    /**
+     * The maximum {@linkplain LevelChunkSection#getSerializedSize serialized size}
+     * (in bytes) of a {@link LevelChunkSection}.
+     * <p>
+     *     This value is based on the implementation of {@link LevelChunkSection#getSerializedSize()}
+     * </p>
+     */
+    private static final int maxSerializedSectionSize;
+    static {
+        int maxStatesSize = computeMaxSerializedPalettedContainerSize(4096);
+        int maxBiomesSize = computeMaxSerializedPalettedContainerSize(64);
+        maxSerializedSectionSize = 2 + maxStatesSize + maxBiomesSize;
+    }
+
+    /**
+     * The length of buffers in {@link #reusableBufferCache}, based on the number of sections in the chunk packet.
+     */
+    private static Int2IntMap reusableBufferLengthCache = new Int2IntOpenHashMap();
+
+    /**
+     * A {@link ThreadLocal} of reusable buffers, where each buffer is
+     * {@linkplain #reusableBufferLengthCache large enough} to hold any potential chunk data.
+     */
+    private static ThreadLocal<byte[]> reusableBufferCache = new ThreadLocal<>();
+
+    /**
+     * @return A buffer that is reusable, but unique to the current thread.
+     */
+    private static byte[] getReusableBuffer(int sectionsCount) {
+        // Get the desired buffer length
+        int minimumBufferLength = reusableBufferLengthCache.computeIfAbsent(sectionsCount, key -> key * maxSerializedSectionSize);
+        var buffer = reusableBufferCache.get();
+        if (buffer == null || buffer.length < minimumBufferLength) {
+            buffer = new byte[minimumBufferLength];
+            reusableBufferCache.set(buffer);
+        }
+        return buffer;
+    }
+
+    /**
+     * Sets up the visualization for the given chunk packet.
+     */
+    public static void setUpAndModifyBuffer(ClientboundLevelChunkWithLightPacket packet) {
+
+
+        // Get some context details that can be dereferenced after this, since they will be no longer needed
+        var chunkPacketInfo = packet.chunkPacketInfo;
+        var chunkPos = packet.chunkPos;
+        var level = packet.level;
+        packet.chunkPacketInfo = null;
+        packet.level = null;
+
+        // No replacement is necessary if the client understands all blocks//TODO make sure, in this case, that the buffer is already written using ids that are interpretable by the client rather than our own server-side ids//TODO this will require making getting the registry ids possible per player instead of per perspective
+        var clientPerspective = packet.getExplicitTargetClientPerspective();
+        /*
+        Note: if we wish to allow a pack to specify a visualization for a block that is shown even to clients
+        that understand the blocks, we should try to pre-send that visualization to the client so they can render
+        it appropriately themselves instead of performing the entire regular server-side visualization process.
+         */
+        if (clientPerspective.understandsServerSideItemsAndBlocks) {
+            return;
+        }
+        var clientInterpretableRegistry = clientPerspective.getPacketBlockStateIdMap();
+
+        // Get some more context details
+        var player = packet.getExplicitTargetClientConnection().getPlayer();
+        var chunkData = packet.getChunkData();
+        int sectionsCount = packet.sectionsCount;
+
+        // Get the old buffer and create appropriate readers
+        var oldBuffer = chunkPacketInfo.getBuffer();
+        var wrappedOldBuffer = Unpooled.wrappedBuffer(oldBuffer);
+        wrappedOldBuffer.writerIndex(oldBuffer.length);
+        wrappedOldBuffer.readerIndex(0);
+        var oldBufferByteBuf = new FriendlyByteBuf(wrappedOldBuffer);
+        var oldBitStorageReader = new BitStorageReader();
+        oldBitStorageReader.setBuffer(oldBuffer);
+
+        // Get a buffer to write to and create appropriate writers
+        var newBuffer = getReusableBuffer(sectionsCount);
+        var wrappedNewBuffer = Unpooled.wrappedBuffer(newBuffer);
+        wrappedNewBuffer.writerIndex(0);
+        var newBufferByteBuf = new FriendlyByteBuf(wrappedNewBuffer);
+        var newBitStorageWriter = new BitStorageWriter();
+        newBitStorageWriter.setBuffer(newBuffer);
+
+        // Reset the reader indices
+        oldBufferByteBuf.readerIndex(0);
+        oldBitStorageReader.setIndex(0);
+
+        // Translate every section
+        for (int sectionI = 0; sectionI < sectionsCount; sectionI++) {
+
+            // Get the coordinates within the level
+            int sectionY = level.getSectionYFromSectionIndex(sectionI);
+            var sectionPos = SectionPos.of(chunkPos, sectionY);
+
+            // Store the nonEmptyBlockCount index to be written to later when we know the right value, and skip it
+            int newNonEmptyBlockCountIndex = newBufferByteBuf.writerIndex();
+            newBufferByteBuf.writerIndex(newBufferByteBuf.writerIndex() + 2);
+
+            // Read the old nonEmptyBlockCount as the new nonEmptyBlockCount, to be updated on the go
+            oldBufferByteBuf.readerIndex(chunkPacketInfo.getNonEmptyBlockCountIndex(sectionI));
+            var newNonEmptyBlockCount = oldBufferByteBuf.readShort();
+
+            // Get the old palette
+            var palette = chunkPacketInfo.getPalette(sectionI);
+
+            // Prepare to read the old states
+            oldBitStorageReader.setIndex(chunkPacketInfo.getIndex(sectionI));
+            oldBitStorageReader.setBits(chunkPacketInfo.getBits(sectionI));
+
+            // Determine the new palette and states
+            var newPaletteStatesGlobalIdSet = new IntOpenHashSet(palette.getSize());
+            var newPaletteStatesGlobalIdList = new IntArrayList(palette.getSize());
+            var newStateGlobalIds = new int[4096];
+            for (int sectionBlockI = 0; sectionBlockI < 4096; sectionBlockI++) {
+
+                // Get the coordinates within the level
+                int x = sectionPos.getX() + sectionBlockI & 0x00F;
+                int z = sectionPos.getY() + (sectionBlockI & 0x0F0) >> 4;
+                int y = sectionPos.getZ() + (sectionBlockI * 0xF00) >> 8;
+
+                // Compute the new state
+                var oldState = palette.valueFor(oldBitStorageReader.read());
+                BlockState newState;
+                var visualizationSetupper = oldState.visualizationSetupper;
+                if (visualizationSetupper == null) {
+                    newState = oldState;
+                } else {
+                    newState = visualizationSetupper.setUp(level, x, y, z, oldState, player, clientPerspective, BlockStateVisualizationSetupper.BlockStateVisualizationPurpose.PHYSICAL);
+                }
+                int newStateGlobalId = clientInterpretableRegistry.getId(newState);
+
+                // Add the new state to the palette
+                if (newPaletteStatesGlobalIdSet.add(newStateGlobalId)) {
+                    newPaletteStatesGlobalIdList.add(newStateGlobalId);
+                }
+
+                // Update the nonEmptyBlockCount
+                if (oldState.isAir()) {
+                    newNonEmptyBlockCount++;
+                }
+                if (newState.isAir()) {
+                    newNonEmptyBlockCount--;
+                }
+
+                // Return the new state for this block
+                newStateGlobalIds[sectionBlockI] = newStateGlobalId;
+
+            }
+            var newPaletteStatesCount = newPaletteStatesGlobalIdList.size();
+
+            // Compute the number of necessary bits
+            int necessaryBits = newPaletteStatesCount == 0 ? 0 : Mth.ceillog2(newPaletteStatesCount);
+
+            /*
+            Compute the number of used bits per value,
+            based on PalettedContainer.Strategy#SECTION_STATES and each corresponding Palette#getSerializedSize.
+             */
+            int usedBits;
+            if (necessaryBits == 0) {
+                usedBits = 0;
+            } else if (necessaryBits <= 4) {
+                usedBits = 4;
+            } else if (necessaryBits <= 8) {
+                usedBits = necessaryBits;
+            } else {
+                usedBits = Mth.ceillog2(clientInterpretableRegistry.size());
+            }
+
+            // Set the number of used bits on the bit writer
+            newBitStorageWriter.setBits(usedBits);
+
+            // Write the number of used bits
+            newBufferByteBuf.writeByte(usedBits);
+
+            // Write the paletted container's palette (based on each Palette#write)
+            if (usedBits == 0) {
+                // Based on SingleValuePalette#write: write the palette's single value
+                newBufferByteBuf.writeVarInt(newPaletteStatesGlobalIdList.getInt(0));
+            } else if (usedBits <= 8) {
+                // Based on LinearPalette#write and HashMapPalette#write: write the palette's global ids
+                newBufferByteBuf.writeVarInt(newPaletteStatesCount);
+                for (int index = 0; index < newPaletteStatesGlobalIdList.size(); index++) {
+                    int globalId = newPaletteStatesGlobalIdList.getInt(index);
+                    newBufferByteBuf.writeVarInt(globalId);
+                }
+            } else {
+                // Based on GlobalPalette#write: nothing needs to happen
+            }
+
+            // Write the block states, based on PalettedContainer#write
+            if (usedBits == 0) {
+                // The states array is empty, so the array length is 0
+                newBufferByteBuf.writeVarInt(0);
+            } else {
+                // Compute the long array length and write it to the buffer
+                int statesLongArrayLength = SimpleBitStorage.getLongArrayLength(4096, SimpleBitStorage.getValuesPerLong(usedBits));
+                newBufferByteBuf.writeVarInt(statesLongArrayLength);
+                // Set the bit storage writer index correctly
+                newBitStorageWriter.setIndex(newBufferByteBuf.writerIndex());
+                // Compute the index where the long array will end
+                int endIndex = newBitStorageWriter.getIndex() + statesLongArrayLength * 8;
+                // Write the state ids
+                if (usedBits <= 8) {
+                    // Compute the palette index mapping
+                    var paletteIndexByGlobalId = new Int2IntOpenHashMap(newPaletteStatesCount);
+                    for (int index = 0; index < newPaletteStatesGlobalIdList.size(); index++) {
+                        int globalId = newPaletteStatesGlobalIdList.getInt(index);
+                        paletteIndexByGlobalId.put(globalId, index);
+                    }
+                    // Write the corresponding palette index for each state global id
+                    for (int newStateGlobalId : newStateGlobalIds) {
+                        newBitStorageWriter.write(paletteIndexByGlobalId.get(newStateGlobalId));
+                    }
+                } else {
+                    // Write the raw global ids
+                    for (int newStateGlobalId : newStateGlobalIds) {
+                        newBitStorageWriter.write(newStateGlobalId);
+                    }
+                }
+                newBitStorageWriter.flush();
+                // Set the index to behind the long array
+                newBufferByteBuf.writerIndex(endIndex);
+            }
+
+            // Write the nonEmptyBlockCount now
+            int indexBeforehand = newBufferByteBuf.writerIndex();
+            // Move to the index where the nonEmptyBlockCount should go
+            newBufferByteBuf.writerIndex(newNonEmptyBlockCountIndex);
+            newBufferByteBuf.writeShort(newNonEmptyBlockCount);
+            // Set the index back to where we were
+            newBufferByteBuf.writerIndex(indexBeforehand);
+
+            // Copy the biomes over
+            newBufferByteBuf.writeBytes(
+                oldBuffer,
+                chunkPacketInfo.getBiomesInclusiveStartIndex(sectionI),
+                chunkPacketInfo.getBiomesExclusiveEndIndex(sectionI) - chunkPacketInfo.getBiomesInclusiveStartIndex(sectionI)
+            );
+
+        }
+
+        // Create an actual new buffer: either re-use the old buffer if the new data fits, or construct a new one
+        var newBufferUsedLength = newBufferByteBuf.writerIndex();
+        if (newBufferUsedLength <= oldBuffer.length) {
+            // Copy the data to the old buffer
+            System.arraycopy(newBuffer, 0, chunkData.buffer, 0, newBufferUsedLength);
+        } else {
+            // Replace the buffer with a newly constructed one
+            chunkData.buffer = Arrays.copyOfRange(newBuffer, 0, newBufferUsedLength);
+        }
+        // Update the used length
+        chunkData.bufferUsedLength = newBufferUsedLength;
+        // We dereferenced the packet's ChunkPacketInfo earlier, so we can't update its buffer here, but it's not needed
+
+    }
+
+}
