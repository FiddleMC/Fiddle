From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Thu, 4 Jan 2024 17:21:44 +0100
Subject: [PATCH] Client perspective - Level event data value replacements -
 Store connection explicitly in level event packets

Makes instances of `ClientboundLevelEventPacket` potentially bound to a particular explicit target connection.
This is done by making them a subclass of `CloningPacketWithExplicitTargetClientConnection`.

Note that the level event packets can still be sent to multiple target clients.
This is okay, because the packet is cloned when adapting for a client.
This is notwithstanding the possibility in a subsequent patch for `ClientboundLevelEventPacket` to implement `canSkipCloning` to skip the cloning if it is unnecessary.

License: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)
Fiddle - https://fiddlemc.org

diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelEventPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelEventPacket.java
index 7b822a682d45aacffa93862452e9590a8628aa65..b3fb1241fe5bc228bedd12469f05f03ec5f19169 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelEventPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelEventPacket.java
@@ -4,13 +4,14 @@ import net.minecraft.core.BlockPos;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.Packet;
 
-public class ClientboundLevelEventPacket implements Packet<ClientGamePacketListener> {
+public class ClientboundLevelEventPacket extends org.fiddlemc.fiddle.packet.CloningPacketWithExplicitTargetClientConnection<ClientGamePacketListener> { // Fiddle - client perspective - level event data value replacements - store connection explicitly
     private final int type;
     private final BlockPos pos;
     private final int data;
     private final boolean globalEvent;
 
     public ClientboundLevelEventPacket(int eventId, BlockPos pos, int data, boolean global) {
+        super(); // Fiddle - client perspective - level event data value replacements - store connection explicitly
         this.type = eventId;
         this.pos = pos.immutable();
         this.data = data;
@@ -18,12 +19,20 @@ public class ClientboundLevelEventPacket implements Packet<ClientGamePacketListe
     }
 
     public ClientboundLevelEventPacket(FriendlyByteBuf buf) {
+        super(); // Fiddle - client perspective - level event data value replacements - store connection explicitly
         this.type = buf.readInt();
         this.pos = buf.readBlockPos();
         this.data = buf.readInt();
         this.globalEvent = buf.readBoolean();
     }
 
+    // Fiddle start - client perspective - level event data value replacements - store connection explicitly
+    @Override
+    final protected ClientboundLevelEventPacket makeClone() {
+        return new ClientboundLevelEventPacket(this.type, this.pos, this.data, this.globalEvent);
+    }
+    // Fiddle end - client perspective - level event data value replacements - store connection explicitly
+
     @Override
     public void write(FriendlyByteBuf buf) {
         buf.writeInt(this.type);
