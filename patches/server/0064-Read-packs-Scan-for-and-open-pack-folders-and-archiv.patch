From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Sat, 6 May 2023 11:52:47 +0200
Subject: [PATCH] Read packs - Scan for and open pack folders and archives

License: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)
Fiddle - https://fiddlemc.org

diff --git a/src/main/java/net/minecraft/server/Main.java b/src/main/java/net/minecraft/server/Main.java
index b605fdd91a3f6ee204ab7e710effff2e6a798c63..57a1cae73e8fa9e01c4852037596e5bae9ea206d 100644
--- a/src/main/java/net/minecraft/server/Main.java
+++ b/src/main/java/net/minecraft/server/Main.java
@@ -145,6 +145,8 @@ public class Main {
             }
             // Fiddle end - confirm Fiddle permanence
 
+            org.fiddlemc.fiddle.pack.read.PackScanner.scanForAndOpenPacks(optionset); // Fiddle - read packs - scan for packs
+
             io.papermc.paper.plugin.PluginInitializerManager.load(optionset); // Paper
             Bootstrap.bootStrap();
             Bootstrap.validate();
@@ -422,6 +424,15 @@ public class Main {
             }
 
             org.fiddlemc.fiddle.pack.read.StartupPackLoadPhase.endStartupLoadPhase(); // Fiddle - read packs - startup load phase - end after initial read
+            // Fiddle start - read packs - close packs after initial read
+            for (var pack : org.fiddlemc.fiddle.pack.FiddlePacks.getPacks()) {
+                try {
+                    pack.filesProvider().closeHandlesAndClearCache();
+                } catch (Exception e) {
+                    throw new RuntimeException("Exception while closing a pack that was being read", e);
+                }
+            }
+            // Fiddle end - read packs - close packs after initial read
 
             /*
             IRegistryCustom.Dimension iregistrycustom_dimension = worldstem.registries().compositeAccess();
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index 8a9b68705bfe61dbcdac91d64a0ec390b42c02f7..75ba88b5a064e9196dc4a881c62a16413c22ce0c 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -18,6 +18,13 @@ public class Main {
     public static boolean useJline = true;
     public static boolean useConsole = true;
 
+    // Fiddle start - read packs - scan for packs - command line arguments
+    public static final String fiddlePacksFolderNameOptionKey = "fiddle-packs";
+    private static final String defaultFiddlePacksFolderName = "fiddle_packs";
+    public static final String pluginsFolderNameOptionKey = "plugins";
+    private static final String defaultPluginsFolderName = "plugins";
+    // Fiddle end - read packs - scan for packs - command line arguments
+
     // Paper start - Reset loggers after shutdown
     static {
         System.setProperty("java.util.logging.manager", "io.papermc.paper.log.CustomLogManager");
@@ -43,12 +50,20 @@ public class Main {
                         .defaultsTo(new File("server.properties"))
                         .describedAs("Properties file");
 
-                this.acceptsAll(Main.asList("P", "plugins"), "Plugin directory to use")
+                this.acceptsAll(Main.asList("P", pluginsFolderNameOptionKey), "Plugin directory to use") // Fiddle - read packs - scan for packs - command line arguments
                         .withRequiredArg()
                         .ofType(File.class)
-                        .defaultsTo(new File("plugins"))
+                        .defaultsTo(new File(defaultPluginsFolderName)) // Fiddle - read packs - scan for packs - command line arguments
                         .describedAs("Plugin directory");
 
+                // Fiddle start - read packs - scan for packs - command line arguments
+                acceptsAll(Main.asList(fiddlePacksFolderNameOptionKey), "Fiddle pack directory to use")
+                    .withRequiredArg()
+                    .ofType(File.class)
+                    .defaultsTo(new File(defaultFiddlePacksFolderName))
+                    .describedAs("Fiddle pack directory");
+                // Fiddle end - read packs - scan for packs - command line arguments
+
                 this.acceptsAll(Main.asList("h", "host", "server-ip"), "Host to listen on")
                         .withRequiredArg()
                         .ofType(String.class)
diff --git a/src/main/java/org/fiddlemc/fiddle/pack/read/PackScanner.java b/src/main/java/org/fiddlemc/fiddle/pack/read/PackScanner.java
new file mode 100644
index 0000000000000000000000000000000000000000..b5f2ad47bfb87a95d8e965ad3c3dce18a2af5659
--- /dev/null
+++ b/src/main/java/org/fiddlemc/fiddle/pack/read/PackScanner.java
@@ -0,0 +1,125 @@
+// Fiddle - read packs - scan for packs
+
+package org.fiddlemc.fiddle.pack.read;
+
+import com.github.junrar.Junrar;
+import com.google.common.collect.Streams;
+import com.google.gson.JsonElement;
+import com.google.gson.JsonParser;
+import com.mojang.logging.LogUtils;
+import joptsimple.OptionSet;
+import org.bukkit.craftbukkit.Main;
+import org.fiddlemc.fiddle.configuration.FiddleGlobalConfiguration;
+import org.fiddlemc.fiddle.pack.FiddlePack;
+import org.fiddlemc.fiddle.pack.FiddlePackMeta;
+import org.fiddlemc.fiddle.pack.FiddlePacks;
+import org.fiddlemc.fiddle.pack.exception.PackException;
+import org.fiddlemc.fiddle.pack.read.filesprovider.RegularFileInPack;
+import org.fiddlemc.fiddle.pack.read.filesprovider.archive.ArchiveFileFiddlePackFilesProvider;
+import org.fiddlemc.fiddle.pack.read.filesprovider.directory.DirectoryFiddlePackFilesProvider;
+import org.fiddlemc.fiddle.pack.read.filesprovider.FiddlePackFilesProvider;
+import org.fiddlemc.fiddle.pack.read.meta.FiddlePackMetaParser;
+import org.jetbrains.annotations.Nullable;
+import org.slf4j.Logger;
+
+import java.io.File;
+import java.io.IOException;
+import java.util.*;
+
+/**
+ * A singleton providing the {@link #scanForAndOpenPacks} method.
+ */
+public final class PackScanner {
+
+    private static final String packMetaFilename = "pack.mcmeta";
+    // Accept .jar files in the packs folder too (to use them as packs without the plugin code, which is useful if the code has broken after an update)
+    private static final String[] javaExtractableArchiveExtensions = {"zip", "jar", "gz"};
+    private static final String[] rarExtractableArchiveExtensions = {"rar"};
+
+    private static final Logger LOGGER = LogUtils.getClassLogger();
+
+    private PackScanner() {
+        throw new RuntimeException();
+    }
+
+    /**
+     * Scans for packs in the appropriate places, reads their meta,
+     * and adds packs with valid meta to {@link FiddlePacks}.
+     */
+    public static void scanForAndOpenPacks(OptionSet optionSet) {
+        for (boolean checkingPlugins : new boolean[] {false, true}) {
+            File folder = (File) optionSet.valueOf(checkingPlugins ? Main.pluginsFolderNameOptionKey : Main.fiddlePacksFolderNameOptionKey);
+            if (folder.exists() && folder.isDirectory()) {
+                for (File file : Objects.requireNonNull(folder.listFiles())) {
+                    String lowerCaseName = file.getName().toLowerCase(Locale.ROOT);
+                    if (file.isDirectory() || Streams.concat(Arrays.stream(javaExtractableArchiveExtensions), Arrays.stream(rarExtractableArchiveExtensions)).anyMatch(extension -> lowerCaseName.endsWith("." + extension))) {
+                        scanForAndOpenPack(file);
+                    }
+                }
+            } else if (!checkingPlugins) {
+                //noinspection ResultOfMethodCallIgnored
+                folder.mkdir();
+            }
+        }
+        FiddlePacks.freeze();
+    }
+
+    /**
+     * Scans the given file, which may or may not be a pack, as part of {@link #scanForAndOpenPacks(OptionSet)}.
+     */
+    private static void scanForAndOpenPack(File packFile) {
+        try {
+            FiddlePackFilesProvider filesProvider;
+            if (packFile.isDirectory()) {
+                filesProvider = new DirectoryFiddlePackFilesProvider(packFile);
+            } else {
+                boolean isRar = Arrays.stream(rarExtractableArchiveExtensions).anyMatch(extension -> packFile.getName().toLowerCase().endsWith("." + extension));
+                if (!SevenZipSupport.is7ZipAvailable() && isRar) {
+                    // Extract the rar into a temporary folder, then open that as a directory
+                    File temporaryDirectory = File.createTempFile("fepr.",".unrar");
+                    if(!(temporaryDirectory.delete())){
+                        throw new IOException("Could not delete temporary file/directory: " + temporaryDirectory.getPath());
+                    }
+                    if(!(temporaryDirectory.mkdir())){
+                        throw new IOException("Could not create temporary directory: " + temporaryDirectory.getPath());
+                    }
+                    Junrar.extract(packFile, temporaryDirectory);
+                    filesProvider = new DirectoryFiddlePackFilesProvider(temporaryDirectory, packFile);
+                } else {
+                    filesProvider = new ArchiveFileFiddlePackFilesProvider(packFile, isRar);
+                }
+            }
+            @Nullable RegularFileInPack packMetaFile = filesProvider.getTopLevelRegularFile(packMetaFilename);
+            if (packMetaFile != null) {
+                String packMetaFileContent;
+                try {
+                    packMetaFileContent = packMetaFile.getString(false);
+                } catch (Exception e) {
+                    LOGGER.warn("An exception occurred while opening '" + packMetaFilename + "' in '" + packFile.getPath() + "'. The pack will not be loaded.", e);
+                    return;
+                }
+                JsonElement json;
+                try {
+                    json = JsonParser.parseString(packMetaFileContent);
+                } catch (Exception e) {LOGGER.warn("An exception occurred while parsing '" + packMetaFilename + "' in '" + packFile.getPath() + "' as JSON. The pack will not be loaded.", e);
+                    LOGGER.warn("'" + packMetaFilename + "' in '" + packFile.getPath() + "' is not valid JSON. The pack will not be loaded.", e);
+                    return;
+                }
+                FiddlePackMeta meta;
+                try {
+                    meta = FiddlePackMetaParser.fromJson(json);
+                    LOGGER.info(packFile.getPath() + " may be a Fiddle pack because it has a valid " + packMetaFilename);
+                    FiddlePack pack = new FiddlePack(filesProvider, FiddleGlobalConfiguration.get().packCreatorSettings.enabled && (!FiddleGlobalConfiguration.get().packCreatorSettings.onlyForFolderPacks || filesProvider instanceof DirectoryFiddlePackFilesProvider), meta);
+                    FiddlePacks.addPack(pack);
+                } catch (PackException e) {
+                    LOGGER.warn("A problem occurred while parsing '" + packMetaFilename + "' in '" + packFile.getPath() + "': " + e.getMessage() + (e.getMessage().endsWith(".") || e.getMessage().endsWith("!") || e.getMessage().endsWith("?") ? "" : ".") + " The pack will not be loaded.", e);
+                } catch (Exception e) {
+                    LOGGER.warn("An exception occurred while reading '" + packMetaFilename + "' in '" + packFile.getPath() + "'. The pack will not be loaded.", e);
+                }
+            }
+        } catch (Exception e) {
+            LOGGER.warn("An exception occurred while checking if a file or folder '" + packFile.getPath() + "' is a Fiddle pack. The file or folder will not be loaded.", e);
+        }
+    }
+
+}
