From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Sat, 27 Jan 2024 14:07:16 +0100
Subject: [PATCH] Read packs - Content - Blocks - JSON parser

Adds the `BlockDefinitionParser` class, that can parse JSON into `BlockDefinition` instances.
This also includes the `BlockDefinitionParser` class, that can parse JSON into corresponding `BlockPropertiesDefinition` instances,
and auxiliar map color parsers.

License: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)
Fiddle - https://fiddlemc.org

diff --git a/src/main/java/org/fiddlemc/fiddle/pack/read/fiddlecontent/definition/block/BlockDefinition.java b/src/main/java/org/fiddlemc/fiddle/pack/read/fiddlecontent/definition/block/BlockDefinition.java
index 899d30e4a04ecf32ca6d6cb62ef5667703265394..d3fb7271e86eac482fc1ec43161da8a9e599b426 100644
--- a/src/main/java/org/fiddlemc/fiddle/pack/read/fiddlecontent/definition/block/BlockDefinition.java
+++ b/src/main/java/org/fiddlemc/fiddle/pack/read/fiddlecontent/definition/block/BlockDefinition.java
@@ -20,7 +20,10 @@ public class BlockDefinition
 
     public static final FiddleContentDefinitionType<BlockDefinition> TYPE = new FiddleContentDefinitionType<>(
         "blocks",
-        "block"
+        // Fiddle start - read packs - blocks - JSON parser
+        "block",
+        BlockDefinitionParser.INSTANCE
+        // Fiddle end - read packs - blocks - JSON parser
     );
 
     /**
diff --git a/src/main/java/org/fiddlemc/fiddle/pack/read/fiddlecontent/definition/block/BlockDefinitionParser.java b/src/main/java/org/fiddlemc/fiddle/pack/read/fiddlecontent/definition/block/BlockDefinitionParser.java
new file mode 100644
index 0000000000000000000000000000000000000000..71f71e05589964c529ecdaaaae8eef540109567e
--- /dev/null
+++ b/src/main/java/org/fiddlemc/fiddle/pack/read/fiddlecontent/definition/block/BlockDefinitionParser.java
@@ -0,0 +1,47 @@
+// Fiddle - read packs - blocks - JSON parser
+
+package org.fiddlemc.fiddle.pack.read.fiddlecontent.definition.block;
+
+import net.minecraft.resources.ResourceLocation;
+import org.fiddlemc.fiddle.pack.exception.PackException;
+import org.fiddlemc.fiddle.pack.read.fiddlecontent.definition.block.parent.BlockDefinitionBase;
+import org.fiddlemc.fiddle.pack.read.fiddlecontent.definition.blockoritem.BlockOrItemDefinitionParser;
+import org.fiddlemc.fiddle.pack.read.fiddlecontent.definition.withparent.FiddleContentDefinitionBase;
+import org.fiddlemc.fiddle.pack.read.fiddlecontent.definition.withparent.FiddleContentDefinitionParent;
+import org.fiddlemc.fiddle.pack.read.namedjson.NamedJsonElement;
+import org.fiddlemc.fiddle.pack.read.namedjson.NamedJsonObject;
+
+public final class BlockDefinitionParser
+    extends BlockOrItemDefinitionParser<BlockPropertiesDefinition, BlockDefinition> {
+
+    public static final String fullBlockStateJsonKey = "full_block_state";
+
+    public static final BlockDefinitionParser INSTANCE = new BlockDefinitionParser();
+
+    private BlockDefinitionParser() {
+        super(BlockPropertiesDefinitionParser.INSTANCE);
+    }
+
+    @Override
+    protected FiddleContentDefinitionBase[] getBases() {
+        return new BlockDefinitionBase[]{
+            BlockDefinitionBase.BLOCK,
+            BlockDefinitionBase.STAIRS
+        };
+    }
+
+    @Override
+    protected BlockDefinition parse(
+        ResourceLocation resourceLocation,
+        NamedJsonObject blockJson,
+        FiddleContentDefinitionParent parent,
+        BlockPropertiesDefinition propertiesDefinition
+    ) throws PackException {
+        // Read the full block state
+        var fullBlockStateString = blockJson.getAsStringIfPresent(fullBlockStateJsonKey, true, NamedJsonElement.BlankStringParseResult.THROW_EXCEPTION, null);
+        var fullBlockState = fullBlockStateString == null ? null : new ResourceLocation(fullBlockStateString);
+
+        // Return the definition
+        return new BlockDefinition(resourceLocation, parent, propertiesDefinition, fullBlockState);
+    }
+}
diff --git a/src/main/java/org/fiddlemc/fiddle/pack/read/fiddlecontent/definition/block/BlockPropertiesDefinitionParser.java b/src/main/java/org/fiddlemc/fiddle/pack/read/fiddlecontent/definition/block/BlockPropertiesDefinitionParser.java
new file mode 100644
index 0000000000000000000000000000000000000000..7495d8addebe9a04b085d48e2042eb879b55a4b3
--- /dev/null
+++ b/src/main/java/org/fiddlemc/fiddle/pack/read/fiddlecontent/definition/block/BlockPropertiesDefinitionParser.java
@@ -0,0 +1,112 @@
+// Fiddle - read packs - blocks - JSON parser
+
+package org.fiddlemc.fiddle.pack.read.fiddlecontent.definition.block;
+
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.world.level.block.state.properties.NoteBlockInstrument;
+import org.fiddlemc.fiddle.pack.exception.PackException;
+import org.fiddlemc.fiddle.pack.read.fiddlecontent.definition.block.mapcolor.MapColorDefinition;
+import org.fiddlemc.fiddle.pack.read.fiddlecontent.definition.block.mapcolor.MapColorDefinitionParser;
+import org.fiddlemc.fiddle.pack.read.fiddlecontent.definition.blockoritem.BlockOrItemPropertiesDefinitionParser;
+import org.fiddlemc.fiddle.pack.read.fiddlecontent.definition.withparent.FiddleContentDefinitionKeyParent;
+import org.fiddlemc.fiddle.pack.read.fiddlecontent.definition.withparent.FiddleContentDefinitionParent;
+import org.fiddlemc.fiddle.pack.read.namedjson.NamedJsonElement;
+import org.fiddlemc.fiddle.pack.read.namedjson.NamedJsonObject;
+import org.fiddlemc.fiddle.pack.read.namedjson.NamedJsonPrimitive;
+import org.jetbrains.annotations.Nullable;
+
+public class BlockPropertiesDefinitionParser
+    extends BlockOrItemPropertiesDefinitionParser<BlockPropertiesDefinition> {
+
+    public static final String parentJsonKey = "parent";
+    public static final String mapColorJsonKey = "map_color";
+    public static final String explosionResistanceJsonKey = "explosion_resistance";
+    public static final String destroyTimeJsonKey = "destroy_time";
+    public static final String requiresCorrectToolForDropsJsonKey = "requires_correct_tool_for_drops";
+    public static final String frictionJsonKey = "friction";
+    public static final String ignitedByLavaJsonKey = "ignited_by_lava";
+    public static final String instrumentJsonKey = "instrument";
+
+    public static final BlockPropertiesDefinitionParser INSTANCE = new BlockPropertiesDefinitionParser();
+
+    private BlockPropertiesDefinitionParser() {
+    }
+
+    @Override
+    protected BlockPropertiesDefinition actualParse(NamedJsonObject propertiesJson) throws PackException {
+        @Nullable FiddleContentDefinitionParent parent = null;
+        @Nullable MapColorDefinition mapColor = null;
+        @Nullable Float explosionResistance = null;
+        @Nullable Float destroyTime = null;
+        @Nullable Boolean requiresCorrectToolForDrops = null;
+        @Nullable Float friction = null;
+        @Nullable Boolean ignitedByLava = null;
+        @Nullable NoteBlockInstrument instrument = null;
+        if (propertiesJson != null) {
+
+            // Read the parent
+            var parentString = propertiesJson.getAsStringIfPresent(parentJsonKey, true, NamedJsonElement.BlankStringParseResult.THROW_EXCEPTION, null);
+            if (parentString != null) {
+                var parentResourceLocation = new ResourceLocation(parentString);
+                parent = BlockDefinitionParser.INSTANCE.getBaseByTypedResourceLocation(parentResourceLocation);
+                if (parent == null) {
+                    parent = new FiddleContentDefinitionKeyParent<>(parentResourceLocation);
+                }
+            }
+
+            // Read the map color
+            var mapColorJson = propertiesJson.getOrNull(mapColorJsonKey);
+            if (mapColorJson != null) {
+                var readMapColor = MapColorDefinitionParser.INSTANCE.parse(mapColorJson);
+                if (readMapColor != null) {
+                    mapColor = readMapColor;
+                }
+            }
+
+            // Read some more values
+            var readExplosionResistance = propertiesJson.getAsFloatIfPresent(explosionResistanceJsonKey, 0F, NamedJsonPrimitive.SAFE_HIGH_INTEGER_FLOAT);
+            if (readExplosionResistance != null) {
+                explosionResistance = readExplosionResistance;
+            }
+            var readDestroyTime = propertiesJson.getAsFloatIfPresent(destroyTimeJsonKey, -1F, NamedJsonPrimitive.SAFE_HIGH_INTEGER_FLOAT);
+            if (readDestroyTime != null) {
+                if (readDestroyTime < 0 && readDestroyTime != -1) {
+                    throw propertiesJson.getAsJsonPrimitive(destroyTimeJsonKey).invalidValueException("0 or higher, or -1");
+                }
+                destroyTime = readDestroyTime;
+            }
+            var readRequiresCorrectToolForDrops = propertiesJson.getAsBooleanIfPresent(requiresCorrectToolForDropsJsonKey);
+            if (readRequiresCorrectToolForDrops != null) {
+                requiresCorrectToolForDrops = readRequiresCorrectToolForDrops;
+            }
+            var readFriction = propertiesJson.getAsFloatIfPresent(frictionJsonKey, 0.001F, 0.999F);
+            if (readFriction != null) {
+                friction = readFriction;
+            }
+            var readIgnitedByLava = propertiesJson.getAsBooleanIfPresent(ignitedByLavaJsonKey);
+            if (readIgnitedByLava != null) {
+                ignitedByLava = readIgnitedByLava;
+            }
+            var instrumentString = propertiesJson.getAsStringIfPresent(instrumentJsonKey, true, NamedJsonElement.NonNullBlankStringParseResult.THROW_EXCEPTION, null);
+            if (instrumentString != null) {
+                var readInstrument = NoteBlockInstrumentsByResourceLocation.get(new ResourceLocation(instrumentString));
+                if (readInstrument == null) {
+                    throw propertiesJson.getAsJsonPrimitive(instrumentJsonKey).invalidValueException("a valid instrument");
+                }
+                instrument = readInstrument;
+            }
+
+        }
+        return new BlockPropertiesDefinition(
+            parent,
+            mapColor,
+            explosionResistance,
+            destroyTime,
+            requiresCorrectToolForDrops,
+            friction,
+            ignitedByLava,
+            instrument
+        );
+    }
+
+}
diff --git a/src/main/java/org/fiddlemc/fiddle/pack/read/fiddlecontent/definition/block/mapcolor/MapColorDefinitionParser.java b/src/main/java/org/fiddlemc/fiddle/pack/read/fiddlecontent/definition/block/mapcolor/MapColorDefinitionParser.java
new file mode 100644
index 0000000000000000000000000000000000000000..75d40f1c15e1af5baa1b9f20d4b14c5f74f51efb
--- /dev/null
+++ b/src/main/java/org/fiddlemc/fiddle/pack/read/fiddlecontent/definition/block/mapcolor/MapColorDefinitionParser.java
@@ -0,0 +1,23 @@
+// Fiddle - read packs - blocks - JSON parser
+
+package org.fiddlemc.fiddle.pack.read.fiddlecontent.definition.block.mapcolor;
+
+import org.fiddlemc.fiddle.pack.exception.PackException;
+import org.fiddlemc.fiddle.pack.read.namedjson.NamedJsonElement;
+
+public final class MapColorDefinitionParser {
+
+    public static final MapColorDefinitionParser INSTANCE = new MapColorDefinitionParser();
+
+    private MapColorDefinitionParser() {
+    }
+
+    public MapColorDefinition parse(NamedJsonElement<?> json) throws PackException {
+        if (json.isJsonPrimitive()) {
+            return SingleMapColorDefinitionParser.INSTANCE.parse(json.asJsonPrimitive());
+        }
+        // TODO parse ConditionalMapColorDefinition
+        return null;
+    }
+
+}
diff --git a/src/main/java/org/fiddlemc/fiddle/pack/read/fiddlecontent/definition/block/mapcolor/MapColorParser.java b/src/main/java/org/fiddlemc/fiddle/pack/read/fiddlecontent/definition/block/mapcolor/MapColorParser.java
new file mode 100644
index 0000000000000000000000000000000000000000..5f2b283d24f5cbc5f10918738baec430e1d47acb
--- /dev/null
+++ b/src/main/java/org/fiddlemc/fiddle/pack/read/fiddlecontent/definition/block/mapcolor/MapColorParser.java
@@ -0,0 +1,41 @@
+// Fiddle - read packs - blocks - JSON parser
+
+package org.fiddlemc.fiddle.pack.read.fiddlecontent.definition.block.mapcolor;
+
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.world.level.material.MapColor;
+import org.fiddlemc.fiddle.pack.exception.PackException;
+import org.fiddlemc.fiddle.pack.read.namedjson.NamedJsonElement;
+import org.fiddlemc.fiddle.pack.read.namedjson.NamedJsonPrimitive;
+
+public final class MapColorParser {
+
+    public static final MapColorParser INSTANCE = new MapColorParser();
+
+    private MapColorParser() {
+    }
+
+    public MapColor parse(NamedJsonPrimitive json) throws PackException {
+        if (json.isNumber()) {
+            var id = json.asInt(0, (primitive, value, min) -> {
+                throw new PackException("Map color " + primitive.mapNameOr(name -> "at '" + name + "' ", "") +
+                    "is invalid (id too low): " + value);
+            }, MapColor.MATERIAL_COLORS.length, (primitive, value, max) -> {
+                throw new PackException("Map color " + primitive.mapNameOr(name -> "at '" + name + "' ", "") +
+                    "is invalid (id too high): " + value);
+            });
+            return MapColor.byId(id);
+        }
+        if (json.isString()) {
+            var mapColorString = json.asString(true, NamedJsonElement.BlankStringParseResult.THROW_EXCEPTION, null);
+            var readMapColor = MapColorsByResourceLocation.get(new ResourceLocation(mapColorString));
+            if (readMapColor == null) {
+                throw json.invalidValueException("a valid map color");
+            }
+            return readMapColor;
+        }
+        throw new PackException(json.mapNameOr(name -> "'" + name + "'", "A map color") +
+            " is of the wrong JSON type: " + json.unnamed().getClass().getSimpleName());
+    }
+
+}
diff --git a/src/main/java/org/fiddlemc/fiddle/pack/read/fiddlecontent/definition/block/mapcolor/SingleMapColorDefinitionParser.java b/src/main/java/org/fiddlemc/fiddle/pack/read/fiddlecontent/definition/block/mapcolor/SingleMapColorDefinitionParser.java
new file mode 100644
index 0000000000000000000000000000000000000000..b9ae0cdc9de27723b97ccd39fcab7f725ad95a45
--- /dev/null
+++ b/src/main/java/org/fiddlemc/fiddle/pack/read/fiddlecontent/definition/block/mapcolor/SingleMapColorDefinitionParser.java
@@ -0,0 +1,19 @@
+// Fiddle - read packs - blocks - JSON parser
+
+package org.fiddlemc.fiddle.pack.read.fiddlecontent.definition.block.mapcolor;
+
+import org.fiddlemc.fiddle.pack.exception.PackException;
+import org.fiddlemc.fiddle.pack.read.namedjson.NamedJsonPrimitive;
+
+public final class SingleMapColorDefinitionParser {
+
+    public static final SingleMapColorDefinitionParser INSTANCE = new SingleMapColorDefinitionParser();
+
+    private SingleMapColorDefinitionParser() {
+    }
+
+    public SingleMapColorDefinition parse(NamedJsonPrimitive json) throws PackException {
+        return new SingleMapColorDefinition(MapColorParser.INSTANCE.parse(json));
+    }
+
+}
