From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Tue, 2 Jan 2024 20:37:33 +0100
Subject: [PATCH] Modded registries - Support passing custom registry
 constructor

Adds support for custom registry constructors, which allows for specific registries to have their own `Registry` implementations.
Does not add any usages: this is added in the "Modded registries - Create class for block registry" patch.

License: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)
Fiddle - https://fiddlemc.org

diff --git a/src/main/java/net/minecraft/core/registries/BuiltInRegistries.java b/src/main/java/net/minecraft/core/registries/BuiltInRegistries.java
index 7d09adf27da249851cfc87b7916b915240a65a7e..ba7c778c8d29b529e28b3e48b606d899b33c2d3b 100644
--- a/src/main/java/net/minecraft/core/registries/BuiltInRegistries.java
+++ b/src/main/java/net/minecraft/core/registries/BuiltInRegistries.java
@@ -285,28 +285,95 @@ public class BuiltInRegistries {
     public static final Registry<CreativeModeTab> CREATIVE_MODE_TAB = registerSimple(Registries.CREATIVE_MODE_TAB, CreativeModeTabs::bootstrap);
     public static final Registry<? extends Registry<?>> REGISTRY = WRITABLE_REGISTRY;
 
+    // Fiddle start - modded registries - support passing custom registry constructor
+    private interface MappedRegistryConstructor<T, R extends Registry<T>, MR extends MappedRegistry<T>> {
+
+        MR construct(
+            ResourceKey<R> key,
+            Lifecycle lifecycle,
+            boolean intrusive
+        );
+
+        static <T, R extends Registry<T>> MappedRegistryConstructor<T, R, MappedRegistry<T>> createDefault() {
+            return MappedRegistry::new;
+        }
+
+    }
+
+    private interface DefaultedMappedRegistryConstructor<T, R extends Registry<T>, DMR extends DefaultedMappedRegistry<T>> {
+
+        DMR construct(
+            String defaultId,
+            ResourceKey<R> key,
+            Lifecycle lifecycle,
+            boolean intrusive
+        );
+
+        static <T, R extends Registry<T>> DefaultedMappedRegistryConstructor<T, R, DefaultedMappedRegistry<T>> createDefault() {
+            return DefaultedMappedRegistry::new;
+        }
+
+    }
+    // Fiddle end - modded registries - support passing custom registry constructor
+
     private static <T> Registry<T> registerSimple(ResourceKey<? extends Registry<T>> key, BuiltInRegistries.RegistryBootstrap<T> initializer) {
         return registerSimple(key, Lifecycle.stable(), initializer);
     }
 
+    // Fiddle start - modded registries - support passing custom registry constructor
+    private static <T, R extends Registry<T>, MR extends MappedRegistry<T>> MR registerSimple(ResourceKey<R> key, BuiltInRegistries.RegistryBootstrap<T> initializer, MappedRegistryConstructor<T, R, MR> registryConstructor) {
+        return registerSimple(key, Lifecycle.stable(), initializer, registryConstructor);
+    }
+    // Fiddle end - modded registries - support passing custom registry constructor
+
     private static <T> DefaultedRegistry<T> registerDefaulted(ResourceKey<? extends Registry<T>> key, String defaultId, BuiltInRegistries.RegistryBootstrap<T> initializer) {
         return registerDefaulted(key, defaultId, Lifecycle.stable(), initializer);
     }
 
+    // Fiddle start - modded registries - support passing custom registry constructor
+    private static <T, R extends Registry<T>, DMR extends DefaultedMappedRegistry<T>> DMR registerDefaulted(ResourceKey<R> key, String defaultId, BuiltInRegistries.RegistryBootstrap<T> initializer, DefaultedMappedRegistryConstructor<T, R, DMR> registryConstructor) {
+        return registerDefaulted(key, defaultId, Lifecycle.stable(), initializer, registryConstructor);
+    }
+    // Fiddle end - modded registries - support passing custom registry constructor
+
     private static <T> DefaultedRegistry<T> registerDefaultedWithIntrusiveHolders(ResourceKey<? extends Registry<T>> key, String defaultId, BuiltInRegistries.RegistryBootstrap<T> initializer) {
         return registerDefaultedWithIntrusiveHolders(key, defaultId, Lifecycle.stable(), initializer);
     }
 
+    // Fiddle start - modded registries - support passing custom registry constructor
+    private static <T, R extends Registry<T>, DMR extends DefaultedMappedRegistry<T>> DMR registerDefaultedWithIntrusiveHolders(ResourceKey<R> key, String defaultId, BuiltInRegistries.RegistryBootstrap<T> initializer, DefaultedMappedRegistryConstructor<T, R, DMR> registryConstructor) {
+        return registerDefaultedWithIntrusiveHolders(key, defaultId, Lifecycle.stable(), initializer, registryConstructor);
+    }
+    // Fiddle end - modded registries - support passing custom registry constructor
+
     private static <T> Registry<T> registerSimple(ResourceKey<? extends Registry<T>> key, Lifecycle lifecycle, BuiltInRegistries.RegistryBootstrap<T> initializer) {
-        return internalRegister(key, new MappedRegistry<>(key, lifecycle, false), initializer, lifecycle);
+        // Fiddle start - modded registries - support passing custom registry constructor
+        return registerSimple(key, lifecycle, initializer, MappedRegistryConstructor.createDefault());
+    }
+
+    private static <T, R extends Registry<T>, MR extends MappedRegistry<T>> MR registerSimple(ResourceKey<R> key, Lifecycle lifecycle, BuiltInRegistries.RegistryBootstrap<T> initializer, MappedRegistryConstructor<T, R, MR> registryConstructor) {
+        return internalRegister(key, registryConstructor.construct(key, lifecycle, false), initializer, lifecycle);
+        // Fiddle end - modded registries - support passing custom registry constructor
     }
 
     private static <T> DefaultedRegistry<T> registerDefaulted(ResourceKey<? extends Registry<T>> key, String defaultId, Lifecycle lifecycle, BuiltInRegistries.RegistryBootstrap<T> initializer) {
-        return internalRegister(key, new DefaultedMappedRegistry<>(defaultId, key, lifecycle, false), initializer, lifecycle);
+        // Fiddle start - modded registries - support passing custom registry constructor
+        return registerDefaulted(key, defaultId, lifecycle, initializer, DefaultedMappedRegistryConstructor.createDefault());
+    }
+
+    private static <T, R extends Registry<T>, DMR extends DefaultedMappedRegistry<T>> DMR registerDefaulted(ResourceKey<R> key, String defaultId, Lifecycle lifecycle, BuiltInRegistries.RegistryBootstrap<T> initializer, DefaultedMappedRegistryConstructor<T, R, DMR> registryConstructor) {
+        return internalRegister(key, registryConstructor.construct(defaultId, key, lifecycle, false), initializer, lifecycle);
+        // Fiddle end - modded registries - support passing custom registry constructor
     }
 
     private static <T> DefaultedRegistry<T> registerDefaultedWithIntrusiveHolders(ResourceKey<? extends Registry<T>> key, String defaultId, Lifecycle lifecycle, BuiltInRegistries.RegistryBootstrap<T> initializer) {
-        return internalRegister(key, new DefaultedMappedRegistry<>(defaultId, key, lifecycle, true), initializer, lifecycle);
+        // Fiddle start - modded registries - support passing custom registry constructor
+        return registerDefaultedWithIntrusiveHolders(key, defaultId, lifecycle, initializer, DefaultedMappedRegistryConstructor.createDefault());
+    }
+
+    private static <T, R extends Registry<T>, DMR extends DefaultedMappedRegistry<T>> DMR registerDefaultedWithIntrusiveHolders(ResourceKey<R> key, String defaultId, Lifecycle lifecycle, BuiltInRegistries.RegistryBootstrap<T> initializer, DefaultedMappedRegistryConstructor<T, R, DMR> registryConstructor) {
+        return internalRegister(key, registryConstructor.construct(defaultId, key, lifecycle, true), initializer, lifecycle);
+        // Fiddle end - modded registries - support passing custom registry constructor
     }
 
     private static <T, R extends WritableRegistry<T>> R internalRegister(ResourceKey<? extends Registry<T>> key, R registry, BuiltInRegistries.RegistryBootstrap<T> initializer, Lifecycle lifecycle) {
