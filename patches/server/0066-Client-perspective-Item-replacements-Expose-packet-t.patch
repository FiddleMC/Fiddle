From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Sat, 22 Jul 2023 16:50:09 +0100
Subject: [PATCH] Client perspective - Item replacements - Expose packet target
 client properties - Implement for packets that may contain items

License: Fiddle Public License Agreement 1.0 (included in license/FPL-1.0.txt)
Fiddle - https://fiddlemc.org

diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundContainerSetContentPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundContainerSetContentPacket.java
index dbd8b9b09b82c1b75e8be9dc7416d9f0863c8c87..2a7de80e4e17d486a86c1e98b30a239429eba63b 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundContainerSetContentPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundContainerSetContentPacket.java
@@ -3,16 +3,17 @@ package net.minecraft.network.protocol.game;
 import java.util.List;
 import net.minecraft.core.NonNullList;
 import net.minecraft.network.FriendlyByteBuf;
-import net.minecraft.network.protocol.Packet;
 import net.minecraft.world.item.ItemStack;
+import org.fiddlemc.fiddle.packet.PacketWithExplicitTargetClientConnection;
 
-public class ClientboundContainerSetContentPacket implements Packet<ClientGamePacketListener> {
+public class ClientboundContainerSetContentPacket extends PacketWithExplicitTargetClientConnection<ClientGamePacketListener> { // Fiddle - client perspective - item replacements - store connection explicitly in packets that may contain items
     private final int containerId;
     private final int stateId;
     private final List<ItemStack> items;
     private final ItemStack carriedItem;
 
     public ClientboundContainerSetContentPacket(int syncId, int revision, NonNullList<ItemStack> contents, ItemStack cursorStack) {
+        super(); // Fiddle - client perspective - item replacements - store connection explicitly in packets that may contain items
         this.containerId = syncId;
         this.stateId = revision;
         this.items = NonNullList.withSize(contents.size(), ItemStack.EMPTY);
@@ -25,6 +26,7 @@ public class ClientboundContainerSetContentPacket implements Packet<ClientGamePa
     }
 
     public ClientboundContainerSetContentPacket(FriendlyByteBuf buf) {
+        super(); // Fiddle - client perspective - item replacements - store connection explicitly in packets that may contain items
         this.containerId = buf.readUnsignedByte();
         this.stateId = buf.readVarInt();
         this.items = buf.readCollection(NonNullList::createWithCapacity, FriendlyByteBuf::readItem);
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundContainerSetSlotPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundContainerSetSlotPacket.java
index 13ee7ad9c9415cd785b5487de7131c932c2198a0..826219db7016710b872ad0e0c02498873cd32972 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundContainerSetSlotPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundContainerSetSlotPacket.java
@@ -1,10 +1,10 @@
 package net.minecraft.network.protocol.game;
 
 import net.minecraft.network.FriendlyByteBuf;
-import net.minecraft.network.protocol.Packet;
 import net.minecraft.world.item.ItemStack;
+import org.fiddlemc.fiddle.packet.PacketWithExplicitTargetClientConnection;
 
-public class ClientboundContainerSetSlotPacket implements Packet<ClientGamePacketListener> {
+public class ClientboundContainerSetSlotPacket extends PacketWithExplicitTargetClientConnection<ClientGamePacketListener> { // Fiddle - client perspective - item replacements - store connection explicitly in packets that may contain items
     public static final int CARRIED_ITEM = -1;
     public static final int PLAYER_INVENTORY = -2;
     private final int containerId;
@@ -13,6 +13,7 @@ public class ClientboundContainerSetSlotPacket implements Packet<ClientGamePacke
     private final ItemStack itemStack;
 
     public ClientboundContainerSetSlotPacket(int syncId, int revision, int slot, ItemStack stack) {
+        super(); // Fiddle - client perspective - item replacements - store connection explicitly in packets that may contain items
         this.containerId = syncId;
         this.stateId = revision;
         this.slot = slot;
@@ -20,6 +21,7 @@ public class ClientboundContainerSetSlotPacket implements Packet<ClientGamePacke
     }
 
     public ClientboundContainerSetSlotPacket(FriendlyByteBuf buf) {
+        super(); // Fiddle - client perspective - item replacements - store connection explicitly in packets that may contain items
         this.containerId = buf.readByte();
         this.stateId = buf.readVarInt();
         this.slot = buf.readShort();
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundMerchantOffersPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundMerchantOffersPacket.java
index dc31aa80ead5765e0b8cc63aa890966ab0bf94a4..3e985303ecf773ad989e102657e1264e8bce90ce 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundMerchantOffersPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundMerchantOffersPacket.java
@@ -1,10 +1,10 @@
 package net.minecraft.network.protocol.game;
 
 import net.minecraft.network.FriendlyByteBuf;
-import net.minecraft.network.protocol.Packet;
 import net.minecraft.world.item.trading.MerchantOffers;
+import org.fiddlemc.fiddle.packet.PacketWithExplicitTargetClientConnection;
 
-public class ClientboundMerchantOffersPacket implements Packet<ClientGamePacketListener> {
+public class ClientboundMerchantOffersPacket extends PacketWithExplicitTargetClientConnection<ClientGamePacketListener> { // Fiddle - client perspective - item replacements - store connection explicitly in packets that may contain items
     private final int containerId;
     private final MerchantOffers offers;
     private final int villagerLevel;
@@ -13,6 +13,7 @@ public class ClientboundMerchantOffersPacket implements Packet<ClientGamePacketL
     private final boolean canRestock;
 
     public ClientboundMerchantOffersPacket(int syncId, MerchantOffers recipes, int levelProgress, int experience, boolean leveled, boolean refreshable) {
+        super(); // Fiddle - client perspective - item replacements - store connection explicitly in packets that may contain items
         this.containerId = syncId;
         this.offers = recipes;
         this.villagerLevel = levelProgress;
@@ -22,6 +23,7 @@ public class ClientboundMerchantOffersPacket implements Packet<ClientGamePacketL
     }
 
     public ClientboundMerchantOffersPacket(FriendlyByteBuf buf) {
+        super(); // Fiddle - client perspective - item replacements - store connection explicitly in packets that may contain items
         this.containerId = buf.readVarInt();
         this.offers = MerchantOffers.createFromStream(buf);
         this.villagerLevel = buf.readVarInt();
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetEntityDataPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetEntityDataPacket.java
index 60c866d21aec7e6ddff2b1a55b2f64133529f366..90ee2dbf35b5cd6433a02c08f1ac9464d2063fcb 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetEntityDataPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetEntityDataPacket.java
@@ -3,10 +3,29 @@ package net.minecraft.network.protocol.game;
 import java.util.ArrayList;
 import java.util.List;
 import net.minecraft.network.FriendlyByteBuf;
-import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.syncher.SynchedEntityData;
+import org.fiddlemc.fiddle.packet.PacketWithExplicitTargetClientConnection;
+
+// Fiddle start - client perspective - item replacements - store connection explicitly in packets that may contain items
+public class ClientboundSetEntityDataPacket extends PacketWithExplicitTargetClientConnection<ClientGamePacketListener> {
+    private final int id;
+    private final List<SynchedEntityData.DataValue<?>> packedItems;
+
+    public ClientboundSetEntityDataPacket(int id, List<SynchedEntityData.DataValue<?>> packedItems) {
+        super();
+        this.id = id;
+        this.packedItems = packedItems;
+    }
+
+    public int id() {
+        return this.id;
+    }
+
+    public List<SynchedEntityData.DataValue<?>> packedItems() {
+        return this.packedItems;
+    }
+    // Fiddle end - client perspective - item replacements - store connection explicitly in packets that may contain items
 
-public record ClientboundSetEntityDataPacket(int id, List<SynchedEntityData.DataValue<?>> packedItems) implements Packet<ClientGamePacketListener> {
     public static final int EOF_MARKER = 255;
 
     public ClientboundSetEntityDataPacket(FriendlyByteBuf buf) {
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetEquipmentPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetEquipmentPacket.java
index 5a8f850b447fc3a4bd0eb0c505bbdfc8be7115e8..ba988f60f4a70ca7686a8f89970182a959a4c911 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetEquipmentPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetEquipmentPacket.java
@@ -4,21 +4,23 @@ import com.google.common.collect.Lists;
 import com.mojang.datafixers.util.Pair;
 import java.util.List;
 import net.minecraft.network.FriendlyByteBuf;
-import net.minecraft.network.protocol.Packet;
 import net.minecraft.world.entity.EquipmentSlot;
 import net.minecraft.world.item.ItemStack;
+import org.fiddlemc.fiddle.packet.PacketWithExplicitTargetClientConnection;
 
-public class ClientboundSetEquipmentPacket implements Packet<ClientGamePacketListener> {
+public class ClientboundSetEquipmentPacket extends PacketWithExplicitTargetClientConnection<ClientGamePacketListener> { // Fiddle - client perspective - item replacements - store connection explicitly in packets that may contain items
     private static final byte CONTINUE_MASK = -128;
     private final int entity;
     private final List<Pair<EquipmentSlot, ItemStack>> slots;
 
     public ClientboundSetEquipmentPacket(int id, List<Pair<EquipmentSlot, ItemStack>> equipmentList) {
+        super(); // Fiddle - client perspective - item replacements - store connection explicitly in packets that may contain items
         this.entity = id;
         this.slots = equipmentList;
     }
 
     public ClientboundSetEquipmentPacket(FriendlyByteBuf buf) {
+        super(); // Fiddle - client perspective - item replacements - store connection explicitly in packets that may contain items
         this.entity = buf.readVarInt();
         EquipmentSlot[] equipmentSlots = EquipmentSlot.values();
         this.slots = Lists.newArrayList();
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateAdvancementsPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateAdvancementsPacket.java
index 053a66d714168f5e8a7cc5ff532190e80de887ca..7d20f4c1d11ef8f5e255288872925ef1ff93a7c6 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateAdvancementsPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateAdvancementsPacket.java
@@ -9,16 +9,17 @@ import java.util.Set;
 import net.minecraft.advancements.Advancement;
 import net.minecraft.advancements.AdvancementProgress;
 import net.minecraft.network.FriendlyByteBuf;
-import net.minecraft.network.protocol.Packet;
 import net.minecraft.resources.ResourceLocation;
+import org.fiddlemc.fiddle.packet.PacketWithExplicitTargetClientConnection;
 
-public class ClientboundUpdateAdvancementsPacket implements Packet<ClientGamePacketListener> {
+public class ClientboundUpdateAdvancementsPacket extends PacketWithExplicitTargetClientConnection<ClientGamePacketListener> { // Fiddle - client perspective - item replacements - store connection explicitly in packets that may contain items
     private final boolean reset;
     private final Map<ResourceLocation, Advancement.Builder> added;
     private final Set<ResourceLocation> removed;
     private final Map<ResourceLocation, AdvancementProgress> progress;
 
     public ClientboundUpdateAdvancementsPacket(boolean clearCurrent, Collection<Advancement> toEarn, Set<ResourceLocation> toRemove, Map<ResourceLocation, AdvancementProgress> toSetProgress) {
+        super(); // Fiddle - client perspective - item replacements - store connection explicitly in packets that may contain items
         this.reset = clearCurrent;
         ImmutableMap.Builder<ResourceLocation, Advancement.Builder> builder = ImmutableMap.builder();
 
@@ -32,6 +33,7 @@ public class ClientboundUpdateAdvancementsPacket implements Packet<ClientGamePac
     }
 
     public ClientboundUpdateAdvancementsPacket(FriendlyByteBuf buf) {
+        super(); // Fiddle - client perspective - item replacements - store connection explicitly in packets that may contain items
         this.reset = buf.readBoolean();
         this.added = buf.readMap(FriendlyByteBuf::readResourceLocation, Advancement.Builder::fromNetwork);
         this.removed = buf.readCollection(Sets::newLinkedHashSetWithExpectedSize, FriendlyByteBuf::readResourceLocation);
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateRecipesPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateRecipesPacket.java
index 48c3443788692cf95eca384b166c017ab6e09028..f8ea333ab6cb8d2f750de91ec344788d9ca55396 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateRecipesPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateRecipesPacket.java
@@ -5,18 +5,20 @@ import java.util.Collection;
 import java.util.List;
 import net.minecraft.core.registries.BuiltInRegistries;
 import net.minecraft.network.FriendlyByteBuf;
-import net.minecraft.network.protocol.Packet;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.world.item.crafting.Recipe;
+import org.fiddlemc.fiddle.packet.PacketWithExplicitTargetClientConnection;
 
-public class ClientboundUpdateRecipesPacket implements Packet<ClientGamePacketListener> {
+public class ClientboundUpdateRecipesPacket extends PacketWithExplicitTargetClientConnection<ClientGamePacketListener> { // Fiddle - client perspective - item replacements - store connection explicitly in packets that may contain items
     private final List<Recipe<?>> recipes;
 
     public ClientboundUpdateRecipesPacket(Collection<Recipe<?>> recipes) {
+        super(); // Fiddle - client perspective - item replacements - store connection explicitly in packets that may contain items
         this.recipes = Lists.newArrayList(recipes);
     }
 
     public ClientboundUpdateRecipesPacket(FriendlyByteBuf buf) {
+        super(); // Fiddle - client perspective - item replacements - store connection explicitly in packets that may contain items
         this.recipes = buf.readList(ClientboundUpdateRecipesPacket::fromNetwork);
     }
 
