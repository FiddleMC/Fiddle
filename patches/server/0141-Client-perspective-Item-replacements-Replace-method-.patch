From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Sat, 22 Jul 2023 20:36:12 +0200
Subject: [PATCH] Client perspective - Item replacements - Replace method
 implementation

License: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)
Fiddle - https://fiddlemc.org

diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
index 8eae41077dc370e2286efaad4b9878c8ec04460e..e961b062ce9ec0272c22da190d438a189686fa3e 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
@@ -114,9 +114,11 @@ import java.util.Collections;
  * <li> SerializableMeta.Deserializers deserializer()
  */
 @DelegateDeserialization(CraftMetaItem.SerializableMeta.class)
-class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
+// Fiddle start - client perspective - item replacements - package -> public
+public class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
 
-    static class ItemMetaKey {
+    public static class ItemMetaKey {
+        // Fiddle end - client perspective - item replacements - package -> public
 
         @Retention(RetentionPolicy.SOURCE)
         @Target(ElementType.FIELD)
@@ -130,7 +132,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
         }
 
         final String BUKKIT;
-        final String NBT;
+        public final String NBT; // Fiddle - client perspective - item replacements - package -> public
 
         ItemMetaKey(final String both) {
             this(both, both);
@@ -243,12 +245,14 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
         }
     }
 
-    static final ItemMetaKey NAME = new ItemMetaKey("Name", "display-name");
+    public static final ItemMetaKey NAME = new ItemMetaKey("Name", "display-name"); // Fiddle - client perspective - item replacements - package -> public
     static final ItemMetaKey LOCNAME = new ItemMetaKey("LocName", "loc-name");
     @Specific(Specific.To.NBT)
-    static final ItemMetaKey DISPLAY = new ItemMetaKey("display");
-    static final ItemMetaKey LORE = new ItemMetaKey("Lore", "lore");
-    static final ItemMetaKey CUSTOM_MODEL_DATA = new ItemMetaKey("CustomModelData", "custom-model-data");
+    // Fiddle start - client perspective - item replacements - package -> public
+    public static final ItemMetaKey DISPLAY = new ItemMetaKey("display");
+    public static final ItemMetaKey LORE = new ItemMetaKey("Lore", "lore");
+    public static final ItemMetaKey CUSTOM_MODEL_DATA = new ItemMetaKey("CustomModelData", "custom-model-data");
+    // Fiddle end - client perspective - item replacements - package -> public
     static final ItemMetaKey ENCHANTMENTS = new ItemMetaKey("Enchantments", "enchants");
     @Specific(Specific.To.NBT)
     static final ItemMetaKey ENCHANTMENTS_ID = new ItemMetaKey("id");
diff --git a/src/main/java/org/fiddlemc/fiddle/packet/deepreplacement/DeepReplacer.java b/src/main/java/org/fiddlemc/fiddle/packet/deepreplacement/DeepReplacer.java
index 1a32ad9eee713cc0b334b6f9be79c05aaadd2cbe..25c6f1ff6b5f7a692820eaebf10fbab685c9cea7 100644
--- a/src/main/java/org/fiddlemc/fiddle/packet/deepreplacement/DeepReplacer.java
+++ b/src/main/java/org/fiddlemc/fiddle/packet/deepreplacement/DeepReplacer.java
@@ -413,8 +413,7 @@ public final class DeepReplacer {
     }
 
     public static ItemStack replaceItemStack(ItemStack value, ItemStackInPacketContext itemStackInPacketContext, ClientPerspectiveAndSettingsSupplier clientPerspectiveAndSettings, DeepReplacementScope replacementScope) {
-        // TODO call implementation
-        return value;
+        return org.fiddlemc.fiddle.packet.item.ItemStackInPacketReplacer.replace(value, itemStackInPacketContext, clientPerspectiveAndSettings, replacementScope); // Fiddle - client perspective - item replacements
     }
 
     /**
diff --git a/src/main/java/org/fiddlemc/fiddle/packet/item/ItemInPacketReplacer.java b/src/main/java/org/fiddlemc/fiddle/packet/item/ItemInPacketReplacer.java
new file mode 100644
index 0000000000000000000000000000000000000000..9c7162be75b5d07a203a5304c46eb435044c187a
--- /dev/null
+++ b/src/main/java/org/fiddlemc/fiddle/packet/item/ItemInPacketReplacer.java
@@ -0,0 +1,88 @@
+// Fiddle - client perspective - item replacements
+
+package org.fiddlemc.fiddle.packet.item;
+
+import net.minecraft.world.item.Item;
+import net.minecraft.world.item.ItemStack;
+import org.fiddlemc.fiddle.packet.ClientPerspective;
+import org.jetbrains.annotations.Nullable;
+
+/**
+ * A class that statically provides the {@link #replace} functionality
+ * to replace {@link ItemStack}s and {@link Item}s in outgoing packets.
+ */
+public final class ItemInPacketReplacer {
+
+    private ItemInPacketReplacer() {
+        throw new RuntimeException();
+    }
+
+    /**
+     * A version of {@link #replace(Item, ClientPerspective, ItemInPacketContext)}
+     * that returns a value if it is always definitely the same for any {@link ClientPerspective},
+     * but returns null if they may be different.
+     */
+    public static @Nullable Item replace(Item original, ItemInPacketContext context) {
+        return replaceInternal(original, null, null, context);
+    }
+
+    /**
+     * @return A replacement for the given {@link Item}.
+     * This is intended for scenarios in which an {@link Item} is sent, but not an {@link ItemStack}
+     * (for example, the type of record that is playing in a jukebox).
+     */
+    public static Item replace(Item original, ClientPerspective clientPerspective, ItemInPacketContext context) {
+        return replaceInternal(original, null, clientPerspective, context);
+    }
+
+    /**
+     * A version of {@link #replace(Item, ItemInPacketContext)}
+     * that returns the {@link Item} that is more specific, for a given {@link ItemStack},
+     * for cases in which that makes a difference.
+     */
+    public static @Nullable Item replace(ItemStack original, ItemInPacketContext context) {
+        return replaceInternal(null, original, null, context);
+    }
+
+    /**
+     * A version of {@link #replace(Item, ClientPerspective, ItemInPacketContext)}
+     * that returns the {@link Item} that is more specific, for a given {@link ItemStack},
+     * for cases in which that makes a difference.
+     */
+    public static Item replace(ItemStack original, ClientPerspective clientPerspective, ItemInPacketContext context) {
+        return replaceInternal(null, original, clientPerspective, context);
+    }
+
+    /**
+     * The internal implementation of all other methods in this class.
+     */
+    private static @Nullable Item replaceInternal(@Nullable Item original, @Nullable ItemStack originalStack, @Nullable ClientPerspective clientPerspective, ItemInPacketContext context) {
+        var item = original != null ? original : originalStack.getItem();
+        switch (context) {
+            default -> {
+                // Use the regular item replacement
+                var visualHandleOrProvider = item.visualHandleOrProvider;
+                if (visualHandleOrProvider == null) {
+                    return item;
+                } else {
+                    @Nullable ItemVisualHandle visualHandle;
+                    if (visualHandleOrProvider instanceof ItemVisualHandle visualHandleOrProviderAsVisualHandle) {
+                        visualHandle = visualHandleOrProviderAsVisualHandle;
+                    } else {
+                        var stack = originalStack != null ? originalStack : new ItemStack(original);
+                        visualHandle = ((ItemVisualHandleProvider) visualHandleOrProvider).getDesiredVisualHandle(stack);
+                        if (visualHandle == null) {
+                            return item;
+                        }
+                    }
+                    if (clientPerspective == null) {
+                        return null;
+                    }
+                    var replacement = visualHandle.getReplacementItemAndCustomModelData(clientPerspective, ItemAndCustomModelDataReplacementMapping.DEFAULT);
+                    return replacement == null ? item : replacement.left();
+                }
+            }
+        }
+    }
+
+}
diff --git a/src/main/java/org/fiddlemc/fiddle/packet/item/ItemStackInPacketReplacer.java b/src/main/java/org/fiddlemc/fiddle/packet/item/ItemStackInPacketReplacer.java
new file mode 100644
index 0000000000000000000000000000000000000000..34159926feeff887cf6baddafbf2845111abaaf1
--- /dev/null
+++ b/src/main/java/org/fiddlemc/fiddle/packet/item/ItemStackInPacketReplacer.java
@@ -0,0 +1,159 @@
+// Fiddle - client perspective - item replacements
+
+package org.fiddlemc.fiddle.packet.item;
+
+import net.minecraft.nbt.CompoundTag;
+import net.minecraft.nbt.Tag;
+import net.minecraft.network.chat.Component;
+import net.minecraft.network.chat.Style;
+import net.minecraft.network.chat.contents.TranslatableContents;
+import net.minecraft.network.protocol.Packet;
+import net.minecraft.world.item.Item;
+import net.minecraft.world.item.ItemStack;
+import org.bukkit.craftbukkit.inventory.CraftMetaItem;
+import org.fiddlemc.fiddle.packet.ClientPerspective;
+import org.fiddlemc.fiddle.packet.deepreplacement.ClientPerspectiveAndSettingsSupplier;
+import org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacementScope;
+import org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacer;
+import org.fiddlemc.fiddle.packet.locale.ServerSideTranslations;
+import org.jetbrains.annotations.Nullable;
+
+/**
+ * A class that statically provides the {@link #replace} functionality
+ * to replace {@link ItemStack}s and {@link Item}s in outgoing packets.
+ */
+public final class ItemStackInPacketReplacer {
+
+    private ItemStackInPacketReplacer() {
+        throw new RuntimeException();
+    }
+
+    /**
+     * @return A replacement for the given {@link ItemStack},
+     * for the purpose of being included in an outgoing {@link Packet}.
+     * The appropriate replacement depends on the {@linkplain ItemStackInPacketContext context}
+     * and the {@linkplain ClientPerspective target client's perspective}.
+     * The returned value is either:
+     * <ul>
+     *     <li>the given {@code original} {@link ItemStack} instance itself, without any modifications, or</li>
+     *     <li>a different (likely, but not necessarily, specially constructed) {@link ItemStack} instance,</li>
+     * </ul>
+     * i.e. the given {@link ItemStack} is not modified in-place.
+     */
+    public static ItemStack replace(ItemStack original, ItemStackInPacketContext context, ClientPerspectiveAndSettingsSupplier clientPerspectiveAndSettings, DeepReplacementScope replacementScope) {
+
+        // Skip if we have no replacements to make
+        if (!replacementScope.canMakeAnyReplacements()) {
+            return original;
+        }
+
+        // This variable will be initialized when a replacement is actually necessary
+        @Nullable ItemStack replacement = null;
+
+        // First, we change the type and set custom model data if necessary
+        var originalItem = original.getItem();
+        var visualHandleOrProvider = originalItem.visualHandleOrProvider;
+        @Nullable ItemVisualHandle visualHandle;
+        if (visualHandleOrProvider == null) {
+            visualHandle = null;
+        } else if (visualHandleOrProvider instanceof ItemVisualHandle visualHandleOrProviderAsVisualHandle) {
+            visualHandle = visualHandleOrProviderAsVisualHandle;
+        } else {
+            visualHandle = ((ItemVisualHandleProvider) visualHandleOrProvider).getDesiredVisualHandle(original);
+        }
+        if (visualHandle != null) {
+            var replacementItemAndCustomModelData = visualHandle.getReplacementItemAndCustomModelData(clientPerspectiveAndSettings.getPerspective(), context.typeAndCustomModelDataMapping);
+            if (replacementItemAndCustomModelData != null) {
+                Item existingItem;
+                int existingCustomModelData = 0;
+                {
+                    var itemPlannedToSend = replacement != null ? replacement : original;
+                    existingItem = itemPlannedToSend.getItem();
+                    if (itemPlannedToSend.hasTag()) {
+                        var existingTag = itemPlannedToSend.getTag();
+                        if (existingTag.contains(CraftMetaItem.CUSTOM_MODEL_DATA.NBT, Tag.TAG_INT)) {
+                            existingCustomModelData = existingTag.getInt(CraftMetaItem.CUSTOM_MODEL_DATA.NBT);
+                        }
+                    }
+                }
+                Item newItem = replacementItemAndCustomModelData.left();
+                int newCustomModelData = replacementItemAndCustomModelData.right();
+                if (newItem != existingItem) {
+                    if (replacement == null) {
+                        replacement = original.copy();
+                    }
+                    replacement.setItem(newItem);
+                }
+                if (existingCustomModelData != newCustomModelData) {
+                    if (replacement == null) {
+                        replacement = original.copy();
+                    }
+                    replacement.getOrCreateTag().putInt(CraftMetaItem.CUSTOM_MODEL_DATA.NBT, newCustomModelData);
+                }
+            }
+        }
+
+        if (context.attemptToChangeDisplayName) {
+
+            // Next, we set the right translatable display name for items that need it
+            var originalName = originalItem.getName(original);
+            if (originalName.getContents() instanceof TranslatableContents translatableContents) {
+                String translationKey = translatableContents.getKey();
+                if (ServerSideTranslations.hasTranslatableReplacement(translationKey, clientPerspectiveAndSettings.getLocale())) {
+                    // Only if there is not already a custom display name
+                    boolean hasCustomDisplayName = false;
+                    {
+                        var itemPlannedToSend = replacement != null ? replacement : original;
+                        var tag = itemPlannedToSend.getTag();
+                        if (itemPlannedToSend.hasTag()) {
+                            if (tag.contains(CraftMetaItem.DISPLAY.NBT, Tag.TAG_COMPOUND)) {
+                                var display = tag.getCompound(CraftMetaItem.DISPLAY.NBT);
+                                if (display.contains(CraftMetaItem.NAME.NBT, Tag.TAG_STRING)) {
+                                    hasCustomDisplayName = true;
+                                }
+                            }
+                        }
+                    }
+                    if (!hasCustomDisplayName) {
+                        if (replacement == null) {
+                            replacement = original.copy();
+                        }
+                        var tag = replacement.getOrCreateTag();
+                        var display = tag.getCompound(CraftMetaItem.DISPLAY.NBT);
+                        if (!tag.contains(CraftMetaItem.DISPLAY.NBT, Tag.TAG_COMPOUND)) {
+                            tag.put(CraftMetaItem.DISPLAY.NBT, display);
+                        }
+                        display.putString(CraftMetaItem.NAME.NBT, Component.Serializer.toJson(originalName.copy().withStyle(Style.EMPTY.withItalic(false))));
+                        // Because we just added translatable contents, we should add replacing translatables to the replacement scope that will be applied to the tag later
+                        replacementScope = replacementScope.withAttemptToReplaceTranslatables();
+                    }
+                }
+            }
+
+            // If the intended rarity is not equal to the client-side rarity of the item sent, modify the display name color
+            // This includes the cyan color of the display name if it has (no) enchantments
+            // TODO
+
+        }
+
+        // TODO If a replacement was constructed with a different type, set its durability to the same percentage as the original's durability
+
+        // Finally, we perform any additional replacements in the tag as needed
+        var tag = (replacement != null ? replacement : original).getTag();
+        if (tag != null) {
+            // We never need to replace in hover events for an item stack tag
+            var modifiedTag = DeepReplacer.replaceTag(tag, clientPerspectiveAndSettings, replacementScope.withoutAttemptToReplaceInHoverEvents());
+            if (modifiedTag != tag && modifiedTag instanceof CompoundTag modifiedCompoundTag) {
+                if (replacement == null) {
+                    replacement = original.copy();
+                }
+                replacement.setTag(modifiedCompoundTag);
+            }
+        }
+
+        // Return the replacement if one was constructed, else return the original
+        return replacement != null ? replacement : original;
+
+    }
+
+}
