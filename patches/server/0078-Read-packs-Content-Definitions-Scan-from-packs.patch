From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Thu, 25 Jan 2024 20:12:02 +0100
Subject: [PATCH] Read packs - Content - Definitions - Scan from packs

Adds the `PackFiddleContentDefinitionScanner`, which provides the functionality to scan packs for all files that represent a content definition.

License: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)
Fiddle - https://fiddlemc.org

diff --git a/src/main/java/org/fiddlemc/fiddle/pack/read/fiddlecontent/definition/PackFiddleContentDefinitionScanner.java b/src/main/java/org/fiddlemc/fiddle/pack/read/fiddlecontent/definition/PackFiddleContentDefinitionScanner.java
new file mode 100644
index 0000000000000000000000000000000000000000..863be508edd7ad6ef086dc3d675fe974611d56b4
--- /dev/null
+++ b/src/main/java/org/fiddlemc/fiddle/pack/read/fiddlecontent/definition/PackFiddleContentDefinitionScanner.java
@@ -0,0 +1,107 @@
+// Fiddle - read packs - content definitions - scan from packs
+
+package org.fiddlemc.fiddle.pack.read.fiddlecontent.definition;
+
+import com.google.gson.JsonElement;
+import com.google.gson.JsonParser;
+import com.mojang.logging.LogUtils;
+import it.unimi.dsi.fastutil.Pair;
+import net.minecraft.resources.ResourceLocation;
+import org.fiddlemc.fiddle.pack.FiddlePack;
+import org.fiddlemc.fiddle.pack.read.ContentNamespacedKeyValidation;
+import org.fiddlemc.fiddle.pack.exception.PackException;
+import org.fiddlemc.fiddle.pack.read.SystemFiles;
+import org.fiddlemc.fiddle.pack.read.filesprovider.RegularFileInPack;
+import org.jetbrains.annotations.NotNull;
+import org.slf4j.Logger;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+
+/**
+ * A utility class providing functionality to find definitions of blocks and items in a {@link FiddlePack}.
+ */
+public final class PackFiddleContentDefinitionScanner {
+
+    private PackFiddleContentDefinitionScanner() {
+        throw new RuntimeException();
+    }
+
+    private static final @NotNull String contentFolderName = "content";
+
+    private static final @NotNull Logger LOGGER = LogUtils.getClassLogger();
+
+    /**
+     * @return A (possibly empty) list of all regular files in the {@linkplain #contentFolderName Fiddle folder in packs},
+     * that have the following path:
+     * <code>&lt;pack root&gt;/&lt;{@link #contentFolderName}&gt;/&lt;a {@link ContentNamespacedKeyValidation#isValidNamespace valid namespace}&gt;/&lt;{@code subNamespaceFolderName}&gt;/&lt;a {@linkplain ContentNamespacedKeyValidation#isValidPathJSONFilename(String) valid namespaced key path}&gt;</the></the></the></code>,
+     * paired with their namespace.
+     */
+    private static @NotNull List<@NotNull Pair<@NotNull RegularFileInPack, @NotNull String>> getSubNamespacedFolderFilesInContentFolder(@NotNull FiddlePack pack, @NotNull String subNamespaceFolderName) throws PackException {
+        var contentFolder = pack.filesProvider().getTopLevelDirectory(contentFolderName);
+        if (contentFolder == null) {
+            return Collections.emptyList();
+        }
+        List<Pair<RegularFileInPack, String>> subNamespacedFolderFiles = new ArrayList<>(0);
+        for (var namespaceFolder : contentFolder.getTopLevelDirectories()) {
+            var namespace = namespaceFolder.getName();
+            if (SystemFiles.isSystemDirectory(namespace)) {
+                continue;
+            }
+            if (!ContentNamespacedKeyValidation.isValidNamespace(namespace)) {
+                LOGGER.warn("Ignored invalid namespace folder in Fiddle pack: {} in {}", contentFolderName + "/" + namespace, pack.filesProvider().getLocation());
+                continue;
+            }
+            var subNamespaceFolder = namespaceFolder.getTopLevelDirectory(subNamespaceFolderName);
+            if (subNamespaceFolder == null) {
+                continue;
+            }
+            for (var subNamespaceFolderFile : subNamespaceFolder.getTopLevelRegularFiles()) {
+                var path = subNamespaceFolderFile.getName();
+                if (!ContentNamespacedKeyValidation.isValidPathJSONFilename(path)) {
+                    LOGGER.warn("Ignored invalid file name in Fiddle pack: {} in {}", contentFolderName + "/" + namespace + "/" + subNamespaceFolderName + "/" + path, pack.filesProvider().getLocation());
+                    continue;
+                }
+                subNamespacedFolderFiles.add(Pair.of(subNamespaceFolderFile, namespace));
+            }
+        }
+        return subNamespacedFolderFiles;
+    }
+
+    /**
+     * @return The same as {@link #getSubNamespacedFolderFilesInContentFolder}, but each pair of a file and
+     * namespace has been turned into the file opened and parsed as JSON, and the {@link ResourceLocation} made
+     * of the namespace and path.
+     */
+    static @NotNull List<@NotNull Pair<@NotNull JsonElement, @NotNull ResourceLocation>> getSubNamespacedFolderFilesInContentFolderAsJSON(@NotNull FiddlePack pack, @NotNull String subNamespaceFolderName) throws PackException {
+        var namespacedFolderFiles = getSubNamespacedFolderFilesInContentFolder(pack, subNamespaceFolderName);
+        if (namespacedFolderFiles.isEmpty()) {
+            return Collections.emptyList();
+        }
+        List<Pair<JsonElement, ResourceLocation>> subNamespacedFolderFilesInContentFolderAsJSON = new ArrayList<>(namespacedFolderFiles.size());
+        for (var namespacedFolderFile : namespacedFolderFiles) {
+            var file = namespacedFolderFile.first();
+            var namespace = namespacedFolderFile.second();
+            var filename = file.getName();
+            var path = filename.substring(0, filename.length() - 5); // Remove .json
+            var resourceLocation = new ResourceLocation(namespace, path);
+            String fullFilePathInPack = contentFolderName + "/" + namespace + "/" + subNamespaceFolderName + "/" + path;
+            String fileContent;
+            try {
+                fileContent = file.getString(false);
+            } catch (Exception e) {
+                throw new PackException("An exception occurred while opening a file '" + fullFilePathInPack + "' in a pack '" + pack + "'.", e);
+            }
+            JsonElement json;
+            try {
+                json = JsonParser.parseString(fileContent);
+            } catch (Exception e) {
+                throw new PackException("An exception occurred while parsing '" + fullFilePathInPack + "' in a pack '" + pack + "' as JSON.", e);
+            }
+            subNamespacedFolderFilesInContentFolderAsJSON.add(Pair.of(json, resourceLocation));
+        }
+        return subNamespacedFolderFilesInContentFolderAsJSON;
+    }
+
+}
