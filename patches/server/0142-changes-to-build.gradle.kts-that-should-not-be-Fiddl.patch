From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Mon, 29 Jan 2024 16:34:11 +0100
Subject: [PATCH] changes to build.gradle.kts that should not be Fiddle


diff --git a/build.gradle.kts b/build.gradle.kts
index 4511b9e87ff612cf21183ba830f44ed604749747..8182ab132f82502554739562ba7c2e5e429e68bc 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -27,7 +27,7 @@ dependencies {
     implementation("org.jline:jline-terminal-jansi:3.21.0")
     implementation("net.minecrell:terminalconsoleappender:1.3.0")
     implementation("net.kyori:adventure-text-serializer-ansi:4.14.0") // Keep in sync with adventureVersion from Paper-API build file
-    implementation("net.kyori:ansi:1.0.1") // Manually bump beyond above transitive dep
+    implementation("net.kyori:ansi:1.0.3") // Manually bump beyond above transitive dep
     /*
           Required to add the missing Log4j2Plugins.dat file from log4j-core
           which has been removed by Mojang. Without it, log4j has to classload
@@ -38,42 +38,38 @@ dependencies {
     log4jPlugins.annotationProcessorConfigurationName("org.apache.logging.log4j:log4j-core:2.19.0") // Paper - Needed to generate meta for our Log4j plugins
     runtimeOnly(log4jPlugins.output)
     alsoShade(log4jPlugins.output)
-    implementation("io.netty:netty-codec-haproxy:4.1.87.Final") // Paper - Add support for proxy protocol
+    implementation("io.netty:netty-codec-haproxy:4.1.97.Final") // Paper - Add support for proxy protocol
     // Paper end
     implementation("org.apache.logging.log4j:log4j-iostreams:2.19.0") // Paper - remove exclusion
-    implementation("org.ow2.asm:asm:9.4")
-    implementation("org.ow2.asm:asm-commons:9.4") // Paper - ASM event executor generation
-    testImplementation("org.mockito:mockito-core:4.9.0") // Paper - switch to mockito
-    implementation("org.spongepowered:configurate-yaml:4.1.2") // Paper - config files
+    implementation("org.ow2.asm:asm-commons:9.5")
+    implementation("org.spongepowered:configurate-yaml:4.2.0-SNAPSHOT") // Paper - config files
     implementation("commons-lang:commons-lang:2.6")
-    implementation("net.fabricmc:mapping-io:0.3.0") // Paper - needed to read mappings for stacktrace deobfuscation
-    runtimeOnly("org.xerial:sqlite-jdbc:3.42.0.0")
-    runtimeOnly("com.mysql:mysql-connector-j:8.0.33")
+    implementation("net.fabricmc:mapping-io:0.5.0") // Paper - needed to read mappings for stacktrace deobfuscation
+    runtimeOnly("org.xerial:sqlite-jdbc:3.42.0.1")
+    runtimeOnly("com.mysql:mysql-connector-j:8.2.0")
     runtimeOnly("com.lmax:disruptor:3.4.4") // Paper
     // Paper start - Use Velocity cipher
     implementation("com.velocitypowered:velocity-native:3.1.2-SNAPSHOT") {
         isTransitive = false
     }
-    // Paper end
+    // Paper end - Use Velocity cipher
 
-    runtimeOnly("org.apache.maven:maven-resolver-provider:3.8.5")
-    runtimeOnly("org.apache.maven.resolver:maven-resolver-connector-basic:1.7.3")
-    runtimeOnly("org.apache.maven.resolver:maven-resolver-transport-http:1.7.3")
+    runtimeOnly("org.apache.maven:maven-resolver-provider:3.9.6")
+    runtimeOnly("org.apache.maven.resolver:maven-resolver-connector-basic:1.9.18")
+    runtimeOnly("org.apache.maven.resolver:maven-resolver-transport-http:1.9.18")
 
     testImplementation("io.github.classgraph:classgraph:4.8.47") // Paper - mob goal test
-    testImplementation("junit:junit:4.13.2")
-    testImplementation("org.hamcrest:hamcrest-library:1.3")
+    testImplementation("org.junit.jupiter:junit-jupiter:5.10.0")
+    testImplementation("org.hamcrest:hamcrest:2.2")
+    testImplementation("org.mockito:mockito-core:5.5.0")
 
-    implementation("io.netty:netty-all:4.1.87.Final"); // Paper - Bump netty
-    implementation("net.bytebuddy:byte-buddy:1.14.5") // Fiddle - modifiable Bukkit enums - inject runtime versions - depend on ByteBuddy
+    implementation("net.bytebuddy:byte-buddy:1.14.11") // Fiddle - modifiable Bukkit enums - inject runtime versions - depend on ByteBuddy
     // Fiddle start - read packs - depend on 7-Zip-JBinding
     implementation("net.sf.sevenzipjbinding:sevenzipjbinding:16.02-2.01")
     implementation("net.sf.sevenzipjbinding:sevenzipjbinding-all-platforms:16.02-2.01")
     // Fiddle end - read packs - depend on 7-Zip-JBinding
 }
 
-val craftbukkitPackageVersion = "1_20_R1" // Paper
-
 // Fiddle start - Gale - hide irrelevant compilation warnings
 tasks.withType<JavaCompile> {
     val compilerArgs = options.compilerArgs
@@ -83,6 +79,7 @@ tasks.withType<JavaCompile> {
 }
 // Fiddle end - Gale - hide irrelevant compilation warnings
 
+val craftbukkitPackageVersion = "1_20_R3" // Paper
 tasks.jar {
     archiveClassifier.set("dev")
 
@@ -116,6 +113,12 @@ tasks.compileJava {
     options.setIncremental(false)
 }
 
+// Paper start - compile tests with -parameters for better junit parameterized test names
+tasks.compileTestJava {
+    options.compilerArgs.add("-parameters")
+}
+// Paper end
+
 publishing {
     publications.create<MavenPublication>("maven") {
         artifact(tasks.shadowJar)
@@ -167,6 +170,7 @@ tasks.reobfJar {
 
 tasks.test {
     exclude("org/bukkit/craftbukkit/inventory/ItemStack*Test.class")
+    useJUnitPlatform()
 }
 
 fun TaskContainer.registerRunTask(
@@ -223,9 +227,16 @@ tasks.registerRunTask("runReobf") {
     classpath(runtimeClasspathWithoutVanillaServer)
 }
 
+val runtimeClasspathForRunDev = sourceSets.main.flatMap { src ->
+    src.runtimeClasspath.elements.map { elements ->
+        elements.filterNot { file -> file.asFile.endsWith("minecraft.jar") }
+    }
+}
 tasks.registerRunTask("runDev") {
     description = "Spin up a non-relocated Mojang-mapped test server"
-    classpath(sourceSets.main.map { it.runtimeClasspath })
+    classpath(tasks.filterProjectDir.flatMap { it.outputJar })
+    classpath(runtimeClasspathForRunDev)
+    jvmArgs("-DPaper.isRunDev=true")
 }
 
 // Fiddle start - branding changes - license - package into jar
