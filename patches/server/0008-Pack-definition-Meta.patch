From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Sat, 6 May 2023 11:47:46 +0200
Subject: [PATCH] Pack definition - Meta

License: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)
Fiddle - https://fiddlemc.org

diff --git a/src/main/java/org/fiddlemc/fiddle/pack/FiddlePack.java b/src/main/java/org/fiddlemc/fiddle/pack/FiddlePack.java
index 2f1b3609591c44d2e6c677a81a7256ecb79afdda..79b3614af280a049a74af157cf8dc9cfc4b3506b 100644
--- a/src/main/java/org/fiddlemc/fiddle/pack/FiddlePack.java
+++ b/src/main/java/org/fiddlemc/fiddle/pack/FiddlePack.java
@@ -9,4 +9,12 @@ package org.fiddlemc.fiddle.pack;
  * instances of {@link FiddlePack} may not be fully loaded yet (for example, their custom blocks may not have been
  * registered yet), but have already been constructed so that they can be referred to.
  */
-public class FiddlePack {}
+public class FiddlePack {
+
+    public final FiddlePackMeta meta;
+
+    FiddlePack(FiddlePackMeta meta) {
+        this.meta = meta;
+    }
+
+}
diff --git a/src/main/java/org/fiddlemc/fiddle/pack/FiddlePackMeta.java b/src/main/java/org/fiddlemc/fiddle/pack/FiddlePackMeta.java
new file mode 100644
index 0000000000000000000000000000000000000000..97a8c0df857f096c226205ba5261c69a20f3ccb5
--- /dev/null
+++ b/src/main/java/org/fiddlemc/fiddle/pack/FiddlePackMeta.java
@@ -0,0 +1,256 @@
+// Fiddle - packs
+
+package org.fiddlemc.fiddle.pack;
+
+import com.google.gson.JsonElement;
+import it.unimi.dsi.fastutil.ints.IntArraySet;
+import it.unimi.dsi.fastutil.ints.IntSet;
+import org.fiddlemc.fiddle.pack.reader.PackParseException;
+import org.fiddlemc.fiddle.pack.reader.json.named.NamedJsonElement;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.Objects;
+import java.util.UUID;
+import java.util.stream.Collectors;
+
+/**
+ * The meta of a {@link FiddlePack}.
+ * <br>
+ * This contains global information about the pack, such as its display name.
+ */
+public class FiddlePackMeta {
+
+    private static final int maxFormat = 1;
+    private static final IntSet supportedResourcePackFormats = new IntArraySet(new int[]{13});
+    private static final IntSet supportedDataPackFormats = new IntArraySet(new int[]{12});
+
+    private static final int displayNameMaxLength = 255;
+    private static final int technicalNameMaxLength = 191;
+    private static final int versionMaxLength = 191;
+    private static final int descriptionMaxLength = 262143;
+    private static final int authorMaxLength = 511;
+    private static final int creditsNameMaxLength = 511;
+    private static final int creditsRoleMaxLength = 4095;
+    private static final int websiteMaxLength = 4095;
+    private static final int resourcePackMetaDescriptionMaxLength = 262143;
+    private static final int dataPackMetaDescriptionMaxLength = 262143;
+
+    private static final String packJsonKey = "pack";
+    private static final String formatJsonKey = "format";
+    private static final String uuidJsonKey = "uuid";
+    private static final String displayNameJsonKey = "display_name";
+    private static final String technicalNameJsonKey = "technical_name";
+    private static final String versionJsonKey = "version";
+    private static final String descriptionJsonKey = "description";
+    private static final String authorsJsonKey = "authors";
+    private static final String creditsJsonKey = "credits";
+    private static final String creditsNameJsonKey = "name";
+    private static final String creditsRoleJsonKey = "role";
+    private static final String websiteJsonKey = "website";
+    private static final String resourcePackMetaJsonKey = "resource_pack_meta";
+    private static final String resourcePackMetaPackJsonKey = "pack";
+    private static final String resourcePackMetaFormatJsonKey = "pack_format";
+    private static final String resourcePackMetaDescriptionJsonKey = "description";
+    private static final String dataPackMetaJsonKey = "data_pack_meta";
+    private static final String dataPackMetaPackJsonKey = "pack";
+    private static final String dataPackMetaFormatJsonKey = "pack_format";
+    private static final String dataPackMetaDescriptionJsonKey = "description";
+
+    @SuppressWarnings({"FieldCanBeLocal", "unused"})
+    private final int givenFormat;
+    public final UUID uuid;
+    public final String displayName;
+    public final String technicalName;
+    public final @Nullable String version;
+    public final @Nullable String description;
+    public final String[] authors;
+    public final Credit[] credits;
+    public final @Nullable String website;
+    public final ResourcePackMeta resourcePackMeta;
+    public final @Nullable DataPackMeta dataPackMeta;
+
+    private FiddlePackMeta(
+        int givenFormat,
+        UUID uuid,
+        String displayName,
+        String technicalName,
+        @Nullable String version,
+        @Nullable String description,
+        String[] authors,
+        Credit[] credits,
+        @Nullable String website,
+        ResourcePackMeta resourcePackMeta,
+        @Nullable DataPackMeta dataPackMeta
+    ) {
+        this.givenFormat = givenFormat;
+        this.uuid = uuid;
+        this.displayName = displayName;
+        this.technicalName = technicalName;
+        this.version = version;
+        this.description = description;
+        this.authors = authors;
+        this.credits = credits;
+        this.website = website;
+        this.resourcePackMeta = resourcePackMeta;
+        this.dataPackMeta = dataPackMeta;
+    }
+
+    public static class Credit {
+
+        public final String name;
+        public final @Nullable String role;
+
+        private Credit(String name, @Nullable String role) {
+            this.name = name;
+            this.role = role;
+        }
+
+        @Override
+        public int hashCode() {
+            return this.name.hashCode() + Objects.hashCode(this.role);
+        }
+
+        @Override
+        public boolean equals(Object obj) {
+            return obj instanceof Credit other && this.name.equals(other.name) && Objects.equals(this.role, other.role);
+        }
+
+    }
+
+    public static class ResourcePackMeta {
+
+        @SuppressWarnings({"FieldCanBeLocal", "unused"})
+        private final int givenFormat;
+        public final @Nullable String description;
+
+        private ResourcePackMeta(int givenFormat, @Nullable String description) {
+            this.givenFormat = givenFormat;
+            this.description = description;
+        }
+
+    }
+
+    public static class DataPackMeta {
+
+        @SuppressWarnings({"FieldCanBeLocal", "unused"})
+        private final int givenFormat;
+        public final @Nullable String description;
+
+        private DataPackMeta(int givenFormat, @Nullable String description) {
+            this.givenFormat = givenFormat;
+            this.description = description;
+        }
+
+    }
+
+    private static void enforceSupportedSubFormat(String subName, int format, IntSet supportedFormats) throws PackParseException {
+        if (supportedFormats.contains(format)) {
+            return;
+        }
+        if (format < 1) {
+            throw new PackParseException("Invalid " + subName + " format: " + format);
+        }
+        @SuppressWarnings("OptionalGetWithoutIsPresent")
+        var minSupportedFormat = supportedFormats.intStream().min().getAsInt();
+        if (format < minSupportedFormat) {
+            throw new PackParseException("The " + subName + " format (" + format + ") is older than the minimum that Fiddle has ever been able to read (" + minSupportedFormat + "). Please request the author of the pack to update the contained " + subName + " and raise the format number.");
+        }
+        @SuppressWarnings("OptionalGetWithoutIsPresent")
+        var maxSupportedFormat = supportedFormats.intStream().max().getAsInt();
+        if (format > maxSupportedFormat) {
+            throw new PackParseException("The " + subName + " format (" + format + ") is newer than the maximum this version of Fiddle can read (" + maxSupportedFormat + "). To load this pack, try updating to the latest version of Fiddle.");
+        }
+        throw new PackParseException("The " + subName + " format (" + format + ") is not supported because it is only used in a Minecraft snapshot version.");
+    }
+
+    public static FiddlePackMeta fromJson(JsonElement json) throws PackParseException {
+
+        var packJson = NamedJsonElement.get(json).getAsJsonObject().getAsJsonObject(packJsonKey);
+
+        int format = packJson.getAsInt(formatJsonKey);
+        if (format < 1) {
+            throw new PackParseException("Invalid Fiddle pack format: " + format);
+        } else if (format > maxFormat) {
+            throw new PackParseException("The Fiddle pack format (" + format + ") is newer than the maximum this version of Fiddle can read (" + maxFormat + "). To load this pack, try updating to the latest version of Fiddle.");
+        }
+
+        var uuid = packJson.getAsUUID(uuidJsonKey);
+
+        var displayName = Objects.requireNonNull(packJson.getAsString(displayNameJsonKey, true, NamedJsonElement.BlankStringParseResult.THROW_EXCEPTION, displayNameMaxLength));
+
+        var technicalName = packJson.getAsStringIfPresent(technicalNameJsonKey, true, NamedJsonElement.BlankStringParseResult.THROW_EXCEPTION, technicalNameMaxLength);
+        if (technicalName != null) {
+            for (char c : technicalName.toCharArray()) {
+                if (!((c >= 'a' && c <= 'z') || (c >= '0' && c <= '9') || c == '_')) {
+                    throw new PackParseException("There is an invalid character '" + c + "' in the pack " + technicalNameJsonKey + ": " + technicalName);
+                }
+            }
+            if (technicalName.startsWith("_")) {
+                throw new PackParseException("The pack " + technicalNameJsonKey + " can not start with an underscore: " + technicalName);
+            } else if (technicalName.endsWith("_")) {
+                throw new PackParseException("The pack " + technicalNameJsonKey + " can not end with an underscore: " + technicalName);
+            }
+        } else {
+            technicalName = displayName.chars().mapToObj(c -> {
+                    if ((c >= 'a' && c <= 'z') || (c >= '0' && c <= '9') || c == '_') {
+                        return "" + (char) c;
+                    } else if (c >= 'A' && c <= 'Z') {
+                        return "" + (char) Character.toLowerCase(c);
+                    } else if (" -!@#$%^&*()~`+=[]{}\\|:;\"/?<>,.".chars().anyMatch(punctuation -> punctuation == c)) {
+                        // The ' character was specifically omitted: "John's" should become "johns", not "john_s"
+                        return "_";
+                    }
+                    return null;
+                }).filter(Objects::nonNull)
+                .collect(Collectors.joining())
+                .replaceAll("_+", "_")
+                .replaceAll("^_", "")
+                .replaceAll("_$", "");
+            if (technicalName.length() > technicalNameMaxLength) {
+                technicalName = technicalName.substring(0, technicalNameMaxLength);
+            }
+            if (technicalName.isEmpty()) {
+                technicalName = uuid.toString().toLowerCase().replace('-', '_');
+            }
+        }
+
+        var version = packJson.getAsStringIfPresent(versionJsonKey, false, NamedJsonElement.BlankStringParseResult.RETURN_NULL, versionMaxLength);
+
+        var description = packJson.getAsStringIfPresent(descriptionJsonKey, true, NamedJsonElement.BlankStringParseResult.RETURN_NULL, descriptionMaxLength);
+
+        var authorsList = packJson.getAsNotNullMappedJsonArrayIfPresent(authorsJsonKey, authorJson -> authorJson.getAsString(true, NamedJsonElement.BlankStringParseResult.RETURN_NULL, authorMaxLength));
+        var authors = authorsList == null ? new String[0] : authorsList.toArray(new String[0]);
+
+        var creditsList = packJson.getAsMappedJsonArrayIfPresent(creditsJsonKey, creditJson -> {
+            var creditJsonObject = creditJson.getAsJsonObject();
+            return new Credit(
+                Objects.requireNonNull(creditJsonObject.getAsString(creditsNameJsonKey, true, NamedJsonElement.BlankStringParseResult.THROW_EXCEPTION, creditsNameMaxLength)),
+                creditJsonObject.getAsStringIfPresent(creditsRoleJsonKey, true, NamedJsonElement.BlankStringParseResult.RETURN_NULL, creditsRoleMaxLength)
+            );
+        });
+        var credits = creditsList == null ? new Credit[0] : creditsList.toArray(new Credit[0]);
+
+        var website = packJson.getAsStringIfPresent(websiteJsonKey, true, NamedJsonElement.BlankStringParseResult.RETURN_NULL, websiteMaxLength);
+
+        var resourcePackMetaJson = packJson.getAsJsonObject(resourcePackMetaJsonKey);
+        var resourcePackMetaPackJson = resourcePackMetaJson.getAsJsonObject(resourcePackMetaPackJsonKey);
+        int resourcePackFormat = resourcePackMetaPackJson.getAsInt(resourcePackMetaFormatJsonKey);
+        enforceSupportedSubFormat("resource pack", resourcePackFormat, supportedResourcePackFormats);
+        var resourcePackDescription = resourcePackMetaPackJson.getAsStringIfPresent(resourcePackMetaDescriptionJsonKey, false, NamedJsonElement.BlankStringParseResult.RETURN_STRING, resourcePackMetaDescriptionMaxLength);
+        var resourcePackMeta = new ResourcePackMeta(resourcePackFormat, resourcePackDescription);
+
+        var dataPackMetaJson = packJson.getAsJsonObjectIfPresent(dataPackMetaJsonKey);
+        DataPackMeta dataPackMeta = null;
+        if (dataPackMetaJson != null) {
+            var dataPackMetaPackJson = dataPackMetaJson.getAsJsonObject(dataPackMetaPackJsonKey);
+            int dataPackFormat = dataPackMetaPackJson.getAsInt(dataPackMetaFormatJsonKey);
+            enforceSupportedSubFormat("data pack", dataPackFormat, supportedDataPackFormats);
+            var dataPackDescription = dataPackMetaPackJson.getAsStringIfPresent(dataPackMetaDescriptionJsonKey, false, NamedJsonElement.BlankStringParseResult.RETURN_STRING, dataPackMetaDescriptionMaxLength);
+            dataPackMeta = new DataPackMeta(dataPackFormat, dataPackDescription);
+        }
+
+        return new FiddlePackMeta(format, uuid, displayName, technicalName, version, description, authors, credits, website, resourcePackMeta, dataPackMeta);
+
+    }
+
+}
