From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Wed, 3 Jan 2024 18:07:50 +0100
Subject: [PATCH] Modded registries - Vanilla-only registries - Verify number
 of vanilla blocks, items and block states

Adds a check after the freezing of the registries that verifies that the correct number of vanilla blocks and items have been registered,
by comparing the size of the registries to their expected sizes.

This is done to prevent the server from starting when modded blocks and items have been erroneously marked as vanilla.
This would lead to problems when sending packets to clients that expect vanilla block and item ids.

License: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)
Fiddle - https://fiddlemc.org

diff --git a/src/main/java/net/minecraft/server/WorldLoader.java b/src/main/java/net/minecraft/server/WorldLoader.java
index 56533ed64026f8824a40057fdc488cd237a3187c..e1f80dc06c8a0e7282f62936dff03f4c12268eb9 100644
--- a/src/main/java/net/minecraft/server/WorldLoader.java
+++ b/src/main/java/net/minecraft/server/WorldLoader.java
@@ -35,6 +35,17 @@ public class WorldLoader {
             WorldLoader.DataLoadOutput<D> dataLoadOutput = loadContextSupplier.get(new WorldLoader.DataLoadContext(closeableResourceManager, worldDataConfiguration, frozen, frozen2));
             LayeredRegistryAccess<RegistryLayer> layeredRegistryAccess3 = layeredRegistryAccess2.replaceFrom(RegistryLayer.DIMENSIONS, dataLoadOutput.finalDimensions);
             RegistryAccess.Frozen frozen3 = layeredRegistryAccess3.getAccessForLoading(RegistryLayer.RELOADABLE);
+            // Fiddle start - modded registries - vanilla-only registries - verify number of vanilla blocks and items
+            if (net.minecraft.world.level.block.Block.VANILLA_ONLY_BLOCK_REGISTRY.size() != 1003) {
+                throw new IllegalStateException("The number of registered vanilla blocks is incorrect. The following " + net.minecraft.world.level.block.Block.VANILLA_ONLY_BLOCK_REGISTRY.size() + " blocks were registered as vanilla: " + java.util.stream.StreamSupport.stream(net.minecraft.world.level.block.Block.VANILLA_ONLY_BLOCK_REGISTRY.spliterator(), false).toList());
+            }
+            if (net.minecraft.world.item.Item.VANILLA_ONLY_ITEM_REGISTRY.size() != 1255) {
+                throw new IllegalStateException("The number of registered vanilla items is incorrect. The following " + net.minecraft.world.item.Item.VANILLA_ONLY_ITEM_REGISTRY.size() + " items were registered as vanilla: " + java.util.stream.StreamSupport.stream(net.minecraft.world.item.Item.VANILLA_ONLY_ITEM_REGISTRY.spliterator(), false).toList());
+            }
+            if (net.minecraft.world.level.block.Block.VANILLA_ONLY_BLOCK_STATE_REGISTRY.size() != 24135) {
+                throw new IllegalStateException("The number of registered vanilla block states is incorrect. The following " + net.minecraft.world.level.block.Block.VANILLA_ONLY_BLOCK_STATE_REGISTRY.size() + " block states were registered as vanilla: " + java.util.stream.StreamSupport.stream(net.minecraft.world.level.block.Block.VANILLA_ONLY_BLOCK_STATE_REGISTRY.spliterator(), false).toList());
+            }
+            // Fiddle end - modded registries - vanilla-only registries - verify number of vanilla blocks and items
             return ReloadableServerResources.loadResources(closeableResourceManager, frozen3, worldDataConfiguration.enabledFeatures(), serverConfig.commandSelection(), serverConfig.functionCompilationLevel(), prepareExecutor, applyExecutor).whenComplete((dataPackContents, throwable) -> {
                 if (throwable != null) {
                     closeableResourceManager.close();
