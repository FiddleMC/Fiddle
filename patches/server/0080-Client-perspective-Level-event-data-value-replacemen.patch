From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Thu, 4 Jan 2024 23:11:23 +0100
Subject: [PATCH] Client perspective - Level event data value replacements -
 Data can be generic

Allows the `data` field in `ClientboundLevelEventPacket` to have any type.

Currently, `getData()` (and thereby also `write(FriendlyByteBuf)`) will fail if it is anything other than an `Integer`.
Later patches can add cases where it is something else, and add support for it in the `getData()` method.

License: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)
Fiddle - https://fiddlemc.org

diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelEventPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelEventPacket.java
index b3fb1241fe5bc228bedd12469f05f03ec5f19169..ffca1a0330afd98669b0c9f4d16563668a60f27a 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelEventPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelEventPacket.java
@@ -7,10 +7,10 @@ import net.minecraft.network.protocol.Packet;
 public class ClientboundLevelEventPacket extends org.fiddlemc.fiddle.packet.CloningPacketWithExplicitTargetClientConnection<ClientGamePacketListener> { // Fiddle - client perspective - level event data value replacements - store connection explicitly
     private final int type;
     private final BlockPos pos;
-    private final int data;
+    private final Object data; // Fiddle - client perspective - level event data value replacements - data can be generic
     private final boolean globalEvent;
 
-    public ClientboundLevelEventPacket(int eventId, BlockPos pos, int data, boolean global) {
+    public ClientboundLevelEventPacket(int eventId, BlockPos pos, Object data, boolean global) { // Fiddle - client perspective - level event data value replacements - data can be generic
         super(); // Fiddle - client perspective - level event data value replacements - store connection explicitly
         this.type = eventId;
         this.pos = pos.immutable();
@@ -33,11 +33,21 @@ public class ClientboundLevelEventPacket extends org.fiddlemc.fiddle.packet.Clon
     }
     // Fiddle end - client perspective - level event data value replacements - store connection explicitly
 
+    // Fiddle start - client perspective - level event data value replacements - data can be generic
+    @Override
+    final protected boolean canSkipCloning() {
+        if (this.data instanceof Integer) {
+            return true;
+        }
+        return false;
+    }
+    // Fiddle end - client perspective - level event data value replacements - data can be generic
+
     @Override
     public void write(FriendlyByteBuf buf) {
         buf.writeInt(this.type);
         buf.writeBlockPos(this.pos);
-        buf.writeInt(this.data);
+        buf.writeInt(this.getData()); // Fiddle - client perspective - level event data value replacements - data can be generic
         buf.writeBoolean(this.globalEvent);
     }
 
@@ -55,7 +65,13 @@ public class ClientboundLevelEventPacket extends org.fiddlemc.fiddle.packet.Clon
     }
 
     public int getData() {
-        return this.data;
+        // Fiddle start - client perspective - level event data value replacements - data can be generic
+        if (this.data instanceof Integer dataAsInteger) {
+            return dataAsInteger;
+        } else {
+            throw new IllegalStateException("A level event packet has an invalid data type: " + this.data.getClass().getName() + " (" + this.data + ")");
+        }
+        // Fiddle end - client perspective - level event data value replacements - data can be generic
     }
 
     public BlockPos getPos() {
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index 5624dd955c1974d0715189dd8c46c9e275506985..32a27000c8726cc947c23c508494605905ce36d7 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -1772,7 +1772,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
     }
 
     @Override
-    public void levelEvent(@Nullable Player player, int eventId, BlockPos pos, int data) {
+    public void levelEvent(@Nullable Player player, int eventId, BlockPos pos, Object data) { // Fiddle - client perspective - level event data value replacements - data can be generic
         this.server.getPlayerList().broadcast(player, (double) pos.getX(), (double) pos.getY(), (double) pos.getZ(), 64.0D, this.dimension(), new ClientboundLevelEventPacket(eventId, pos, data, false));
     }
 
diff --git a/src/main/java/net/minecraft/server/level/WorldGenRegion.java b/src/main/java/net/minecraft/server/level/WorldGenRegion.java
index 877498729c66de9aa6a27c9148f7494d7895615c..bfe2acaf2375f0e2bcf59c8a63c958c3503d9251 100644
--- a/src/main/java/net/minecraft/server/level/WorldGenRegion.java
+++ b/src/main/java/net/minecraft/server/level/WorldGenRegion.java
@@ -465,7 +465,7 @@ public class WorldGenRegion implements WorldGenLevel {
     public void addParticle(ParticleOptions parameters, double x, double y, double z, double velocityX, double velocityY, double velocityZ) {}
 
     @Override
-    public void levelEvent(@Nullable Player player, int eventId, BlockPos pos, int data) {}
+    public void levelEvent(@Nullable Player player, int eventId, BlockPos pos, Object data) {} // Fiddle - client perspective - level event data value replacements - data can be generic
 
     @Override
     public void gameEvent(GameEvent event, Vec3 emitterPos, GameEvent.Context emitter) {}
diff --git a/src/main/java/net/minecraft/world/level/LevelAccessor.java b/src/main/java/net/minecraft/world/level/LevelAccessor.java
index 73d1adc5ddf0363966eac0c77c8dfbbb20a2b6a3..bdc2eb6c6c14714789b7f956ce2b12792cf89554 100644
--- a/src/main/java/net/minecraft/world/level/LevelAccessor.java
+++ b/src/main/java/net/minecraft/world/level/LevelAccessor.java
@@ -95,9 +95,11 @@ public interface LevelAccessor extends CommonLevelAccessor, LevelTimeAccess {
 
     void addParticle(ParticleOptions parameters, double x, double y, double z, double velocityX, double velocityY, double velocityZ);
 
-    void levelEvent(@Nullable Player player, int eventId, BlockPos pos, int data);
+    // Fiddle start - client perspective - level event data value replacements - data can be generic
+    void levelEvent(@Nullable Player player, int eventId, BlockPos pos, Object data);
 
-    default void levelEvent(int eventId, BlockPos pos, int data) {
+    default void levelEvent(int eventId, BlockPos pos, Object data) {
+        // Fiddle end - client perspective - level event data value replacements - data can be generic
         this.levelEvent((Player) null, eventId, pos, data);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/util/DummyGeneratorAccess.java b/src/main/java/org/bukkit/craftbukkit/util/DummyGeneratorAccess.java
index 0b7d882551bcb8be149754209aad5fe4142f0fac..ed34c51e4bab7366c1832d02b8974737257aac1e 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/DummyGeneratorAccess.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/DummyGeneratorAccess.java
@@ -114,7 +114,7 @@ public class DummyGeneratorAccess implements WorldGenLevel {
     }
 
     @Override
-    public void levelEvent(Player player, int eventId, BlockPos pos, int data) {
+    public void levelEvent(Player player, int eventId, BlockPos pos, Object data) { // Fiddle - client perspective - level event data value replacements - data can be generic
         // Used by PowderSnowBlock.removeFluid
     }
 
