From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Sat, 22 Jul 2023 17:05:22 +0200
Subject: [PATCH] Client perspective - Item replacements - Define context of
 ItemStack in packets

License: Fiddle Public License Agreement 1.0 (included in license/FPL-1.0.txt)
Fiddle - https://fiddlemc.org

diff --git a/src/main/java/org/fiddlemc/fiddle/packet/item/ItemAndCustomModelDataReplacementMapping.java b/src/main/java/org/fiddlemc/fiddle/packet/item/ItemAndCustomModelDataReplacementMapping.java
new file mode 100644
index 0000000000000000000000000000000000000000..518c0065110857109c27a87f5eaaf3fd3cc8b534
--- /dev/null
+++ b/src/main/java/org/fiddlemc/fiddle/packet/item/ItemAndCustomModelDataReplacementMapping.java
@@ -0,0 +1,24 @@
+// Fiddle - client perspective - item replacements - context of ItemStack in packets - type and custom model data replacements
+
+package org.fiddlemc.fiddle.packet.item;
+
+import net.minecraft.world.item.Item;
+
+/**
+ * The category of mapping, passed to the {@link ItemStackInPacketReplacer} as part of a
+ * {@link ItemStackInPacketContext}, used to determine whether, and with what, items'
+ * {@linkplain Item type} and custom model data should be replaced.
+ */
+public enum ItemAndCustomModelDataReplacementMapping {
+
+    /**
+     * The default mappings, used by every {@link ItemStackInPacketContext} that does not specifically require
+     * a different mapping.
+     */
+    DEFAULT,
+    /**
+     * The mappings used by the {@link ItemStackInPacketContext#STONECUTTER_RECIPE_RESULT} context.
+     */
+    STONECUTTER_RECIPE_RESULT
+
+}
diff --git a/src/main/java/org/fiddlemc/fiddle/packet/item/ItemStackInPacketContext.java b/src/main/java/org/fiddlemc/fiddle/packet/item/ItemStackInPacketContext.java
new file mode 100644
index 0000000000000000000000000000000000000000..a8d014fd551627e992035906524c5d992dcff3b8
--- /dev/null
+++ b/src/main/java/org/fiddlemc/fiddle/packet/item/ItemStackInPacketContext.java
@@ -0,0 +1,69 @@
+// Fiddle - client perspective - item replacements - context of ItemStack in packets
+
+package org.fiddlemc.fiddle.packet.item;
+
+import net.minecraft.network.protocol.game.ClientboundUpdateRecipesPacket;
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.world.entity.item.ItemEntity;
+import net.minecraft.world.item.Item;
+import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.item.crafting.StonecutterRecipe;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * The context of why an {@link ItemStack} is included in a packet,
+ * when it may influence how such an item must be modified based on the target client of the packet.
+ */
+public enum ItemStackInPacketContext {
+
+    /**
+     * The default context: the {@link ItemStack} is presumed to be included in the packet
+     * because it exists as a typical actual instance (e.g. in an inventory, as equipment,
+     * dropped on the floor as an {@link ItemEntity)} or is presented as a vanilla hypothetical
+     * (e.g. in the result slot of the crafting table or as an input/output of a villager trade).
+     */
+    DEFAULT(ItemAndCustomModelDataReplacementMapping.DEFAULT, true),
+
+    /**
+     * The {@linkplain StonecutterRecipe#getResultItem result of a stonecutter recipe}
+     * is included in a {@link ClientboundUpdateRecipesPacket}.
+     * <br>
+     * This is not a simple case of the {@link ItemStack} representing an actually existing or hypothetical
+     * instance (as displayed in the result slot of the stonecutter interface).
+     * The result items included in the {@link ClientboundUpdateRecipesPacket} are used to display the right icon
+     * on the recipe button in said interface.
+     * In this case, the only part of the data sent that the client considers for the button order
+     * is the {@link ItemStack#getItem()}.
+     * Namely, the buttons are ordered alphabetically by the item type's {@link ResourceLocation namespaced key}.
+     * Therefore, choosing the right replacement {@linkplain Item item type} must be done in such a way that
+     * <ul>
+     *     <li>there no two stonecutter recipes are ever sent to the client that have the same
+     *     {@linkplain StonecutterRecipe#getIngredients() input} item type and the same result item type,
+     *     as then the client would not display more than one button in the stonecutter interface, and</li>
+     *     <li>the result item types of the stonecutter recipes with a specific
+     *     {@linkplain StonecutterRecipe#getIngredients() input} item type are ordered in the stonecutter interface
+     *     on the client as buttons (in other words, are in alphabetic order by their namespaced key)
+     *     in the same order as they ordered in the server (because the client will only send the index of the button
+     *     pressed, and the server must be able to interpret this index as a specific recipe).</li>
+     */
+    STONECUTTER_RECIPE_RESULT(ItemAndCustomModelDataReplacementMapping.STONECUTTER_RECIPE_RESULT, true),
+
+    /**
+     * Because item frames will display the custom display name of an item when the player looks straight at them,
+     * we must not attempt to change the display name. Any incorrect display name will not be visible anyway.
+     */
+    IN_ITEM_FRAME(ItemAndCustomModelDataReplacementMapping.DEFAULT, false);
+
+    public final @NotNull ItemAndCustomModelDataReplacementMapping typeAndCustomModelDataMapping;
+
+    /**
+     * If false, no attempt is made to modify the display name of the item.
+     */
+    public final boolean attemptToChangeDisplayName;
+
+    ItemStackInPacketContext(@NotNull ItemAndCustomModelDataReplacementMapping typeAndCustomModelDataMapping, boolean attemptToChangeDisplayName) {
+        this.typeAndCustomModelDataMapping = typeAndCustomModelDataMapping;
+        this.attemptToChangeDisplayName = attemptToChangeDisplayName;
+    }
+
+}
