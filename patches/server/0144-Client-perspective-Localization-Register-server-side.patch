From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Sun, 23 Jul 2023 18:25:11 +0200
Subject: [PATCH] Client perspective - Localization - Register server-side
 translations

License: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)
Fiddle - https://fiddlemc.org

diff --git a/src/main/java/net/minecraft/server/Main.java b/src/main/java/net/minecraft/server/Main.java
index 753473fe82985b91d725aa0706d4d324c924dc27..b7581329f27cf7ba2d05d67b97aa4f2392b89822 100644
--- a/src/main/java/net/minecraft/server/Main.java
+++ b/src/main/java/net/minecraft/server/Main.java
@@ -213,6 +213,7 @@ public class Main {
             DedicatedServerSettings dedicatedserversettings = new DedicatedServerSettings(optionset); // CraftBukkit - CLI argument support
 
             org.fiddlemc.fiddle.pack.load.fiddlecontent.block.BlockStateVisualizationLoader.determineAndStore(); // Fiddle - client perspective - block state visualization - determine and store desired setuppers
+            org.fiddlemc.fiddle.pack.load.assets.lang.TranslationLoader.registerServerSideTranslations(); // Fiddle - client perspective - localization - register server-side translations
 
             // Fiddle start - modifiable Bukkit enums - inject runtime versions - common utilities
             ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader();
diff --git a/src/main/java/org/fiddlemc/fiddle/pack/load/assets/lang/TranslationLoader.java b/src/main/java/org/fiddlemc/fiddle/pack/load/assets/lang/TranslationLoader.java
new file mode 100644
index 0000000000000000000000000000000000000000..15a029d27e2d96ddaa7a7e2eed264cab14be134a
--- /dev/null
+++ b/src/main/java/org/fiddlemc/fiddle/pack/load/assets/lang/TranslationLoader.java
@@ -0,0 +1,31 @@
+// Fiddle - client perspective - localization - register server-side translations
+
+package org.fiddlemc.fiddle.pack.load.assets.lang;
+
+import net.minecraft.core.registries.BuiltInRegistries;
+import org.fiddlemc.fiddle.packet.locale.ServerSideTranslations;
+
+/**
+ * A utility class to load the translations and store them in {@link ServerSideTranslations}
+ * so they can be used in packet replacements.
+ */
+public final class TranslationLoader {
+
+    private TranslationLoader() {
+        throw new RuntimeException();
+    }
+
+    public static void registerServerSideTranslations() {
+        // TODO Another class should be able to read (consisting of call to scan and then call to parse) them from the resource pack, and then this should take those and use them
+        //      The below is just a temp placeholder used for testing
+        for (var block : BuiltInRegistries.BLOCK) {
+            if (!block.isVanilla()) {
+                ServerSideTranslations.registerAddedTranslation("en_us", block.getDescriptionId(), "Fiddle " + block.keyInBlockRegistry.getPath());
+                ServerSideTranslations.registerAddedTranslation("en_gb", block.getDescriptionId(), "Fiddle " + block.keyInBlockRegistry.getPath() + ", I say");
+                ServerSideTranslations.registerAddedTranslation("zh_cn", block.getDescriptionId(), "小提琴 " + block.keyInBlockRegistry.getPath());
+            }
+        }
+        ServerSideTranslations.registerVanillaTranslationReplacement("en_us", "block.minecraft.bookshelf", "Oak Bookshelf");
+    }
+
+}
