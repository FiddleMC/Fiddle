From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Tue, 2 Jan 2024 21:38:53 +0100
Subject: [PATCH] Modded registries - Apply block post-register operations
 instantly

Moves the post-register operations that are applied to registered blocks from the static block in `Blocks` to the `BlockRegistry.register` method.

This means the post-register operations are performed for each block in between individual block registrations, rather than all at once after all blocks have been registered.
It is assumes that this change does not affect anything.

This change is made so that any calls to `register` also have these post-register operations applied.
This allows blocks to be registered more flexibly, such as after the `Blocks` static initialization has already executed, without the post-register operations being skipped.

License: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)
Fiddle - https://fiddlemc.org

diff --git a/src/main/java/net/minecraft/world/level/block/Blocks.java b/src/main/java/net/minecraft/world/level/block/Blocks.java
index 392678d4a3c30ccf9225bbbb8abbcddbe5fc8ac3..f017c78e0510f906a32ebd64be616b663cac47cd 100644
--- a/src/main/java/net/minecraft/world/level/block/Blocks.java
+++ b/src/main/java/net/minecraft/world/level/block/Blocks.java
@@ -1264,17 +1264,9 @@ public class Blocks {
     static {
         for(Block block : BuiltInRegistries.BLOCK) {
             for(BlockState blockState : block.getStateDefinition().getPossibleStates()) {
-                // Fiddle start - flags for vanilla content - block state
-                if (block.isVanilla()) {
-                    blockState.setVanilla();
-                }
-                // Fiddle end - flags for vanilla content - block state
-                Block.BLOCK_STATE_REGISTRY.add(blockState);
                 blockState.initCache();
             }
-
-            block.getLootTable();
         }
-
+        ((org.fiddlemc.fiddle.registry.BlockRegistry) BuiltInRegistries.BLOCK).canInitializeBlockStateCaches = true; // Fiddle - modded registries - apply block post-register operations instantly
     }
 }
diff --git a/src/main/java/org/fiddlemc/fiddle/registry/BlockRegistry.java b/src/main/java/org/fiddlemc/fiddle/registry/BlockRegistry.java
index c2d1ea888d0adcdd62f001b5771687189711482b..d7778a44ea4ab2c89a634c74ebd83a97fbfb7e53 100644
--- a/src/main/java/org/fiddlemc/fiddle/registry/BlockRegistry.java
+++ b/src/main/java/org/fiddlemc/fiddle/registry/BlockRegistry.java
@@ -8,13 +8,30 @@ import net.minecraft.core.Holder;
 import net.minecraft.core.Registry;
 import net.minecraft.core.registries.BuiltInRegistries;
 import net.minecraft.resources.ResourceKey;
+import net.minecraft.world.item.Item;
+import net.minecraft.world.item.Items;
 import net.minecraft.world.level.block.Block;
+import net.minecraft.world.level.block.Blocks;
+import net.minecraft.world.level.block.state.BlockState;
 
 /**
  * An implementation of {@link Registry} specially for {@link BuiltInRegistries#BLOCK}.
  */
 public final class BlockRegistry extends DefaultedMappedRegistry<Block> {
 
+    // Fiddle start - modded registries - apply block post-register operations instantly
+    /**
+     * Whether {@link BlockState#initCache} can be called.
+     * <p>
+     *     Because caling {@link BlockState#initCache} may reference some {@link Item} instances
+     *     defined in {@link Items}, which in turns requires the static initialization of some {@link Block} instances
+     *     in {@link Blocks} to have finished, this only becomes true after all the {@link Block} instances in
+     *     {@link Blocks} have been  initialized.
+     * </p>
+     */
+    public boolean canInitializeBlockStateCaches;
+    // Fiddle end - modded registries - apply block post-register operations instantly
+
     public BlockRegistry(String defaultId, ResourceKey<? extends Registry<Block>> key, Lifecycle lifecycle, boolean intrusive) {
         super(defaultId, key, lifecycle, intrusive);
     }
@@ -25,6 +42,22 @@ public final class BlockRegistry extends DefaultedMappedRegistry<Block> {
         // Register the entry
         var reference = super.register(key, entry, lifecycle);
 
+        // Fiddle start - modded registries - apply block post-register operations instantly
+        // Perform the post-register operations
+        for (BlockState blockState : entry.getStateDefinition().getPossibleStates()) {
+            // Fiddle start - flags for vanilla content - block state
+            if (entry.isVanilla()) {
+                blockState.setVanilla();
+            }
+            // Fiddle end - flags for vanilla content - block state
+            Block.BLOCK_STATE_REGISTRY.add(blockState);
+            if (this.canInitializeBlockStateCaches) {
+                blockState.initCache();
+            }
+        }
+        entry.getLootTable();
+        // Fiddle end - modded registries - apply block post-register operations instantly
+
         // Return the reference
         return reference;
 
