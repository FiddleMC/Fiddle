From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Tue, 18 Jul 2023 21:55:03 +0200
Subject: [PATCH] Client perspective - For players - Send generated resource
 pack

License: Fiddle Public License Agreement 1.0 (included in license/FPL-1.0.txt)
Fiddle - https://fiddlemc.org

diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServerProperties.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServerProperties.java
index 818289e831e3dad29345c43265e2efd7689bc500..a761bd833776c43c6fd8b7eea3f8a893456d245f 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServerProperties.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServerProperties.java
@@ -166,6 +166,7 @@ public class DedicatedServerProperties extends Settings<DedicatedServerPropertie
             return s1.toLowerCase(Locale.ROOT);
         }, WorldPresets.NORMAL.location().toString()));
         this.serverResourcePackInfo = DedicatedServerProperties.getServerPackInfo(this.get("resource-pack", ""), this.get("resource-pack-sha1", ""), this.getLegacyString("resource-pack-hash"), this.get("require-resource-pack", false), this.get("resource-pack-prompt", ""));
+        this.serverResourcePackInfo.ifPresent(info -> LOGGER.warn("A server resource pack URL is set in server.properties (URL: " + info.url() + "), but this setting has no effect: the only resource pack that is sent is the resource pack automatically generated by Fiddle.")); // Fiddle - client perspective - send resource pack - skip existing server resource pack
         this.initialDataPackConfiguration = DedicatedServerProperties.getDatapackConfig(this.get("initial-enabled-packs", String.join(",", WorldDataConfiguration.DEFAULT.dataPacks().getEnabled())), this.get("initial-disabled-packs", String.join(",", WorldDataConfiguration.DEFAULT.dataPacks().getDisabled())));
         // Paper start - Configurable rcon ip
         final String rconIp = this.getStringRaw("rcon.ip");
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index 9d46536f80b5b3e6641fd377c02166a431edfd77..009e3a81a257ccb428926dfeb1f7101fac598502 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -281,6 +281,8 @@ public class ServerPlayer extends Player {
     private final java.util.concurrent.atomic.AtomicReference<io.papermc.paper.chunk.system.RegionizedPlayerChunkLoader.ViewDistances> viewDistances = new java.util.concurrent.atomic.AtomicReference<>(new io.papermc.paper.chunk.system.RegionizedPlayerChunkLoader.ViewDistances(-1, -1, -1));
     public io.papermc.paper.chunk.system.RegionizedPlayerChunkLoader.PlayerChunkLoaderData chunkLoader;
 
+    public boolean hasBeenPlacedIntoPlayerList = false; // Fiddle - client perspective - send resource pack
+
     public io.papermc.paper.chunk.system.RegionizedPlayerChunkLoader.ViewDistances getViewDistances() {
         return this.viewDistances.get();
     }
diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index b777547cb9f8edf4e7b3c2cfb894f8cd1b1a35a5..8e90ffa0d59ed708ab53c1b761a2c2a1a20a1e7b 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -2069,14 +2069,15 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
     @Override
     public void handleResourcePackResponse(ServerboundResourcePackPacket packet) {
         PacketUtils.ensureRunningOnSameThread(packet, this, this.player.serverLevel());
-        if (packet.getAction() == ServerboundResourcePackPacket.Action.DECLINED && this.server.isResourcePackRequired()) {
-            ServerGamePacketListenerImpl.LOGGER.info("Disconnecting {} due to resource pack rejection", this.player.getGameProfile().getName()); // Paper - Don't print component in resource pack rejection message
-            this.disconnect(Component.translatable("multiplayer.requiredTexturePrompt.disconnect"), org.bukkit.event.player.PlayerKickEvent.Cause.RESOURCE_PACK_REJECTION); // Paper - add cause
-        }
         // Paper start
         PlayerResourcePackStatusEvent.Status packStatus = PlayerResourcePackStatusEvent.Status.values()[packet.action.ordinal()];
         player.getBukkitEntity().setResourcePackStatus(packStatus);
         this.cserver.getPluginManager().callEvent(new PlayerResourcePackStatusEvent(this.getCraftPlayer(), packStatus)); // CraftBukkit
+        // Fiddle start - client perspective - send resource pack
+        if (packStatus != PlayerResourcePackStatusEvent.Status.ACCEPTED) { // Do not do anything for ACCEPTED because it just an intermediate status; all the other statuses are final
+            this.server.getPlayerList().placeNewPlayerAfterReceiveResourcePackStatus(this);
+        }
+        // Fiddle end - client perspective - send resource pack
         // Paper end
     }
 
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index fff7ad7a45f310783ac96b44575ad3db13d537fa..a8f80ef4b9d0eb9db19ea50155b26fd9df5db152 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -189,6 +189,19 @@ public abstract class PlayerList {
     abstract public void loadAndSaveFiles(); // Paper - moved from DedicatedPlayerList constructor
 
     public void placeNewPlayer(Connection connection, ServerPlayer player) {
+        // Fiddle start - client perspective - send resource pack
+        new ServerGamePacketListenerImpl(this.server, connection, player);
+        player.sendTexturePack("https://www.fiddlemc.org/not-a-real-url.zip", com.google.common.io.BaseEncoding.base16().lowerCase().encode(new byte[20]), false, null);
+    }
+
+    public void placeNewPlayerAfterReceiveResourcePackStatus(ServerGamePacketListenerImpl playerconnection) {
+        ServerPlayer player = playerconnection.player;
+        if (player.hasBeenPlacedIntoPlayerList) {
+            return;
+        }
+        player.hasBeenPlacedIntoPlayerList = true;
+        Connection connection = playerconnection.connection;
+        // Fiddle end - client perspective - send resource pack
         player.isRealPlayer = true; // Paper
         player.loginTime = System.currentTimeMillis(); // Paper
         GameProfile gameprofile = player.getGameProfile();
@@ -279,7 +292,6 @@ public abstract class PlayerList {
         LevelData worlddata = worldserver1.getLevelData();
 
         player.loadGameTypes(nbttagcompound);
-        ServerGamePacketListenerImpl playerconnection = new ServerGamePacketListenerImpl(this.server, connection, player);
         GameRules gamerules = worldserver1.getGameRules();
         boolean flag = gamerules.getBoolean(GameRules.RULE_DO_IMMEDIATE_RESPAWN);
         boolean flag1 = gamerules.getBoolean(GameRules.RULE_REDUCEDDEBUGINFO);
@@ -390,6 +402,7 @@ public abstract class PlayerList {
         worldserver1 = player.serverLevel(); // CraftBukkit - Update in case join event changed it
         // CraftBukkit end
         this.server.getServerResourcePack().ifPresent((minecraftserver_serverresourcepackinfo) -> {
+            if (false) // Fiddle - client perspective - send resource pack - skip existing server resource pack
             player.sendTexturePack(minecraftserver_serverresourcepackinfo.url(), minecraftserver_serverresourcepackinfo.hash(), minecraftserver_serverresourcepackinfo.isRequired(), minecraftserver_serverresourcepackinfo.prompt());
         });
         Iterator iterator = player.getActiveEffects().iterator();
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 5b201d2c21f04e0223970035e0631f8f92ea0d3a..bddcf2993be4df3d32d5ace05bb62de8cf8ed063 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -3,7 +3,6 @@ package org.bukkit.craftbukkit.entity;
 import com.destroystokyo.paper.Title;
 import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableSet;
-import com.google.common.io.BaseEncoding;
 import com.mojang.authlib.GameProfile;
 import com.mojang.datafixers.util.Pair;
 import io.netty.buffer.Unpooled;
@@ -2189,56 +2188,51 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         }
     }
 
+    // Fiddle start - client perspective - send resource pack - do not send plugin resource packs
+    private static boolean warnedPluginSendResourcePackHasNoEffect = false;
+
+    private static void logAttemptToSendResourcePackWarning(String url, String playerName) {
+        if (!warnedPluginSendResourcePackHasNoEffect) {
+            Bukkit.getLogger().warning("A plugin requested to send a resource pack (URL: " + url + ") to a player (" + playerName + "), but this has no effect: the only resource pack that is sent is the resource pack automatically generated by Fiddle.");
+            warnedPluginSendResourcePackHasNoEffect = true;
+        }
+    }
+    // Fiddle end - client perspective - send resource pack - do not send plugin resource packs
+
     @Override
     public void setTexturePack(String url) {
-        this.setResourcePack(url);
+        logAttemptToSendResourcePackWarning(url, this.getName()); // Fiddle - client perspective - send resource pack - do not send plugin resource packs
     }
 
     @Override
     public void setResourcePack(String url) {
-        this.setResourcePack(url, (byte[]) null);
+        logAttemptToSendResourcePackWarning(url, this.getName()); // Fiddle - client perspective - send resource pack - do not send plugin resource packs
     }
 
     @Override
     public void setResourcePack(String url, byte[] hash) {
-        this.setResourcePack(url, hash, false);
+        logAttemptToSendResourcePackWarning(url, this.getName()); // Fiddle - client perspective - send resource pack - do not send plugin resource packs
     }
 
     @Override
     public void setResourcePack(String url, byte[] hash, String prompt) {
-        this.setResourcePack(url, hash, prompt, false);
+        logAttemptToSendResourcePackWarning(url, this.getName()); // Fiddle - client perspective - send resource pack - do not send plugin resource packs
     }
 
     @Override
     public void setResourcePack(String url, byte[] hash, boolean force) {
-        this.setResourcePack(url, hash, (String) null, force);
+        logAttemptToSendResourcePackWarning(url, this.getName()); // Fiddle - client perspective - send resource pack - do not send plugin resource packs
     }
 
     @Override
     public void setResourcePack(String url, byte[] hash, String prompt, boolean force) {
-        Preconditions.checkArgument(url != null, "Resource pack URL cannot be null");
-
-        if (hash != null) {
-            Preconditions.checkArgument(hash.length == 20, "Resource pack hash should be 20 bytes long but was %s", hash.length);
-
-            this.getHandle().sendTexturePack(url, BaseEncoding.base16().lowerCase().encode(hash), force, CraftChatMessage.fromStringOrNull(prompt, true));
-        } else {
-            this.getHandle().sendTexturePack(url, "", force, CraftChatMessage.fromStringOrNull(prompt, true));
-        }
+        logAttemptToSendResourcePackWarning(url, this.getName()); // Fiddle - client perspective - send resource pack - do not send plugin resource packs
     }
 
     // Paper start
     @Override
     public void setResourcePack(String url, byte[] hashBytes, net.kyori.adventure.text.Component prompt, boolean force) {
-        Preconditions.checkArgument(url != null, "Resource pack URL cannot be null");
-        final String hash;
-        if (hashBytes != null) {
-            Preconditions.checkArgument(hashBytes.length == 20, "Resource pack hash should be 20 bytes long but was " + hashBytes.length);
-            hash = BaseEncoding.base16().lowerCase().encode(hashBytes);
-        } else {
-            hash = "";
-        }
-        this.getHandle().sendTexturePack(url, hash, force, io.papermc.paper.adventure.PaperAdventure.asVanilla(prompt));
+        logAttemptToSendResourcePackWarning(url, this.getName()); // Fiddle - client perspective - send resource pack - do not send plugin resource packs
     }
     // Paper end
 
