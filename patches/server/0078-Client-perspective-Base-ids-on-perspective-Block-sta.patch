From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Wed, 3 Jan 2024 21:04:16 +0100
Subject: [PATCH] Client perspective - Base ids on perspective - Block state -
 Provide

Provides functionality to base `BlockState` ids (the ids they are identified by in packets sent to clients) on the target client's perspective.
For clients that can understand the server-side block state ids directly, the id is taken from the regular registry (`Block.BLOCK_STATE_REGISTRY`), and for those who do not, the ids are taken from the vanilla-only registry (`Block.VANILLA_ONLY_BLOCK_STATE_REGISTRY`).

Does not add any usages of this functionality, those are added in the "Client perspective - Base ids on perspective - Block state - Apply to effect data value", "Base ids on perspective - Block state - Apply to level event data value" and "Client perspective - Base ids on perspective - Block state - Apply to block update packets" patches.

License: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)
Fiddle - https://fiddlemc.org

diff --git a/src/main/java/net/minecraft/network/FriendlyByteBuf.java b/src/main/java/net/minecraft/network/FriendlyByteBuf.java
index b759e92e920a14028937c24dda61b18c644684a8..f64c58d0decb751ad191ca0db48be7df9483ea94 100644
--- a/src/main/java/net/minecraft/network/FriendlyByteBuf.java
+++ b/src/main/java/net/minecraft/network/FriendlyByteBuf.java
@@ -177,6 +177,28 @@ public class FriendlyByteBuf extends ByteBuf {
         }
     }
 
+    // Fiddle start - client perspective - base ids on perspective - provide - block state
+    /**
+     * Writes the given block state to this buffer, taking into account the client perspective of the target client
+     * when translating the block state to an id.
+     * <p>
+     *     This is based on {@link org.fiddlemc.fiddle.packet.ClientPerspective#getPacketBlockStateId}
+     *     and {@link #writeId(IdMap, Object)}.
+     * </p>
+     *
+     * @param value A {@linkplain net.minecraft.world.level.block.state.BlockState block state}.
+     */
+    public void writeBlockState(net.minecraft.world.level.block.state.BlockState value) {
+        var perspective = this.getExplicitTargetClientPerspective();
+        int i = perspective.getPacketBlockStateId(value);
+        if (i == -1) {
+            throw new IllegalArgumentException("Can't find id for '" + value + "' in map " + perspective.getPacketBlockStateIdMap());
+        } else {
+            this.writeVarInt(i);
+        }
+    }
+    // Fiddle end - client perspective - base ids on perspective - provide - block state
+
     public <T> void writeId(IdMap<Holder<T>> registryEntries, Holder<T> entry, FriendlyByteBuf.Writer<T> writer) {
         switch (entry.kind()) {
             case REFERENCE:
diff --git a/src/main/java/org/fiddlemc/fiddle/packet/ClientPerspective.java b/src/main/java/org/fiddlemc/fiddle/packet/ClientPerspective.java
index d13e5eee607de3938389b5e8752cbae51b160691..568c270996e164804c19aa3364f19d3db32f4a3e 100644
--- a/src/main/java/org/fiddlemc/fiddle/packet/ClientPerspective.java
+++ b/src/main/java/org/fiddlemc/fiddle/packet/ClientPerspective.java
@@ -8,6 +8,7 @@ import net.minecraft.world.item.Item;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
+import net.minecraft.world.level.block.state.BlockState;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
@@ -132,6 +133,38 @@ public class ClientPerspective {
     }
     // Fiddle end - client perspective - base ids on perspective - provide - item
 
+    // Fiddle start - client perspective - base ids on perspective - provide - block state
+    /**
+     * The {@link IdMap} that {@linkplain IdMap#getId provides} the ids for {@linkplain BlockState block states}
+     * that a client with this perspective interprets correctly.
+     */
+    public IdMap<BlockState> getPacketBlockStateIdMap() {
+        return understandsServerSideItemsAndBlocks ? Block.BLOCK_STATE_REGISTRY : Block.VANILLA_ONLY_BLOCK_STATE_REGISTRY;
+    }
+
+    /**
+     * The id provided by this perspective's {@link #getPacketBlockStateIdMap()}, for the given {@link BlockState}.
+     * A null value will be interpreted as the {@linkplain Block#defaultBlockState()} of {@link Blocks#AIR}.
+     * <p>
+     *     This is based on {@link #getPacketBlockStateIdMap()}, but uses the cached id for optimization instead.
+     * </p>
+     */
+    public int getPacketBlockStateId(@Nullable BlockState state) {
+        var stateToQuery = state == null ? Blocks.AIR.defaultBlockState() : state;
+        return understandsServerSideItemsAndBlocks ? stateToQuery.getIndexInBlockStateRegistry() : stateToQuery.getIndexInVanillaOnlyBlockStateRegistry();
+    }
+
+    /**
+     * @return The single {@link #getPacketBlockStateId} value for the given {@link BlockState}, if it is the same
+     * for all possible perspectives, or -1 otherwise.
+     */
+    public static int getSinglePacketBlockStateId(@Nullable BlockState state) {
+        var stateToQuery = state == null ? Blocks.AIR.defaultBlockState() : state;
+        int potentialSingleIndex = stateToQuery.getIndexInBlockStateRegistry();
+        return potentialSingleIndex == stateToQuery.getIndexInVanillaOnlyBlockStateRegistry() ? potentialSingleIndex : -1;
+    }
+    // Fiddle end - client perspective - base ids on perspective - provide - block state
+
     @Override
     public int hashCode() {
         return this.category.ordinal();
