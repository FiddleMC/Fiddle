From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Sat, 29 Jul 2023 09:13:00 +0200
Subject: [PATCH] Client perspective - For players - Store and get

License: Fiddle Public License Agreement 1.0 (included in license/FPL-1.0.txt)
Fiddle - https://fiddlemc.org

diff --git a/src/main/java/net/minecraft/network/Connection.java b/src/main/java/net/minecraft/network/Connection.java
index 92e3e2eaa14958ac56a22f3730ad69bf659109f1..68fcd73f89ba8917b5852ac72ce62ba44c6116a2 100644
--- a/src/main/java/net/minecraft/network/Connection.java
+++ b/src/main/java/net/minecraft/network/Connection.java
@@ -41,10 +41,14 @@ import net.minecraft.network.protocol.PacketFlow;
 import net.minecraft.network.protocol.game.ClientboundDisconnectPacket;
 import net.minecraft.network.protocol.login.ClientboundLoginDisconnectPacket;
 import net.minecraft.server.RunningOnDifferentThreadException;
+import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.server.level.ServerPlayerGameMode;
 import net.minecraft.server.network.ServerGamePacketListenerImpl;
 import net.minecraft.util.LazyLoadedValue;
 import net.minecraft.util.Mth;
+import net.minecraft.world.level.GameType;
 import org.apache.commons.lang3.Validate;
+import org.fiddlemc.fiddle.packet.ClientPerspective;
 import org.jetbrains.annotations.NotNull;
 import org.slf4j.Logger;
 import org.slf4j.Marker;
@@ -881,6 +885,59 @@ public class Connection extends SimpleChannelInboundHandler<Packet<?>> {
     }
     // Fiddle end - client perspective - wait for client information
 
+    // Fiddle start - client perspective - player - get from connection
+    /**
+     * @return The {@link ClientPerspective} of this connection's {@linkplain #getPlayer() player}.
+     * This is null if the player is null.
+     *
+     * @see ServerPlayer#getClientPerspective
+     */
+    public final @Nullable ClientPerspective getPlayerClientPerspective() {
+        var player = this.getPlayer();
+        if (player == null) {
+            return null;
+        }
+        return player.getClientPerspective();
+    }
+    // Fiddle end - client perspective - player - get from connection
+
+    // Fiddle start - client perspective - localization - get player locale from connection
+    /**
+     * @return The {@linkplain ServerPlayer#locale locale} of this connection's {@linkplain #getPlayer() player}.
+     * This is null if the player is null.
+     *
+     * @see ServerPlayer#locale
+     */
+    public final @Nullable String getPlayerLocale() {
+        var player = this.getPlayer();
+        if (player == null) {
+            return null;
+        }
+        return player.locale;
+    }
+    // Fiddle end - client perspective - localization - get player locale from connection
+
+    // Fiddle start - client perspective - item replacements - store original in NBT - get player game mode from connection
+    /**
+     * @return The {@linkplain ServerPlayerGameMode#getGameModeForPlayer() game mode}
+     * of this connection's {@linkplain #getPlayer() player}.
+     * This is null if the player is null or if their {@link ServerPlayer#gameMode} is null.
+     *
+     * @see ServerPlayerGameMode#getGameModeForPlayer()
+     */
+    public final @Nullable GameType getPlayerGameMode() {
+        var player = this.getPlayer();
+        if (player == null) {
+            return null;
+        }
+        var gameMode = player.gameMode;
+        if (gameMode == null) {
+            return null;
+        }
+        return gameMode.getGameModeForPlayer();
+    }
+    // Fiddle end - client perspective - item replacements - store original in NBT - get player game mode from connection
+
     private static class PacketHolder {
 
         final Packet<?> packet;
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index f29104b8cde286bacb391b74dadd83d086ad6cc9..f687bb6b8899885f918c309edc4b1fd4c1dca5c9 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -153,6 +153,8 @@ import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.level.portal.PortalInfo;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.Vec3;
+import org.fiddlemc.fiddle.packet.ClientPerspective;
+import org.jetbrains.annotations.NotNull;
 import org.slf4j.Logger;
 import net.minecraft.world.Container;
 import net.minecraft.world.InteractionHand;
@@ -284,6 +286,8 @@ public class ServerPlayer extends Player {
     public boolean hasBeenPlacedIntoPlayerList = false; // Fiddle - client perspective - send resource pack
     public boolean hasFinishedBeingPlacedIntoPlayerList = false; // Fiddle - client perspective - wait for client information
 
+    private @Nullable ClientPerspective clientPerspective; // Fiddle - client perspective - player
+
     public io.papermc.paper.chunk.system.RegionizedPlayerChunkLoader.ViewDistances getViewDistances() {
         return this.viewDistances.get();
     }
@@ -2652,4 +2656,25 @@ public class ServerPlayer extends Player {
         return (CraftPlayer) super.getBukkitEntity();
     }
     // CraftBukkit end
+
+    // Fiddle start - client perspective - player
+    /**
+     * @return The {@link ClientPerspective} of this player.
+     * This is null if and only if it has not been {@linkplain #setClientPerspective initialized} yet.
+     */
+    public final @Nullable ClientPerspective getClientPerspective() {
+        return this.clientPerspective;
+    }
+
+    /**
+     * @param clientPerspective The value to initialize this player's {@link ClientPerspective} to.
+     */
+    public final void setClientPerspective(@NotNull ClientPerspective clientPerspective) {
+        if (this.clientPerspective != null) {
+            throw new IllegalStateException("Tried to set Player.clientPerspective when it was already set");
+        }
+        this.clientPerspective = clientPerspective;
+    }
+    // Fiddle end - client perspective - player
+
 }
