From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Sun, 23 Jul 2023 15:20:59 +0200
Subject: [PATCH] Client perspective - Deep replacements - Store connection
 explicitly in packets that may contain deep replaceables

License: Fiddle Public License Agreement 1.0 (included in license/FPL-1.0.txt)
Fiddle - https://fiddlemc.org

diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundBlockEntityDataPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundBlockEntityDataPacket.java
index 3944852921335c78a04a9dc301882ab5b152b1ed..e1c999ee7d4ab2e26ff6cafa27bba7fb605cd419 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundBlockEntityDataPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundBlockEntityDataPacket.java
@@ -6,11 +6,11 @@ import net.minecraft.core.BlockPos;
 import net.minecraft.core.registries.BuiltInRegistries;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.network.FriendlyByteBuf;
-import net.minecraft.network.protocol.Packet;
 import net.minecraft.world.level.block.entity.BlockEntity;
 import net.minecraft.world.level.block.entity.BlockEntityType;
+import org.fiddlemc.fiddle.packet.PacketWithExplicitTargetClientConnection;
 
-public class ClientboundBlockEntityDataPacket implements Packet<ClientGamePacketListener> {
+public class ClientboundBlockEntityDataPacket extends PacketWithExplicitTargetClientConnection<ClientGamePacketListener> { // Fiddle - client perspective - deep replacements - store connection explicitly in packets that may contain deep replaceables
     private final BlockPos pos;
     private final BlockEntityType<?> type;
     @Nullable
@@ -25,12 +25,14 @@ public class ClientboundBlockEntityDataPacket implements Packet<ClientGamePacket
     }
 
     private ClientboundBlockEntityDataPacket(BlockPos pos, BlockEntityType<?> blockEntityType, CompoundTag nbt) {
+        super(); // Fiddle - client perspective - deep replacements - store connection explicitly in packets that may contain deep replaceables
         this.pos = pos;
         this.type = blockEntityType;
         this.tag = nbt.isEmpty() ? null : nbt;
     }
 
     public ClientboundBlockEntityDataPacket(FriendlyByteBuf buf) {
+        super(); // Fiddle - client perspective - deep replacements - store connection explicitly in packets that may contain deep replaceables
         this.pos = buf.readBlockPos();
         this.type = buf.readById(BuiltInRegistries.BLOCK_ENTITY_TYPE);
         this.tag = buf.readNbt();
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundCommandSuggestionsPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundCommandSuggestionsPacket.java
index 682b7697522b0632f9ecce1697ec6ee286036aee..64fec3b5a1b32714b8fd6810e021e3a6c4571caf 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundCommandSuggestionsPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundCommandSuggestionsPacket.java
@@ -7,19 +7,21 @@ import java.util.List;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.ComponentUtils;
-import net.minecraft.network.protocol.Packet;
 import org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacementScope;
+import org.fiddlemc.fiddle.packet.PacketWithExplicitTargetClientConnection;
 
-public class ClientboundCommandSuggestionsPacket implements Packet<ClientGamePacketListener> {
+public class ClientboundCommandSuggestionsPacket extends PacketWithExplicitTargetClientConnection<ClientGamePacketListener> { // Fiddle - client perspective - deep replacements - store connection explicitly in packets that may contain deep replaceables
     private final int id;
     private final Suggestions suggestions;
 
     public ClientboundCommandSuggestionsPacket(int completionId, Suggestions suggestions) {
+        super(); // Fiddle - client perspective - deep replacements - store connection explicitly in packets that may contain deep replaceables
         this.id = completionId;
         this.suggestions = suggestions;
     }
 
     public ClientboundCommandSuggestionsPacket(FriendlyByteBuf buf) {
+        super(); // Fiddle - client perspective - deep replacements - store connection explicitly in packets that may contain deep replaceables
         this.id = buf.readVarInt();
         int i = buf.readVarInt();
         int j = buf.readVarInt();
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundContainerSetContentPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundContainerSetContentPacket.java
index dbd8b9b09b82c1b75e8be9dc7416d9f0863c8c87..0b4670bda4b585ab5ffd7858311f95d686c995e2 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundContainerSetContentPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundContainerSetContentPacket.java
@@ -3,16 +3,17 @@ package net.minecraft.network.protocol.game;
 import java.util.List;
 import net.minecraft.core.NonNullList;
 import net.minecraft.network.FriendlyByteBuf;
-import net.minecraft.network.protocol.Packet;
 import net.minecraft.world.item.ItemStack;
+import org.fiddlemc.fiddle.packet.PacketWithExplicitTargetClientConnection;
 
-public class ClientboundContainerSetContentPacket implements Packet<ClientGamePacketListener> {
+public class ClientboundContainerSetContentPacket extends PacketWithExplicitTargetClientConnection<ClientGamePacketListener> { // Fiddle - client perspective - deep replacements - store connection explicitly in packets that may contain deep replaceables
     private final int containerId;
     private final int stateId;
     private final List<ItemStack> items;
     private final ItemStack carriedItem;
 
     public ClientboundContainerSetContentPacket(int syncId, int revision, NonNullList<ItemStack> contents, ItemStack cursorStack) {
+        super(); // Fiddle - client perspective - deep replacements - store connection explicitly in packets that may contain deep replaceables
         this.containerId = syncId;
         this.stateId = revision;
         this.items = NonNullList.withSize(contents.size(), ItemStack.EMPTY);
@@ -25,6 +26,7 @@ public class ClientboundContainerSetContentPacket implements Packet<ClientGamePa
     }
 
     public ClientboundContainerSetContentPacket(FriendlyByteBuf buf) {
+        super(); // Fiddle - client perspective - deep replacements - store connection explicitly in packets that may contain deep replaceables
         this.containerId = buf.readUnsignedByte();
         this.stateId = buf.readVarInt();
         this.items = buf.readCollection(NonNullList::createWithCapacity, FriendlyByteBuf::readItem);
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundContainerSetSlotPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundContainerSetSlotPacket.java
index 13ee7ad9c9415cd785b5487de7131c932c2198a0..3c3a6e93755ae39fb95447017712f9b779cfd42f 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundContainerSetSlotPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundContainerSetSlotPacket.java
@@ -1,10 +1,10 @@
 package net.minecraft.network.protocol.game;
 
 import net.minecraft.network.FriendlyByteBuf;
-import net.minecraft.network.protocol.Packet;
 import net.minecraft.world.item.ItemStack;
+import org.fiddlemc.fiddle.packet.PacketWithExplicitTargetClientConnection;
 
-public class ClientboundContainerSetSlotPacket implements Packet<ClientGamePacketListener> {
+public class ClientboundContainerSetSlotPacket extends PacketWithExplicitTargetClientConnection<ClientGamePacketListener> { // Fiddle - client perspective - deep replacements - store connection explicitly in packets that may contain deep replaceables
     public static final int CARRIED_ITEM = -1;
     public static final int PLAYER_INVENTORY = -2;
     private final int containerId;
@@ -13,6 +13,7 @@ public class ClientboundContainerSetSlotPacket implements Packet<ClientGamePacke
     private final ItemStack itemStack;
 
     public ClientboundContainerSetSlotPacket(int syncId, int revision, int slot, ItemStack stack) {
+        super(); // Fiddle - client perspective - deep replacements - store connection explicitly in packets that may contain deep replaceables
         this.containerId = syncId;
         this.stateId = revision;
         this.slot = slot;
@@ -20,6 +21,7 @@ public class ClientboundContainerSetSlotPacket implements Packet<ClientGamePacke
     }
 
     public ClientboundContainerSetSlotPacket(FriendlyByteBuf buf) {
+        super(); // Fiddle - client perspective - deep replacements - store connection explicitly in packets that may contain deep replaceables
         this.containerId = buf.readByte();
         this.stateId = buf.readVarInt();
         this.slot = buf.readShort();
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundDisconnectPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundDisconnectPacket.java
index 295654edee57d6cce52d1305e73fe1b63d84d6b6..179119a16bbe88ed47e1e9c6973ec0cb2f34a499 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundDisconnectPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundDisconnectPacket.java
@@ -3,15 +3,18 @@ package net.minecraft.network.protocol.game;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.protocol.Packet;
+import org.fiddlemc.fiddle.packet.PacketWithExplicitTargetClientConnection;
 
-public class ClientboundDisconnectPacket implements Packet<ClientGamePacketListener> {
+public class ClientboundDisconnectPacket extends PacketWithExplicitTargetClientConnection<ClientGamePacketListener> { // Fiddle - client perspective - deep replacements - store connection explicitly in packets that may contain deep replaceables
     private final Component reason;
 
     public ClientboundDisconnectPacket(Component reason) {
+        super(); // Fiddle - client perspective - deep replacements - store connection explicitly in packets that may contain deep replaceables
         this.reason = reason;
     }
 
     public ClientboundDisconnectPacket(FriendlyByteBuf buf) {
+        super(); // Fiddle - client perspective - deep replacements - store connection explicitly in packets that may contain deep replaceables
         this.reason = buf.readComponent();
     }
 
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundMerchantOffersPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundMerchantOffersPacket.java
index dc31aa80ead5765e0b8cc63aa890966ab0bf94a4..0198f93cb2c6fbbf810bf32fdec294e8ba4af1ba 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundMerchantOffersPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundMerchantOffersPacket.java
@@ -1,10 +1,10 @@
 package net.minecraft.network.protocol.game;
 
 import net.minecraft.network.FriendlyByteBuf;
-import net.minecraft.network.protocol.Packet;
 import net.minecraft.world.item.trading.MerchantOffers;
+import org.fiddlemc.fiddle.packet.PacketWithExplicitTargetClientConnection;
 
-public class ClientboundMerchantOffersPacket implements Packet<ClientGamePacketListener> {
+public class ClientboundMerchantOffersPacket extends PacketWithExplicitTargetClientConnection<ClientGamePacketListener> { // Fiddle - client perspective - deep replacements - store connection explicitly in packets that may contain deep replaceables
     private final int containerId;
     private final MerchantOffers offers;
     private final int villagerLevel;
@@ -13,6 +13,7 @@ public class ClientboundMerchantOffersPacket implements Packet<ClientGamePacketL
     private final boolean canRestock;
 
     public ClientboundMerchantOffersPacket(int syncId, MerchantOffers recipes, int levelProgress, int experience, boolean leveled, boolean refreshable) {
+        super(); // Fiddle - client perspective - deep replacements - store connection explicitly in packets that may contain deep replaceables
         this.containerId = syncId;
         this.offers = recipes;
         this.villagerLevel = levelProgress;
@@ -22,6 +23,7 @@ public class ClientboundMerchantOffersPacket implements Packet<ClientGamePacketL
     }
 
     public ClientboundMerchantOffersPacket(FriendlyByteBuf buf) {
+        super(); // Fiddle - client perspective - deep replacements - store connection explicitly in packets that may contain deep replaceables
         this.containerId = buf.readVarInt();
         this.offers = MerchantOffers.createFromStream(buf);
         this.villagerLevel = buf.readVarInt();
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundOpenScreenPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundOpenScreenPacket.java
index ffd6111f59c86d3606841d3feac5a3ce6f62e354..6b068dc6addf6a0a3c0ef182907cfa5c4699b2d5 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundOpenScreenPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundOpenScreenPacket.java
@@ -6,19 +6,22 @@ import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.world.inventory.MenuType;
+import org.fiddlemc.fiddle.packet.PacketWithExplicitTargetClientConnection;
 
-public class ClientboundOpenScreenPacket implements Packet<ClientGamePacketListener> {
+public class ClientboundOpenScreenPacket extends PacketWithExplicitTargetClientConnection<ClientGamePacketListener> { // Fiddle - client perspective - deep replacements - store connection explicitly in packets that may contain deep replaceables
     private final int containerId;
     private final MenuType<?> type;
     private final Component title;
 
     public ClientboundOpenScreenPacket(int syncId, MenuType<?> type, Component name) {
+        super(); // Fiddle - client perspective - deep replacements - store connection explicitly in packets that may contain deep replaceables
         this.containerId = syncId;
         this.type = type;
         this.title = name;
     }
 
     public ClientboundOpenScreenPacket(FriendlyByteBuf buf) {
+        super(); // Fiddle - client perspective - deep replacements - store connection explicitly in packets that may contain deep replaceables
         this.containerId = buf.readVarInt();
         this.type = buf.readById(BuiltInRegistries.MENU);
         this.title = buf.readComponent();
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetEntityDataPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetEntityDataPacket.java
index 60c866d21aec7e6ddff2b1a55b2f64133529f366..b6bba75d8574323e5e0054b7fab8ca4614139c86 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetEntityDataPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetEntityDataPacket.java
@@ -3,10 +3,29 @@ package net.minecraft.network.protocol.game;
 import java.util.ArrayList;
 import java.util.List;
 import net.minecraft.network.FriendlyByteBuf;
-import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.syncher.SynchedEntityData;
+import org.fiddlemc.fiddle.packet.PacketWithExplicitTargetClientConnection;
+
+// Fiddle start - client perspective - deep replacements - store connection explicitly in packets that may contain deep replaceables
+public class ClientboundSetEntityDataPacket extends PacketWithExplicitTargetClientConnection<ClientGamePacketListener> {
+    private final int id;
+    private final List<SynchedEntityData.DataValue<?>> packedItems;
+
+    public ClientboundSetEntityDataPacket(int id, List<SynchedEntityData.DataValue<?>> packedItems) {
+        super();
+        this.id = id;
+        this.packedItems = packedItems;
+    }
+
+    public int id() {
+        return this.id;
+    }
+
+    public List<SynchedEntityData.DataValue<?>> packedItems() {
+        return this.packedItems;
+    }
+    // Fiddle end - client perspective - deep replacements - store connection explicitly in packets that may contain deep replaceables
 
-public record ClientboundSetEntityDataPacket(int id, List<SynchedEntityData.DataValue<?>> packedItems) implements Packet<ClientGamePacketListener> {
     public static final int EOF_MARKER = 255;
 
     public ClientboundSetEntityDataPacket(FriendlyByteBuf buf) {
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetEquipmentPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetEquipmentPacket.java
index 5a8f850b447fc3a4bd0eb0c505bbdfc8be7115e8..3b6eb30db4dc643e88fea7f2916ecfdbc7b15d49 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetEquipmentPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetEquipmentPacket.java
@@ -4,21 +4,23 @@ import com.google.common.collect.Lists;
 import com.mojang.datafixers.util.Pair;
 import java.util.List;
 import net.minecraft.network.FriendlyByteBuf;
-import net.minecraft.network.protocol.Packet;
 import net.minecraft.world.entity.EquipmentSlot;
 import net.minecraft.world.item.ItemStack;
+import org.fiddlemc.fiddle.packet.PacketWithExplicitTargetClientConnection;
 
-public class ClientboundSetEquipmentPacket implements Packet<ClientGamePacketListener> {
+public class ClientboundSetEquipmentPacket extends PacketWithExplicitTargetClientConnection<ClientGamePacketListener> { // Fiddle - client perspective - deep replacements - store connection explicitly in packets that may contain deep replaceables
     private static final byte CONTINUE_MASK = -128;
     private final int entity;
     private final List<Pair<EquipmentSlot, ItemStack>> slots;
 
     public ClientboundSetEquipmentPacket(int id, List<Pair<EquipmentSlot, ItemStack>> equipmentList) {
+        super(); // Fiddle - client perspective - deep replacements - store connection explicitly in packets that may contain deep replaceables
         this.entity = id;
         this.slots = equipmentList;
     }
 
     public ClientboundSetEquipmentPacket(FriendlyByteBuf buf) {
+        super(); // Fiddle - client perspective - deep replacements - store connection explicitly in packets that may contain deep replaceables
         this.entity = buf.readVarInt();
         EquipmentSlot[] equipmentSlots = EquipmentSlot.values();
         this.slots = Lists.newArrayList();
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundSystemChatPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundSystemChatPacket.java
index 1387e3597c43fd652f2fc82ca6fc2e83039604e2..741b0b8be23fd79c5f809a38f424c849d4d0638d 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundSystemChatPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundSystemChatPacket.java
@@ -4,9 +4,35 @@ package net.minecraft.network.protocol.game;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.protocol.Packet;
+import org.fiddlemc.fiddle.packet.PacketWithExplicitTargetClientConnection;
+import org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacementScope;
 
 // Spigot start
-public record ClientboundSystemChatPacket(@javax.annotation.Nullable net.kyori.adventure.text.Component adventure$content, @javax.annotation.Nullable String content, boolean overlay) implements Packet<ClientGamePacketListener> { // Paper - Adventure
+// Fiddle start - client perspective - deep replacements - store connection explicitly in packets that may contain deep replaceables
+public class ClientboundSystemChatPacket extends PacketWithExplicitTargetClientConnection<ClientGamePacketListener> { // Paper - Adventure
+    private final @javax.annotation.Nullable net.kyori.adventure.text.Component adventure$content;
+    private final @javax.annotation.Nullable String content;
+    private final boolean overlay;
+
+    public @javax.annotation.Nullable net.kyori.adventure.text.Component adventure$content() {
+        return this.adventure$content;
+    }
+
+    public @javax.annotation.Nullable String content() {
+        return this.content;
+    }
+
+    public boolean overlay() {
+        return this.overlay;
+    }
+
+    public ClientboundSystemChatPacket(@javax.annotation.Nullable net.kyori.adventure.text.Component adventure$content, @javax.annotation.Nullable String content, boolean overlay) {
+        this.adventure$content = adventure$content;
+        this.content = content;
+        this.overlay = overlay;
+        this.checkHasContent();
+    }
+    // Fiddle end - client perspective - deep replacements - store connection explicitly in packets that may contain deep replaceables
 
     @io.papermc.paper.annotation.DoNotUse // Paper - No locale context
     public ClientboundSystemChatPacket(Component content, boolean overlay) {
@@ -18,7 +44,7 @@ public record ClientboundSystemChatPacket(@javax.annotation.Nullable net.kyori.a
     }
     // Spigot end
     // Paper start
-    public ClientboundSystemChatPacket {
+    private void checkHasContent() { // Fiddle - client perspective - deep replacements - store connection explicitly in packets that may contain deep replaceables
         com.google.common.base.Preconditions.checkArgument(!(adventure$content == null && content == null), "Component adventure$content and String (json) content cannot both be null");
     }
 
@@ -45,7 +71,7 @@ public record ClientboundSystemChatPacket(@javax.annotation.Nullable net.kyori.a
         if (this.adventure$content != null) {
             buf.writeComponent(this.adventure$content);
         } else if (this.content != null) {
-        buf.writeUtf(this.content, 262144); // Spigot
+        buf.writeUtf(this.content, 262144, true, false, DeepReplacementScope.EVERYTHING); // Spigot // Fiddle - client perspective - deep replacements - store connection explicitly in packets that may contain deep replaceables
         } else {
             throw new IllegalArgumentException("Must supply either adventure component or string json content");
         }
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundTagQueryPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundTagQueryPacket.java
index e778322664bdd88bc34605f82c90ca7a5994e2f5..7082ee822fd19ee584b31e4ae22eb4aad8711d0e 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundTagQueryPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundTagQueryPacket.java
@@ -3,19 +3,21 @@ package net.minecraft.network.protocol.game;
 import javax.annotation.Nullable;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.network.FriendlyByteBuf;
-import net.minecraft.network.protocol.Packet;
+import org.fiddlemc.fiddle.packet.PacketWithExplicitTargetClientConnection;
 
-public class ClientboundTagQueryPacket implements Packet<ClientGamePacketListener> {
+public class ClientboundTagQueryPacket extends PacketWithExplicitTargetClientConnection<ClientGamePacketListener> { // Fiddle - client perspective - deep replacements - store connection explicitly in packets that may contain deep replaceables
     private final int transactionId;
     @Nullable
     private final CompoundTag tag;
 
     public ClientboundTagQueryPacket(int transactionId, @Nullable CompoundTag nbt) {
+        super(); // Fiddle - client perspective - deep replacements - store connection explicitly in packets that may contain deep replaceables
         this.transactionId = transactionId;
         this.tag = nbt;
     }
 
     public ClientboundTagQueryPacket(FriendlyByteBuf buf) {
+        super(); // Fiddle - client perspective - deep replacements - store connection explicitly in packets that may contain deep replaceables
         this.transactionId = buf.readVarInt();
         this.tag = buf.readNbt();
     }
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateAdvancementsPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateAdvancementsPacket.java
index 053a66d714168f5e8a7cc5ff532190e80de887ca..527167693d64810ade85d1da1e967b9397d0be43 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateAdvancementsPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateAdvancementsPacket.java
@@ -9,16 +9,17 @@ import java.util.Set;
 import net.minecraft.advancements.Advancement;
 import net.minecraft.advancements.AdvancementProgress;
 import net.minecraft.network.FriendlyByteBuf;
-import net.minecraft.network.protocol.Packet;
 import net.minecraft.resources.ResourceLocation;
+import org.fiddlemc.fiddle.packet.PacketWithExplicitTargetClientConnection;
 
-public class ClientboundUpdateAdvancementsPacket implements Packet<ClientGamePacketListener> {
+public class ClientboundUpdateAdvancementsPacket extends PacketWithExplicitTargetClientConnection<ClientGamePacketListener> { // Fiddle - client perspective - deep replacements - store connection explicitly in packets that may contain deep replaceables
     private final boolean reset;
     private final Map<ResourceLocation, Advancement.Builder> added;
     private final Set<ResourceLocation> removed;
     private final Map<ResourceLocation, AdvancementProgress> progress;
 
     public ClientboundUpdateAdvancementsPacket(boolean clearCurrent, Collection<Advancement> toEarn, Set<ResourceLocation> toRemove, Map<ResourceLocation, AdvancementProgress> toSetProgress) {
+        super(); // Fiddle - client perspective - deep replacements - store connection explicitly in packets that may contain deep replaceables
         this.reset = clearCurrent;
         ImmutableMap.Builder<ResourceLocation, Advancement.Builder> builder = ImmutableMap.builder();
 
@@ -32,6 +33,7 @@ public class ClientboundUpdateAdvancementsPacket implements Packet<ClientGamePac
     }
 
     public ClientboundUpdateAdvancementsPacket(FriendlyByteBuf buf) {
+        super(); // Fiddle - client perspective - deep replacements - store connection explicitly in packets that may contain deep replaceables
         this.reset = buf.readBoolean();
         this.added = buf.readMap(FriendlyByteBuf::readResourceLocation, Advancement.Builder::fromNetwork);
         this.removed = buf.readCollection(Sets::newLinkedHashSetWithExpectedSize, FriendlyByteBuf::readResourceLocation);
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateRecipesPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateRecipesPacket.java
index 48c3443788692cf95eca384b166c017ab6e09028..5dcdd557d889039e434feeeff2d2085603fc8699 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateRecipesPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateRecipesPacket.java
@@ -5,18 +5,20 @@ import java.util.Collection;
 import java.util.List;
 import net.minecraft.core.registries.BuiltInRegistries;
 import net.minecraft.network.FriendlyByteBuf;
-import net.minecraft.network.protocol.Packet;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.world.item.crafting.Recipe;
+import org.fiddlemc.fiddle.packet.PacketWithExplicitTargetClientConnection;
 
-public class ClientboundUpdateRecipesPacket implements Packet<ClientGamePacketListener> {
+public class ClientboundUpdateRecipesPacket extends PacketWithExplicitTargetClientConnection<ClientGamePacketListener> { // Fiddle - client perspective - deep replacements - store connection explicitly in packets that may contain deep replaceables
     private final List<Recipe<?>> recipes;
 
     public ClientboundUpdateRecipesPacket(Collection<Recipe<?>> recipes) {
+        super(); // Fiddle - client perspective - deep replacements - store connection explicitly in packets that may contain deep replaceables
         this.recipes = Lists.newArrayList(recipes);
     }
 
     public ClientboundUpdateRecipesPacket(FriendlyByteBuf buf) {
+        super(); // Fiddle - client perspective - deep replacements - store connection explicitly in packets that may contain deep replaceables
         this.recipes = buf.readList(ClientboundUpdateRecipesPacket::fromNetwork);
     }
 
