From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Wed, 31 Jan 2024 15:11:12 +0100
Subject: [PATCH] Configuration to override sent feature flags

Adds global configuration that allows declaring feature flags that are always, or never, sent to connecting cilents.
In other words: the feature flags in the `always` list will be sent even if they are not enabled (or don't exist) on the server,
and the feature flags in the `never` list will never be sent, even if they are enabled on the server.

License: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)
Fiddle - https://fiddlemc.org

diff --git a/src/main/java/net/minecraft/server/network/ServerConfigurationPacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerConfigurationPacketListenerImpl.java
index cae10b963d153fb1777b18054796a45b2809342b..ea8053c90601cb15d53a1e8fec2b4bcd12a9e1c4 100644
--- a/src/main/java/net/minecraft/server/network/ServerConfigurationPacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerConfigurationPacketListenerImpl.java
@@ -70,7 +70,12 @@ public class ServerConfigurationPacketListenerImpl extends ServerCommonPacketLis
         this.send(new ClientboundCustomPayloadPacket(new BrandPayload(this.server.getServerModName())));
         LayeredRegistryAccess<RegistryLayer> layeredregistryaccess = this.server.registries();
 
-        this.send(new ClientboundUpdateEnabledFeaturesPacket(FeatureFlags.REGISTRY.toNames(this.server.getWorldData().enabledFeatures())));
+        // Fiddle start - override sent feature flags
+        var featureFlagsToSend = FeatureFlags.REGISTRY.toNames(this.server.getWorldData().enabledFeatures());
+        featureFlagsToSend.addAll(org.fiddlemc.fiddle.configuration.FiddleGlobalConfiguration.get().sendFeatureFlagsToClients.alwaysResourceLocations);
+        featureFlagsToSend.removeAll(org.fiddlemc.fiddle.configuration.FiddleGlobalConfiguration.get().sendFeatureFlagsToClients.neverResourceLocations);
+        this.send(new ClientboundUpdateEnabledFeaturesPacket(featureFlagsToSend));
+        // Fiddle end - override sent feature flags
         this.send(new ClientboundRegistryDataPacket((new RegistryAccess.ImmutableRegistryAccess(RegistrySynchronization.networkedRegistries(layeredregistryaccess))).freeze()));
         this.send(new ClientboundUpdateTagsPacket(TagNetworkSerialization.serializeTagsToNetwork(layeredregistryaccess)));
         this.addOptionalTasks();
diff --git a/src/main/java/org/fiddlemc/fiddle/configuration/FiddleGlobalConfiguration.java b/src/main/java/org/fiddlemc/fiddle/configuration/FiddleGlobalConfiguration.java
index 37236de96aaf38ffed201cbae052fbc5a7b94224..639f98a0ccb2db1cbd3597f5b33a78b93e4ab666 100644
--- a/src/main/java/org/fiddlemc/fiddle/configuration/FiddleGlobalConfiguration.java
+++ b/src/main/java/org/fiddlemc/fiddle/configuration/FiddleGlobalConfiguration.java
@@ -30,4 +30,49 @@ public class FiddleGlobalConfiguration extends ConfigurationPart {
     @Setting(Configuration.VERSION_FIELD)
     public int version = CURRENT_VERSION;
 
+    // Fiddle start - override sent feature flags
+    public SendFeatureFlagsToClients sendFeatureFlagsToClients;
+    public class SendFeatureFlagsToClients extends ConfigurationPart {
+
+        public List<String> always = List.of();
+        public List<String> never = List.of();
+
+        public transient Set<net.minecraft.resources.ResourceLocation> alwaysResourceLocations;
+        public transient Set<net.minecraft.resources.ResourceLocation> neverResourceLocations;
+
+        private Set<net.minecraft.resources.ResourceLocation> processElements(String name, List<String> elements) {
+            Set<net.minecraft.resources.ResourceLocation> processed = new HashSet<>(elements.size());
+            for (var element : elements) {
+                if (element.isBlank()) {
+                    LOGGER.warn("A value in send-feature-flags-to-clients." + name + " is blank");
+                    continue;
+                }
+                element = element.trim();
+                try {
+                    var resourceLocation = new net.minecraft.resources.ResourceLocation(element);
+                    if (!(resourceLocation.getNamespace().isBlank() || resourceLocation.getPath().isBlank())) {
+                        processed.add(resourceLocation);
+                        continue;
+                    }
+                } catch (Exception ignored) {
+                }
+                LOGGER.warn("The value '" + element + "' in send-feature-flags-to-clients." + name + " is not a valid namespaced key");
+            }
+            return processed;
+        }
+
+        @PostProcess
+        public void postProcess() {
+            alwaysResourceLocations = processElements("always", always);
+            neverResourceLocations = processElements("never", never);
+            for (var element : alwaysResourceLocations) {
+                if (neverResourceLocations.contains(element)) {
+                    LOGGER.warn("'" + element + "' is in both send-feature-flags-to-clients.always and send-feature-flags-to-clients.never");
+                }
+            }
+        }
+
+    }
+    // Fiddle end - override sent feature flags
+
 }
