From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Tue, 11 Jul 2023 16:46:24 +0200
Subject: [PATCH] Gameplay mechanics - Max banner patterns

Adds configuration (and implementation thereof) for the maximum number of banner patterns that players can use:
* A setting (`copyWithCraftingTable`) for the maximum number of patterns that can be on a banner when a player copies it with a crafting table.
* A setting (`createWithLoom`) for the maximum number of patterns that can be applied to a banner using a loom.
  Note that this setting does not work properly due to client-side issues: see the configuration setting Javadoc for more details.

License: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)
Fiddle - https://fiddlemc.org

diff --git a/src/main/java/net/minecraft/world/inventory/LoomMenu.java b/src/main/java/net/minecraft/world/inventory/LoomMenu.java
index c1c9cfd3f77b2dbbc39741d629c7dfb24a48d4f6..228b998ff6f4186ab46b80fbb3b6013505311ed7 100644
--- a/src/main/java/net/minecraft/world/inventory/LoomMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/LoomMenu.java
@@ -264,7 +264,14 @@ public class LoomMenu extends AbstractContainerMenu {
 
             if (holder != null) {
                 CompoundTag nbttagcompound = BlockItem.getBlockEntityData(itemstack);
-                boolean flag1 = nbttagcompound != null && nbttagcompound.contains("Patterns", 9) && !itemstack.isEmpty() && nbttagcompound.getList("Patterns", 10).size() >= 6;
+                // Fiddle start - gameplay mechanics - max banner patterns
+                var playerBukkitWorld = this.player.getWorld();
+                int maxBannerPatterns = playerBukkitWorld instanceof org.bukkit.craftbukkit.CraftWorld playerCraftWorld ? playerCraftWorld.getHandle().fiddleConfig().gameplayMechanics.maxBannerPatterns.createWithLoom : -1;
+                if (maxBannerPatterns < 0) {
+                    maxBannerPatterns = 6;
+                }
+                boolean flag1 = nbttagcompound != null && nbttagcompound.contains("Patterns", 9) && !itemstack.isEmpty() && nbttagcompound.getList("Patterns", 10).size() >= maxBannerPatterns;
+                // Fiddle end - gameplay mechanics - max banner patterns
 
                 if (flag1) {
                     this.selectedBannerPatternIndex.set(-1);
diff --git a/src/main/java/net/minecraft/world/item/crafting/BannerDuplicateRecipe.java b/src/main/java/net/minecraft/world/item/crafting/BannerDuplicateRecipe.java
index 046e9ea3434a1ed80a863a4dd295be0121f83993..e6f18675d473ce8475337480577131434c389c24 100644
--- a/src/main/java/net/minecraft/world/item/crafting/BannerDuplicateRecipe.java
+++ b/src/main/java/net/minecraft/world/item/crafting/BannerDuplicateRecipe.java
@@ -17,6 +17,13 @@ public class BannerDuplicateRecipe extends CustomRecipe {
 
     @Override
     public boolean matches(CraftingContainer inventory, Level world) {
+        // Fiddle start - gameplay mechanics - max banner patterns
+        int maxBannerPatterns = world.fiddleConfig().gameplayMechanics.maxBannerPatterns.copyWithCraftingTable;
+        if (maxBannerPatterns < 0) {
+            maxBannerPatterns = 6;
+        }
+        // Fiddle end - gameplay mechanics - max banner patterns
+
         DyeColor dyeColor = null;
         ItemStack itemStack = null;
         ItemStack itemStack2 = null;
@@ -37,7 +44,7 @@ public class BannerDuplicateRecipe extends CustomRecipe {
                 }
 
                 int j = BannerBlockEntity.getPatternCount(itemStack3);
-                if (j > 6) {
+                if (j > maxBannerPatterns) { // Fiddle - gameplay mechanics - max banner patterns
                     return false;
                 }
 
@@ -62,11 +69,44 @@ public class BannerDuplicateRecipe extends CustomRecipe {
 
     @Override
     public ItemStack assemble(CraftingContainer inventory, RegistryAccess registryManager) {
+        // Fiddle start - gameplay mechanics - max banner patterns
+        Level world = null;
+        // Get the world from the inventory owner
+        var inventoryOwner = inventory.getOwner();
+        if (inventoryOwner instanceof org.bukkit.inventory.BlockInventoryHolder blockInventoryOwner) {
+            var bukkitWorld = blockInventoryOwner.getBlock().getWorld();
+            if (bukkitWorld instanceof org.bukkit.craftbukkit.CraftWorld craftWorld) {
+                world = craftWorld.getHandle();
+            }
+        } else if (inventoryOwner instanceof org.bukkit.entity.Entity entityInventoryHolder) {
+            var bukkitWorld = entityInventoryHolder.getWorld();
+            if (bukkitWorld instanceof org.bukkit.craftbukkit.CraftWorld craftWorld) {
+                world = craftWorld.getHandle();
+            }
+        }
+        // If not set yet, get the world from the inventory viewers
+        if (world == null) {
+            for (var inventoryViewer : inventory.getViewers()) {
+                var bukkitWorld = inventoryViewer.getWorld();
+                if (bukkitWorld instanceof org.bukkit.craftbukkit.CraftWorld craftWorld) {
+                    world = craftWorld.getHandle();
+                    if (world != null) {
+                        break;
+                    }
+                }
+            }
+        }
+        int maxBannerPatterns = world == null ? -1 : world.fiddleConfig().gameplayMechanics.maxBannerPatterns.copyWithCraftingTable;
+        if (maxBannerPatterns < 0) {
+            maxBannerPatterns = 6;
+        }
+        // Fiddle end - gameplay mechanics - max banner patterns
+
         for(int i = 0; i < inventory.getContainerSize(); ++i) {
             ItemStack itemStack = inventory.getItem(i);
             if (!itemStack.isEmpty()) {
                 int j = BannerBlockEntity.getPatternCount(itemStack);
-                if (j > 0 && j <= 6) {
+                if (j > 0 && j <= maxBannerPatterns) { // Fiddle - gameplay mechanics - max banner patterns
                     return itemStack.copyWithCount(1);
                 }
             }
diff --git a/src/main/java/org/fiddlemc/fiddle/configuration/FiddleWorldConfiguration.java b/src/main/java/org/fiddlemc/fiddle/configuration/FiddleWorldConfiguration.java
index fbcccc1d76dd3ad0c0dc6c0ee35cfdf4c8442e64..0171910f024ca0191b71bcf58639f5fa03a5a6f0 100644
--- a/src/main/java/org/fiddlemc/fiddle/configuration/FiddleWorldConfiguration.java
+++ b/src/main/java/org/fiddlemc/fiddle/configuration/FiddleWorldConfiguration.java
@@ -32,4 +32,40 @@ public class FiddleWorldConfiguration extends ConfigurationPart {
     @Setting(Configuration.VERSION_FIELD)
     public int version = CURRENT_VERSION;
 
+    // Fiddle start - gameplay mechanics settings
+    public GameplayMechanics gameplayMechanics;
+    public class GameplayMechanics extends ConfigurationPart {
+
+        // Fiddle start - gameplay mechanics - max banner patterns
+        public MaxBannerPatterns maxBannerPatterns;
+
+        /**
+         * Note that even after increasing the max banner patterns, the client will only display the first 6
+         * in the list shown when hovering over an item in the inventory.
+         */
+        public class MaxBannerPatterns extends ConfigurationPart {
+
+            /**
+             * This setting does not work properly.
+             * While it works in setting the server-side max banner patterns when creating a banner in a loom,
+             * the client refuses to displays the shape buttons in the loom menu.
+             * Adding additional patterns can still be achieved either with a banner pattern, or by selecting
+             * a shape while a banner with fewer than 6 patterns is in the input slot, and then swapping it out
+             * with the intended recipient banner.
+             * <br>
+             * In the future, we should probably decide to mark this value as non-experimental (by making it
+             * no longer transient) if it is properly supported with the Fiddle client mod (by including the setting
+             * value in a packet sent to the client) - and simply document that it mostly works, but not smoothly,
+             * without the client mod.
+             */
+            public transient int createWithLoom = 6;
+
+            public int copyWithCraftingTable = 6;
+
+        }
+        // Fiddle end - gameplay mechanics - max banner patterns
+
+    }
+    // Fiddle end - gameplay mechanics settings
+
 }
