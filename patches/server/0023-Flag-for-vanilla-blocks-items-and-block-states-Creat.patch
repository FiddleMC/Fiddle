From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Wed, 3 Jan 2024 19:23:10 +0100
Subject: [PATCH] Flag for vanilla blocks, items and block states - Create

Adds an `isVanilla` field and corresponding method to `Block`, `Item` and `BlockState` indicating whether it is present in vanilla.
Also calls the corresponding `setVanilla` before registering vanilla instances to their respective registries.

License: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)
Fiddle - https://fiddlemc.org

diff --git a/src/main/java/net/minecraft/world/item/Item.java b/src/main/java/net/minecraft/world/item/Item.java
index c072e3e9742f733aad0d13833fb700c42ca1c356..7c037da519a6e487128c0e49b43cea80ff38a281 100644
--- a/src/main/java/net/minecraft/world/item/Item.java
+++ b/src/main/java/net/minecraft/world/item/Item.java
@@ -71,6 +71,29 @@ public class Item implements FeatureElement, ItemLike {
     private final FoodProperties foodProperties;
     private final FeatureFlagSet requiredFeatures;
 
+    // Fiddle start - flags for vanilla content - item
+    /**
+     * Whether this item is present in vanilla.
+     * <p>
+     *     This does not take into account whether any details of this item, such as its max stack size,
+     *     are different (were modified) from vanilla.
+     * </p>
+     * <p>
+     *     This must be set to true with {@link #setVanilla} before being registered to
+     *     {@link BuiltInRegistries#ITEM}.
+     * </p>
+     */
+    private boolean isVanilla;
+
+    public boolean isVanilla() {
+        return this.isVanilla;
+    }
+
+    public void setVanilla() {
+        this.isVanilla = true;
+    }
+    // Fiddle end - flags for vanilla content - item
+
     public static int getId(Item item) {
         return item == null ? 0 : BuiltInRegistries.ITEM.getId(item);
     }
diff --git a/src/main/java/net/minecraft/world/item/Items.java b/src/main/java/net/minecraft/world/item/Items.java
index f692149d91b525bda6dc79d489d7496ea24037e8..1cc0c79ea3df283a1713eb5ed24d47090b8613df 100644
--- a/src/main/java/net/minecraft/world/item/Items.java
+++ b/src/main/java/net/minecraft/world/item/Items.java
@@ -1363,6 +1363,7 @@ public class Items {
     }
 
     public static Item registerItem(ResourceKey<Item> key, Item item) {
+        item.setVanilla(); // Fiddle - flags for vanilla content - item
         if (item instanceof BlockItem) {
             ((BlockItem)item).registerBlocks(Item.BY_BLOCK, item);
         }
diff --git a/src/main/java/net/minecraft/world/level/block/Block.java b/src/main/java/net/minecraft/world/level/block/Block.java
index 4d50dd92a7f3187ee1d8edb926e7c273c8156549..1cf54034251c5f9cb7e936a0ffd25a38f8b01c06 100644
--- a/src/main/java/net/minecraft/world/level/block/Block.java
+++ b/src/main/java/net/minecraft/world/level/block/Block.java
@@ -130,6 +130,32 @@ public class Block extends BlockBehaviour implements ItemLike {
         return Block.CODEC;
     }
 
+    // Fiddle start - flags for vanilla content - block
+    /**
+     * Whether this block is present in vanilla.
+     * <p>
+     *     This does not take into account whether any details of this block, such as its properties,
+     *     are different (were modified) from vanilla.
+     * </p>
+     * <p>
+     *     All block states of this block have the same value in {@link BlockState#isVanilla()}.
+     * </p>
+     * <p>
+     *     This must be set to true with {@link #setVanilla} before being registered to
+     *     {@link BuiltInRegistries#BLOCK}.
+     * </p>
+     */
+    private boolean isVanilla;
+
+    public boolean isVanilla() {
+        return this.isVanilla;
+    }
+
+    public void setVanilla() {
+        this.isVanilla = true;
+    }
+    // Fiddle end - flags for vanilla content - block
+
     public static int getId(@Nullable BlockState state) {
         if (state == null) {
             return 0;
diff --git a/src/main/java/net/minecraft/world/level/block/Blocks.java b/src/main/java/net/minecraft/world/level/block/Blocks.java
index 4d5bc4d46fa90de1d89e15bd5dc053d22e07a3d9..473b6769c50b74ed01267cecb0c504c35f34cf46 100644
--- a/src/main/java/net/minecraft/world/level/block/Blocks.java
+++ b/src/main/java/net/minecraft/world/level/block/Blocks.java
@@ -1296,10 +1296,12 @@ public class Blocks {
     }
 
     public static Block register(String id, Block block) {
+        block.setVanilla(); // Fiddle - flags for vanilla content - block
         return Registry.register(BuiltInRegistries.BLOCK, id, block);
     }
 
     public static Block register(ResourceKey<Block> key, Block block) {
+        block.setVanilla(); // Fiddle - flags for vanilla content - block
         return Registry.register(BuiltInRegistries.BLOCK, key, block);
     }
 
@@ -1310,6 +1312,11 @@ public class Blocks {
     static {
         for(Block block : BuiltInRegistries.BLOCK) {
             for(BlockState blockState : block.getStateDefinition().getPossibleStates()) {
+                // Fiddle start - flags for vanilla content - block state
+                if (block.isVanilla()) {
+                    blockState.setVanilla();
+                }
+                // Fiddle end - flags for vanilla content - block state
                 Block.BLOCK_STATE_REGISTRY.add(blockState);
                 blockState.initCache();
             }
diff --git a/src/main/java/net/minecraft/world/level/block/state/BlockState.java b/src/main/java/net/minecraft/world/level/block/state/BlockState.java
index a9b0f5950b6f97ea4c2a1075946b92008b62c9d9..acb458e03bfffdae406eae99eb81ce0c3078c9ea 100644
--- a/src/main/java/net/minecraft/world/level/block/state/BlockState.java
+++ b/src/main/java/net/minecraft/world/level/block/state/BlockState.java
@@ -25,6 +25,32 @@ public class BlockState extends BlockBehaviour.BlockStateBase {
         super(block, propertyMap, codec);
     }
 
+    // Fiddle start - flags for vanilla content - block state
+    /**
+     * Whether this block state is present in vanilla.
+     * <p>
+     *     This does not take into account whether any details of this block state, such as its collision box,
+     *     are different (were modified) from vanilla.
+     * </p>
+     * <p>
+     *     This state's block has the same value in {@link Block#isVanilla()}.
+     * </p>
+     * <p>
+     *     This must be set to true with {@link #setVanilla} before being registered to
+     *     {@link Block#BLOCK_STATE_REGISTRY}.
+     * </p>
+     */
+    private boolean isVanilla;
+
+    public boolean isVanilla() {
+        return this.isVanilla;
+    }
+
+    public void setVanilla() {
+        this.isVanilla = true;
+    }
+    // Fiddle end - flags for vanilla content - block state
+
     @Override
     protected BlockState asState() {
         return this;
