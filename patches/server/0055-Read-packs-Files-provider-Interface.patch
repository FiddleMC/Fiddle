From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Mon, 15 May 2023 20:37:19 +0200
Subject: [PATCH] Read packs - Files provider - Interface

License: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)
Fiddle - https://fiddlemc.org

diff --git a/src/main/java/org/fiddlemc/fiddle/pack/read/filesprovider/CachingRegularFileInPack.java b/src/main/java/org/fiddlemc/fiddle/pack/read/filesprovider/CachingRegularFileInPack.java
new file mode 100644
index 0000000000000000000000000000000000000000..80422ec0a3f9bd428ee8c666bcaef990764436db
--- /dev/null
+++ b/src/main/java/org/fiddlemc/fiddle/pack/read/filesprovider/CachingRegularFileInPack.java
@@ -0,0 +1,45 @@
+// Fiddle - read packs - pack files - caching regular file implementation
+
+package org.fiddlemc.fiddle.pack.read.filesprovider;
+
+import org.fiddlemc.fiddle.pack.exception.PackException;
+import org.jetbrains.annotations.Nullable;
+
+/**
+ * A simple base implementation of {@link RegularFileInPack} that can cache the byte contents.
+ */
+public abstract class CachingRegularFileInPack implements RegularFileInPack {
+
+    /**
+     * The byte content of this file, or null if not currently cached.
+     */
+    private byte @Nullable [] cachedBytes;
+
+    protected CachingRegularFileInPack() {}
+
+    /**
+     * @return The byte contents of this file.
+     */
+    protected abstract byte[] readBytes() throws PackException;
+
+    /**
+     * @param cache Whether to cache the result (must be cleared with {@link #clearCachedBytes()} later).
+     * @return The bytes in this file.
+     */
+    public byte[] getBytes(boolean cache) throws PackException {
+        if (this.cachedBytes != null) {
+            return this.cachedBytes;
+        }
+        byte[] bytes = this.readBytes();
+        if (cache) {
+            this.cachedBytes = bytes;
+        }
+        return bytes;
+    }
+
+    @Override
+    public void clearCachedBytes() {
+        this.cachedBytes = null;
+    }
+
+}
diff --git a/src/main/java/org/fiddlemc/fiddle/pack/read/filesprovider/DirectoryInPack.java b/src/main/java/org/fiddlemc/fiddle/pack/read/filesprovider/DirectoryInPack.java
new file mode 100644
index 0000000000000000000000000000000000000000..83b4e3ec84d09df9425fd7eaf6cf299a420ff174
--- /dev/null
+++ b/src/main/java/org/fiddlemc/fiddle/pack/read/filesprovider/DirectoryInPack.java
@@ -0,0 +1,16 @@
+// Fiddle - read packs - pack files - provider interface
+
+package org.fiddlemc.fiddle.pack.read.filesprovider;
+
+/**
+ * Provides access to one of the directories in a pack
+ * that are provided by a {@link FiddlePackFilesProvider}.
+ */
+public interface DirectoryInPack extends FileInPack, PackFilesContainer<RuntimeException> {
+
+    @Override
+    default boolean isDirectory() {
+        return true;
+    }
+
+}
diff --git a/src/main/java/org/fiddlemc/fiddle/pack/read/filesprovider/FiddlePackFilesProvider.java b/src/main/java/org/fiddlemc/fiddle/pack/read/filesprovider/FiddlePackFilesProvider.java
new file mode 100644
index 0000000000000000000000000000000000000000..15a1989d2a616afc3913afeec42ceaab2555f92f
--- /dev/null
+++ b/src/main/java/org/fiddlemc/fiddle/pack/read/filesprovider/FiddlePackFilesProvider.java
@@ -0,0 +1,74 @@
+// Fiddle - read packs - pack files - provider interface
+
+package org.fiddlemc.fiddle.pack.read.filesprovider;
+
+import org.fiddlemc.fiddle.pack.read.StartupPackLoadPhase;
+import org.fiddlemc.fiddle.pack.exception.PackException;
+
+import java.io.File;
+import java.io.IOException;
+
+/**
+ * The provider for the file contents of a Fiddle pack.
+ * <br>
+ * To provide the files in the pack, typically some I/O operations will be performed,
+ * such as reading an archive file.
+ * <br>
+ * Details about the pack, such as the files in it or their contents, may be cached at any point.
+ * To clear the cache and clear any used I/O resources, {@linkplain #closeHandlesAndClearCache()} must be called.
+ */
+public interface FiddlePackFilesProvider extends PackFilesContainer<PackException> {
+
+    /**
+     * @return A location for this pack, which is human-readable way of describing where this pack was detected.
+     * This is most likely a path to a file or directory on the file system.
+     * This text can be used to describe the pack when errors occur at a lower level than its post-meta content parsing
+     * (at which point we can refer to a pack by its already parsed name).
+     */
+    String getLocation();
+
+    /**
+     * Closes any I/O resources currently open, and clears any cached pack details, such as its files or their contents.
+     */
+    void closeHandlesAndClearCache() throws IOException;
+
+    default void closeHandlesAndClearCacheUnlessInStartupLoadPhase() throws IOException {
+        if (!StartupPackLoadPhase.isInStartupLoadPhase()) {
+            this.closeHandlesAndClearCache();
+        }
+    }
+
+    /**
+     * A utility method to get the name of a file from a path.
+     *
+     * @param path A path, with potentially some path separators such as \ or /.
+     * @return The name of the file denoted by this path (the part after the final separator).
+     * Any path separators at the end of the path will be trimmed.
+     * If the given path is empty, an empty string will be returned.
+     */
+    static String getNameFromPath(String path) {
+        if (path.isEmpty()) {
+            return "";
+        }
+        while (true) {
+            char lastCharacter = path.charAt(path.length() - 1);
+            if (lastCharacter == '/' || lastCharacter == '\\' || lastCharacter == File.pathSeparatorChar) {
+                if (path.length() == 1) {
+                    return "";
+                }
+                path = path.substring(0, path.length() - 1);
+                continue;
+            }
+            break;
+        }
+        int lastIndex = path.lastIndexOf('/');
+        if (lastIndex == -1) {
+            lastIndex = path.lastIndexOf('\\');
+            if (lastIndex == -1) {
+                lastIndex = path.lastIndexOf(File.pathSeparatorChar);
+            }
+        }
+        return lastIndex == -1 ? path : path.substring(lastIndex + 1);
+    }
+
+}
diff --git a/src/main/java/org/fiddlemc/fiddle/pack/read/filesprovider/FileInPack.java b/src/main/java/org/fiddlemc/fiddle/pack/read/filesprovider/FileInPack.java
new file mode 100644
index 0000000000000000000000000000000000000000..4d2b83db135a987a12bd58f31d6f5a4242b10a1c
--- /dev/null
+++ b/src/main/java/org/fiddlemc/fiddle/pack/read/filesprovider/FileInPack.java
@@ -0,0 +1,23 @@
+// Fiddle - read packs - pack files - provider interface
+
+package org.fiddlemc.fiddle.pack.read.filesprovider;
+
+import org.fiddlemc.fiddle.pack.exception.PackException;
+
+/**
+ * A common base class for {@link RegularFileInPack} and {@link DirectoryInPack}.
+ */
+public interface FileInPack {
+
+    /**
+     * @return Whether this file is a {@linkplain DirectoryInPack directory}.
+     * If false, it is a {@linkplain RegularFileInPack regular file}.
+     */
+    boolean isDirectory();
+
+    /**
+     * @return The name of this file (not the full path).
+     */
+    String getName() throws PackException;
+
+}
diff --git a/src/main/java/org/fiddlemc/fiddle/pack/read/filesprovider/PackFilesContainer.java b/src/main/java/org/fiddlemc/fiddle/pack/read/filesprovider/PackFilesContainer.java
new file mode 100644
index 0000000000000000000000000000000000000000..a37ea02af73c1e912ffaf2834cae7713e9cf5797
--- /dev/null
+++ b/src/main/java/org/fiddlemc/fiddle/pack/read/filesprovider/PackFilesContainer.java
@@ -0,0 +1,220 @@
+// Fiddle - read packs - pack files - provider interface
+
+package org.fiddlemc.fiddle.pack.read.filesprovider;
+
+import it.unimi.dsi.fastutil.Pair;
+import org.fiddlemc.fiddle.pack.exception.PackException;
+import org.jetbrains.annotations.Nullable;
+
+import java.io.File;
+import java.util.List;
+import java.util.stream.Stream;
+
+/**
+ * A common interface for {@link FiddlePackFilesProvider} and {@link DirectoryInPack}.
+ */
+public interface PackFilesContainer<GetTopLevelFilesException extends Throwable> {
+
+    /**
+     * @return All top-level files in this container.
+     */
+    Stream<? extends FileInPack> getTopLevelFilesStream() throws GetTopLevelFilesException;
+
+    /**
+     * @see #getTopLevelFilesStream()
+     */
+    default List<? extends FileInPack> getTopLevelFiles() throws GetTopLevelFilesException {
+        return this.getTopLevelFilesStream().toList();
+    }
+
+    /**
+     * @return The same as {@linkplain #getTopLevelFilesStream()},
+     * but filtered for only the {@link RegularFileInPack} instances.
+     */
+    default Stream<? extends RegularFileInPack> getTopLevelRegularFilesStream() throws GetTopLevelFilesException {
+        return this.getTopLevelFilesStream().filter(file -> file instanceof RegularFileInPack).map(file -> (RegularFileInPack) file);
+    }
+
+    /**
+     * @see #getTopLevelRegularFilesStream()
+     */
+    default List<? extends RegularFileInPack> getTopLevelRegularFiles() throws GetTopLevelFilesException {
+        return this.getTopLevelRegularFilesStream().toList();
+    }
+
+    /**
+     * @return The same as {@linkplain #getTopLevelFilesStream()},
+     * but filtered for only the {@link DirectoryInPack} instances.
+     */
+    default Stream<? extends DirectoryInPack> getTopLevelDirectoriesStream() throws GetTopLevelFilesException {
+        return this.getTopLevelFilesStream().filter(file -> file instanceof DirectoryInPack).map(file -> (DirectoryInPack) file);
+    }
+
+    /**
+     * @see #getTopLevelRegularFilesStream()
+     */
+    default List<? extends DirectoryInPack> getTopLevelDirectories() throws GetTopLevelFilesException {
+        return this.getTopLevelDirectoriesStream().toList();
+    }
+
+    /**
+     * @return The {@linkplain #getTopLevelFiles() top-level file} in this container with the given name,
+     * or null if none exists.
+     */
+    default @Nullable FileInPack getTopLevelFile(String name) throws GetTopLevelFilesException {
+        return getByNameOutOfFiles(this.getTopLevelFilesStream(), name);
+    }
+
+    /**
+     * @return The same as {@link #getTopLevelFile(String)},
+     * but only if the resulting file is a {@link RegularFileInPack} (and null otherwise).
+     */
+    default @Nullable RegularFileInPack getTopLevelRegularFile(String name) throws GetTopLevelFilesException {
+        return this.getTopLevelFile(name) instanceof RegularFileInPack regularFile ? regularFile : null;
+    }
+
+    /**
+     * @return The same as {@link #getTopLevelFile(String)},
+     * but only if the resulting file is a {@link DirectoryInPack} (and null otherwise).
+     */
+    default @Nullable DirectoryInPack getTopLevelDirectory(String name) throws GetTopLevelFilesException {
+        return this.getTopLevelFile(name) instanceof DirectoryInPack directory ? directory : null;
+    }
+
+    /**
+     * @return The file denoted by the given path, or null if it does not exist.
+     * Any leading or trailing path separator characters are ignored.
+     * <br>
+     * This returns null if given an empty string, and does not support dots (such as '.' or '..').
+     */
+    default @Nullable FileInPack getFileByPath(String path) throws GetTopLevelFilesException {
+        if (path.isEmpty()) {
+            return null;
+        }
+        while (true) {
+            char firstCharacter = path.charAt(0);
+            if (firstCharacter == '/' || firstCharacter == '\\' || firstCharacter == File.pathSeparatorChar) {
+                if (path.length() == 1) {
+                    return null;
+                }
+                path = path.substring(1);
+                continue;
+            }
+            char lastCharacter = path.charAt(path.length() - 1);
+            if (lastCharacter == '/' || lastCharacter == '\\' || lastCharacter == File.pathSeparatorChar) {
+                if (path.length() == 1) {
+                    return null;
+                }
+                path = path.substring(0, path.length() - 1);
+                continue;
+            }
+            break;
+        }
+        int firstPathSeparatorIndex = path.indexOf('/');
+        if (firstPathSeparatorIndex == -1) {
+            firstPathSeparatorIndex = path.indexOf('\\');
+            if (firstPathSeparatorIndex == -1) {
+                firstPathSeparatorIndex = path.indexOf(File.pathSeparatorChar);
+            }
+        }
+        if (firstPathSeparatorIndex == -1) {
+            return this.getTopLevelFile(path);
+        }
+        @Nullable DirectoryInPack topLevelDirectory = this.getTopLevelDirectory(path.substring(0, firstPathSeparatorIndex));
+        return topLevelDirectory != null ? topLevelDirectory.getFileByPath(path.substring(firstPathSeparatorIndex + 1)) : null;
+    }
+
+    /**
+     * @return The same as {@link #getFileByPath(String)},
+     * but only if the resulting file is a {@link RegularFileInPack} (and null otherwise).
+     */
+    default @Nullable RegularFileInPack getRegularFileByPath(String path) throws GetTopLevelFilesException {
+        return this.getFileByPath(path) instanceof RegularFileInPack regularFile ? regularFile : null;
+    }
+
+    /**
+     * @return The same as {@link #getFileByPath(String)},
+     * but only if the resulting file is a {@link DirectoryInPack} (and null otherwise).
+     */
+    default @Nullable DirectoryInPack getDirectoryByPath(String path) throws GetTopLevelFilesException {
+        return this.getFileByPath(path) instanceof DirectoryInPack directory ? directory : null;
+    }
+
+    /**
+     * @return Whether this directory contains a {@linkplain RegularFileInPack regular file},
+     * or some directory in this directory transitively contains a nested regular file.
+     */
+    default boolean containsAnyNestedRegularFile() throws GetTopLevelFilesException {
+        return this.getTopLevelRegularFilesStream().findAny().isPresent() ||
+            this.getTopLevelDirectoriesStream().anyMatch(DirectoryInPack::containsAnyNestedRegularFile);
+    }
+
+    default Stream<RegularFileInPack> getNestedRegularFilesStream() throws GetTopLevelFilesException {
+        return this.getTopLevelDirectoriesStream()
+            .map(PackFilesContainer::getNestedRegularFilesStream)
+            .reduce(this.getTopLevelRegularFilesStream().map(topLevelRegularFile -> (RegularFileInPack) topLevelRegularFile), Stream::concat);
+    }
+
+    /**
+     * @see #getNestedRegularFilesStream()
+     */
+    default List<? extends RegularFileInPack> getNestedRegularFiles() throws GetTopLevelFilesException {
+        return this.getNestedRegularFilesStream().toList();
+    }
+
+    default Stream<Pair<RegularFileInPack, String>> getNestedRegularFilesWithPathsStream() throws GetTopLevelFilesException, PackException {
+        try {
+            return this.getTopLevelDirectoriesStream()
+                .map(topLevelDirectory -> {
+                    try {
+                        String directoryName = topLevelDirectory.getName();
+                        return topLevelDirectory.getNestedRegularFilesWithPathsStream()
+                            .map(topLevelDirectoryNestedFileWithPath -> Pair.of(topLevelDirectoryNestedFileWithPath.left(), directoryName + "/" + topLevelDirectoryNestedFileWithPath.right()));
+                    } catch (PackException e) {
+                        throw new RuntimeException(e);
+                    }
+                }).reduce(this.getTopLevelRegularFilesStream().map(topLevelRegularFile -> {
+                    try {
+                        return Pair.of(topLevelRegularFile, topLevelRegularFile.getName());
+                    } catch (PackException e) {
+                        throw new RuntimeException(e);
+                    }
+                }), Stream::concat);
+        } catch (RuntimeException e) {
+            if (e.getCause() instanceof PackException cause) {
+                throw cause;
+            }
+            throw e;
+        }
+    }
+
+    /**
+     * @see #getNestedRegularFilesStream()
+     */
+    default List<Pair<RegularFileInPack, String>> getNestedRegularFilesWithPaths() throws GetTopLevelFilesException, PackException {
+        return this.getNestedRegularFilesWithPathsStream().toList();
+    }
+
+    static <T extends FileInPack> @Nullable T getByNameOutOfFiles(Stream<T> files, String name) {
+        return files.filter(file -> {
+            try {
+                if (file.getName().equals(name)) {
+                    return true;
+                }
+            } catch (PackException ignored) {}
+            return false;
+        }).findFirst().orElse(null);
+    }
+
+    static <T extends FileInPack> @Nullable T getByNameOutOfFiles(Iterable<T> files, String name) {
+        for (T file : files) {
+            try {
+                if (file.getName().equals(name)) {
+                    return file;
+                }
+            } catch (PackException ignored) {}
+        }
+        return null;
+    }
+
+}
diff --git a/src/main/java/org/fiddlemc/fiddle/pack/read/filesprovider/RegularFileInPack.java b/src/main/java/org/fiddlemc/fiddle/pack/read/filesprovider/RegularFileInPack.java
new file mode 100644
index 0000000000000000000000000000000000000000..0aae8b411b376a7c4ff8cff7cd52235fef65316f
--- /dev/null
+++ b/src/main/java/org/fiddlemc/fiddle/pack/read/filesprovider/RegularFileInPack.java
@@ -0,0 +1,79 @@
+// Fiddle - read packs - pack files - provider interface
+
+package org.fiddlemc.fiddle.pack.read.filesprovider;
+
+import com.google.common.base.Charsets;
+import net.minecraft.server.packs.resources.IoSupplier;
+import org.fiddlemc.fiddle.pack.exception.PackException;
+import org.jetbrains.annotations.Nullable;
+
+import java.io.ByteArrayInputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.util.function.Supplier;
+
+/**
+ * Provides access to one of the regular files in a pack
+ * that are provided by a {@link FiddlePackFilesProvider}.
+ */
+public interface RegularFileInPack extends FileInPack {
+
+    @Override
+    default boolean isDirectory() {
+        return false;
+    }
+
+    /**
+     * @param cache Whether to cache the result (must be cleared with {@link #clearCachedBytes()} later).
+     *              If true, an attempt to cache is made, but not guaranteed.
+     * @return The bytes in this file.
+     */
+    byte[] getBytes(boolean cache) throws PackException;
+
+    /**
+     * @return The content of this file as a {@linkplain Charsets#UTF_8 UTF-8 encoded} string.
+     *
+     * @see #getBytes(boolean)
+     */
+    default String getString(boolean cache) throws PackException {
+        return new String(this.getBytes(cache), Charsets.UTF_8);
+    }
+
+    default InputStream getInputStream(boolean cache) throws PackException {
+        return new ByteArrayInputStream(this.getBytes(cache));
+    }
+
+    default IoSupplier<InputStream> getInputStreamSupplier(boolean cache) {
+        return this.getInputStreamSupplier(cache, null);
+    }
+
+    default IoSupplier<InputStream> getInputStreamSupplier(boolean cache, @Nullable Supplier<@Nullable String> pathSupplier) {
+        return () -> {
+            try {
+                return this.getInputStream(cache);
+            } catch (PackException e) {
+                @Nullable String pathString;
+                if (pathSupplier == null) {
+                    pathString = null;
+                } else {
+                    @Nullable String path = pathSupplier.get();
+                    if (path == null) {
+                        pathString = null;
+                    } else {
+                        pathString = "('" + path + "') ";
+                    }
+                }
+                throw new IOException("An exception occurred while reading a resource " + pathString + "in a Fiddle data pack: " + e.getMessage(), e);
+            }
+        };
+    }
+
+    /**
+     * Clears the cached contents of this file, if any.
+     * <br>
+     * Note that this is only for lowering memory usage, and not for checking for changes in file contents:
+     * after calling this method, the underlying open I/O handle is still the same.
+     */
+    void clearCachedBytes();
+
+}
