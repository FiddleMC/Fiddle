From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Sat, 29 Jul 2023 12:54:28 +0200
Subject: [PATCH] Client perspective - Deep replacements - Pass replacement
 scope

License: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)
Fiddle - https://fiddlemc.org

diff --git a/src/main/java/net/minecraft/nbt/CompoundTag.java b/src/main/java/net/minecraft/nbt/CompoundTag.java
index eea9866aecb7189455319d83561fcef35a777d7a..24631fb4eeb3f39b1560d4aca94e766121c7214f 100644
--- a/src/main/java/net/minecraft/nbt/CompoundTag.java
+++ b/src/main/java/net/minecraft/nbt/CompoundTag.java
@@ -176,9 +176,16 @@ public class CompoundTag implements Tag {
 
     @Override
     public void write(DataOutput output) throws IOException {
+        // Fiddle start - client perspective - deep replacements - pass scope
+        throw new UnsupportedOperationException(this.getClass().getSimpleName() + ".write(DataOutput) without a replacement scope is not supported");
+    }
+
+    @Override
+    public void write(DataOutput output, @org.jetbrains.annotations.Nullable org.fiddlemc.fiddle.packet.deepreplacement.ClientPerspectiveAndSettingsSupplier clientPerspectiveAndSettings, org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacementScope replacementScope) throws IOException {
+        // Fiddle end - client perspective - deep replacements - pass scope
         for(String string : this.tags.keySet()) {
             Tag tag = this.tags.get(string);
-            writeNamedTag(string, tag, output);
+            writeNamedTag(string, tag, output, clientPerspectiveAndSettings, replacementScope); // Fiddle - client perspective - deep replacements - pass scope
         }
 
         output.writeByte(0);
@@ -532,11 +539,11 @@ public class CompoundTag implements Tag {
         return this.tags.hashCode();
     }
 
-    private static void writeNamedTag(String key, Tag element, DataOutput output) throws IOException {
+    private static void writeNamedTag(String key, Tag element, DataOutput output, @org.jetbrains.annotations.Nullable org.fiddlemc.fiddle.packet.deepreplacement.ClientPerspectiveAndSettingsSupplier clientPerspectiveAndSettings, org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacementScope replacementScope) throws IOException { // Fiddle - client perspective - deep replacements - pass scope
         output.writeByte(element.getId());
         if (element.getId() != 0) {
             output.writeUTF(key);
-            element.write(output);
+            element.write(output, clientPerspectiveAndSettings, replacementScope); // Fiddle - client perspective - deep replacements - pass scope
         }
     }
 
diff --git a/src/main/java/net/minecraft/nbt/ListTag.java b/src/main/java/net/minecraft/nbt/ListTag.java
index 24ad8d22b5180cd7d7f793e3074e438f9192448f..d70b0257ed990444a531e65cb275bbacc50b96b1 100644
--- a/src/main/java/net/minecraft/nbt/ListTag.java
+++ b/src/main/java/net/minecraft/nbt/ListTag.java
@@ -156,6 +156,13 @@ public class ListTag extends CollectionTag<Tag> {
 
     @Override
     public void write(DataOutput output) throws IOException {
+        // Fiddle start - client perspective - deep replacements - pass scope
+        throw new UnsupportedOperationException(this.getClass().getSimpleName() + ".write(DataOutput) without a replacement scope is not supported");
+    }
+
+    @Override
+    public void write(DataOutput output, @org.jetbrains.annotations.Nullable org.fiddlemc.fiddle.packet.deepreplacement.ClientPerspectiveAndSettingsSupplier clientPerspectiveAndSettings, org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacementScope replacementScope) throws IOException {
+        // Fiddle end - client perspective - deep replacements - pass scope
         if (this.list.isEmpty()) {
             this.type = 0;
         } else {
@@ -169,7 +176,7 @@ public class ListTag extends CollectionTag<Tag> {
         while (iterator.hasNext()) {
             Tag nbtbase = (Tag) iterator.next();
 
-            nbtbase.write(output);
+            nbtbase.write(output, clientPerspectiveAndSettings, replacementScope); // Fiddle end - client perspective - deep replacements - pass scope
         }
 
     }
diff --git a/src/main/java/net/minecraft/nbt/NbtIo.java b/src/main/java/net/minecraft/nbt/NbtIo.java
index c2044d2e8ce2d4747aa73ba90e5b975b1b7d2c19..e54f0cc320088d02366ac082a4d6bb14e74f4d21 100644
--- a/src/main/java/net/minecraft/nbt/NbtIo.java
+++ b/src/main/java/net/minecraft/nbt/NbtIo.java
@@ -313,7 +313,14 @@ public class NbtIo {
     }
 
     public static void write(CompoundTag nbt, DataOutput output) throws IOException {
-        NbtIo.writeUnnamedTagWithFallback(nbt, output);
+        // Fiddle start - client perspective - deep replacements - pass scope
+        // The only occurrence of NbtIo#write that is network-related is in FriendlyByteBuf#writeNbt, so by default we assume that calls are not network-related and therefore do not need replacements
+        write(nbt, output, null, org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacementScope.NOTHING);
+    }
+
+    public static void write(CompoundTag nbt, DataOutput output, @org.jetbrains.annotations.Nullable org.fiddlemc.fiddle.packet.deepreplacement.ClientPerspectiveAndSettingsSupplier clientPerspectiveAndSettings, org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacementScope replacementScope) throws IOException {
+        NbtIo.writeUnnamedTagWithFallback(nbt, output, clientPerspectiveAndSettings, replacementScope);
+        // Fiddle end - client perspective - deep replacements - pass scope
     }
 
     public static void parse(DataInput input, StreamTagVisitor scanner, NbtAccounter tracker) throws IOException {
@@ -347,23 +354,25 @@ public class NbtIo {
         return (Tag) (b0 == 0 ? EndTag.INSTANCE : NbtIo.readTagSafe(input, tracker, b0));
     }
 
-    public static void writeAnyTag(Tag nbt, DataOutput output) throws IOException {
+    public static void writeAnyTag(Tag nbt, DataOutput output, @org.jetbrains.annotations.Nullable org.fiddlemc.fiddle.packet.deepreplacement.ClientPerspectiveAndSettingsSupplier clientPerspectiveAndSettings, org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacementScope replacementScope) throws IOException {
         output.writeByte(nbt.getId());
         if (nbt.getId() != 0) {
-            nbt.write(output);
+            nbt.write(output, clientPerspectiveAndSettings, replacementScope); // Fiddle - client perspective - deep replacements - pass scope
         }
     }
 
-    public static void writeUnnamedTag(Tag nbt, DataOutput output) throws IOException {
+    public static void writeUnnamedTag(Tag nbt, DataOutput output, @org.jetbrains.annotations.Nullable org.fiddlemc.fiddle.packet.deepreplacement.ClientPerspectiveAndSettingsSupplier clientPerspectiveAndSettings, org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacementScope replacementScope) throws IOException { // Fiddle - client perspective - deep replacements - pass scope
         output.writeByte(nbt.getId());
         if (nbt.getId() != 0) {
             output.writeUTF("");
-            nbt.write(output);
+            nbt.write(output, clientPerspectiveAndSettings, replacementScope); // Fiddle - client perspective - deep replacements - pass scope
         }
     }
 
-    public static void writeUnnamedTagWithFallback(Tag nbt, DataOutput output) throws IOException {
-        NbtIo.writeUnnamedTag(nbt, new NbtIo.StringFallbackDataOutput(output));
+    // Fiddle start - client perspective - deep replacements - pass scope
+    public static void writeUnnamedTagWithFallback(Tag nbt, DataOutput output, @org.jetbrains.annotations.Nullable org.fiddlemc.fiddle.packet.deepreplacement.ClientPerspectiveAndSettingsSupplier clientPerspectiveAndSettings, org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacementScope replacementScope) throws IOException {
+        NbtIo.writeUnnamedTag(nbt, new NbtIo.StringFallbackDataOutput(output), clientPerspectiveAndSettings, replacementScope);
+        // Fiddle end - client perspective - deep replacements - pass scope
     }
 
     private static Tag readUnnamedTag(DataInput input, NbtAccounter tracker) throws IOException {
diff --git a/src/main/java/net/minecraft/nbt/StringTag.java b/src/main/java/net/minecraft/nbt/StringTag.java
index dab0920dcd21dc67796d9464a10c53512bd28792..0ad7ffe53b26136bd0aada84db3fe6662162c305 100644
--- a/src/main/java/net/minecraft/nbt/StringTag.java
+++ b/src/main/java/net/minecraft/nbt/StringTag.java
@@ -67,6 +67,13 @@ public class StringTag implements Tag {
 
     @Override
     public void write(DataOutput output) throws IOException {
+        // Fiddle start - client perspective - deep replacements - pass scope
+        throw new UnsupportedOperationException(this.getClass().getSimpleName() + ".write(DataOutput) without a replacement scope is not supported");
+    }
+
+    @Override
+    public void write(DataOutput output, @org.jetbrains.annotations.Nullable org.fiddlemc.fiddle.packet.deepreplacement.ClientPerspectiveAndSettingsSupplier clientPerspectiveAndSettings, org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacementScope replacementScope) throws IOException {
+        // Fiddle end - client perspective - deep replacements - pass scope
         output.writeUTF(this.data);
     }
 
diff --git a/src/main/java/net/minecraft/nbt/Tag.java b/src/main/java/net/minecraft/nbt/Tag.java
index 0c3fb39dfff42cc322b82c6da885d39f866aee41..95556e90baa420e5c00d922575ef298368288dd0 100644
--- a/src/main/java/net/minecraft/nbt/Tag.java
+++ b/src/main/java/net/minecraft/nbt/Tag.java
@@ -26,6 +26,13 @@ public interface Tag {
 
     void write(DataOutput output) throws IOException;
 
+    // Fiddle start - client perspective - deep replacements - pass scope
+    default void write(DataOutput output, @org.jetbrains.annotations.Nullable org.fiddlemc.fiddle.packet.deepreplacement.ClientPerspectiveAndSettingsSupplier clientPerspectiveAndSettings, org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacementScope replacementScope) throws IOException {
+        // By default, this simply calls write(DataOutput), which will be the implementation for most non-complex tags
+        this.write(output);
+    }
+    // Fiddle end - client perspective - deep replacements - pass scope
+
     @Override
     String toString();
 
diff --git a/src/main/java/net/minecraft/network/FriendlyByteBuf.java b/src/main/java/net/minecraft/network/FriendlyByteBuf.java
index 5db33782c60d1b16bcfefaba5ace8e81c734ae20..715aa4ae6e1e1ccdac7ae55e6946973f8bb2b4ad 100644
--- a/src/main/java/net/minecraft/network/FriendlyByteBuf.java
+++ b/src/main/java/net/minecraft/network/FriendlyByteBuf.java
@@ -127,11 +127,22 @@ public class FriendlyByteBuf extends ByteBuf {
     /** @deprecated */
     @Deprecated
     public <T> FriendlyByteBuf writeWithCodec(DynamicOps<Tag> ops, Codec<T> codec, T value) {
+        // Fiddle start - client perspective - deep replacements - pass scope
+        // By default, we assume all replacements should be made
+        return this.writeWithCodec(ops, codec, value, org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacementScope.EVERYTHING);
+    }
+
+    public <T> FriendlyByteBuf writeWithCodec(DynamicOps<Tag> ops, Codec<T> codec, T value, org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacementScope replacementScope) {
+        return this.writeWithCodec(ops, codec, value, this.getClientPerspectiveAndSettingsSupplierUnlessScopeIsNothing(replacementScope), replacementScope);
+    }
+
+    public <T> FriendlyByteBuf writeWithCodec(DynamicOps<Tag> ops, Codec<T> codec, T value, org.fiddlemc.fiddle.packet.deepreplacement.ClientPerspectiveAndSettingsSupplier clientPerspectiveAndSettings, org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacementScope replacementScope) {
+        // Fiddle end - client perspective - deep replacements - pass scope
         Tag nbtbase = (Tag) Util.getOrThrow(codec.encodeStart(ops, value), (s) -> {
             return new EncoderException("Failed to encode: " + s + " " + value);
         });
 
-        this.writeNbt(nbtbase);
+        this.writeNbt(nbtbase, clientPerspectiveAndSettings, replacementScope); // Fiddle - client perspective - deep replacements - pass scope
         return this;
     }
 
@@ -565,21 +576,54 @@ public class FriendlyByteBuf extends ByteBuf {
 
     // Paper start - adventure; support writing adventure components directly and server-side translations
     public FriendlyByteBuf writeComponent(final net.kyori.adventure.text.Component component) {
-        return this.writeWithCodec(NbtOps.INSTANCE, io.papermc.paper.adventure.PaperAdventure.localizedCodec(this.adventure$locale), component);
+        // Fiddle start - client perspective - deep replacements - pass scope
+        // By default, we assume all replacements should be made
+        return this.writeComponent(component, org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacementScope.EVERYTHING);
+    }
+
+    public FriendlyByteBuf writeComponent(final net.kyori.adventure.text.Component component, org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacementScope replacementScope) {
+        return this.writeComponent(component, this.getClientPerspectiveAndSettingsSupplierUnlessScopeIsNothing(replacementScope), replacementScope);
+    }
+
+    public FriendlyByteBuf writeComponent(final net.kyori.adventure.text.Component component, org.fiddlemc.fiddle.packet.deepreplacement.ClientPerspectiveAndSettingsSupplier clientPerspectiveAndSettings, org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacementScope replacementScope) {
+        return this.writeWithCodec(NbtOps.INSTANCE, io.papermc.paper.adventure.PaperAdventure.localizedCodec(this.adventure$locale), component, clientPerspectiveAndSettings, replacementScope);
+        // Fiddle end - client perspective - deep replacements - pass scope
     }
 
     public FriendlyByteBuf writeComponent(Component text) {
+        // Fiddle start - client perspective - deep replacements - pass scope
+        // By default, we assume all replacements should be made
+        return this.writeComponent(text, org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacementScope.EVERYTHING);
+    }
+
+    public FriendlyByteBuf writeComponent(Component text, org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacementScope replacementScope) {
+        return this.writeComponent(text, this.getClientPerspectiveAndSettingsSupplierUnlessScopeIsNothing(replacementScope), replacementScope);
+    }
+
+    public FriendlyByteBuf writeComponent(Component text, org.fiddlemc.fiddle.packet.deepreplacement.ClientPerspectiveAndSettingsSupplier clientPerspectiveAndSettings, org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacementScope replacementScope) {
+        // Fiddle end - client perspective - deep replacements - pass scope
         if (text instanceof io.papermc.paper.adventure.AdventureComponent adv) {
             return this.writeComponent(adv.adventure$component());
         }
 
-        return this.writeWithCodec(NbtOps.INSTANCE, ComponentSerialization.localizedCodec(this.adventure$locale), text);
+        return this.writeWithCodec(NbtOps.INSTANCE, ComponentSerialization.localizedCodec(this.adventure$locale), text, clientPerspectiveAndSettings, replacementScope); // Fiddle - client perspective - deep replacements - pass scope
         // Paper end - adventure; support writing adventure components directly and server-side translations
     }
     // Paper start - deprecated Tab List & Title APIs
     @Deprecated
     public FriendlyByteBuf writeComponent(final net.md_5.bungee.api.chat.BaseComponent[] component) {
-        return this.writeComponent(java.util.Objects.requireNonNull(Component.Serializer.fromJson(net.md_5.bungee.chat.ComponentSerializer.toString(component))));
+        // Fiddle start - client perspective - deep replacements - pass scope
+        // By default, we assume all replacements should be made
+        return this.writeComponent(component, org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacementScope.EVERYTHING);
+    }
+
+    public FriendlyByteBuf writeComponent(final net.md_5.bungee.api.chat.BaseComponent[] component, org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacementScope replacementScope) {
+        return this.writeComponent(component, this.getClientPerspectiveAndSettingsSupplierUnlessScopeIsNothing(replacementScope), replacementScope);
+    }
+
+    public FriendlyByteBuf writeComponent(final net.md_5.bungee.api.chat.BaseComponent[] component, org.fiddlemc.fiddle.packet.deepreplacement.ClientPerspectiveAndSettingsSupplier clientPerspectiveAndSettings, org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacementScope replacementScope) {
+        return this.writeComponent(java.util.Objects.requireNonNull(Component.Serializer.fromJson(net.md_5.bungee.chat.ComponentSerializer.toString(component))), clientPerspectiveAndSettings, replacementScope);
+        // Fiddle end - client perspective - deep replacements - pass scope
     }
     // Paper end - deprecated Tab List & Title APIs
 
@@ -632,12 +676,23 @@ public class FriendlyByteBuf extends ByteBuf {
     }
 
     public FriendlyByteBuf writeNbt(@Nullable Tag nbt) {
+        // Fiddle start - client perspective - deep replacements - pass scope
+        // By default, we assume all replacements should be made
+        return this.writeNbt(nbt, org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacementScope.EVERYTHING);
+    }
+
+    public FriendlyByteBuf writeNbt(@Nullable Tag nbt, org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacementScope replacementScope) {
+        return this.writeNbt(nbt, this.getClientPerspectiveAndSettingsSupplierUnlessScopeIsNothing(replacementScope), replacementScope);
+    }
+
+    public FriendlyByteBuf writeNbt(@Nullable Tag nbt, org.fiddlemc.fiddle.packet.deepreplacement.ClientPerspectiveAndSettingsSupplier clientPerspectiveAndSettings, org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacementScope replacementScope) {
+        // Fiddle end - client perspective - deep replacements - pass scope
         if (nbt == null) {
             nbt = EndTag.INSTANCE;
         }
 
         try {
-            NbtIo.writeAnyTag((Tag) nbt, new ByteBufOutputStream(this));
+            NbtIo.writeAnyTag((Tag) nbt, new ByteBufOutputStream(this), clientPerspectiveAndSettings, replacementScope); // Fiddle - client perspective - deep replacements - pass scope
             return this;
         } catch (Exception ioexception) { // CraftBukkit - IOException -> Exception
             throw new EncoderException(ioexception);
@@ -667,6 +722,29 @@ public class FriendlyByteBuf extends ByteBuf {
     }
 
     public FriendlyByteBuf writeItem(ItemStack stack) {
+        // Fiddle start - client perspective - deep replacements - pass scope
+        return this.writeItem(stack, org.fiddlemc.fiddle.packet.item.ItemStackInPacketContext.DEFAULT);
+    }
+
+    public FriendlyByteBuf writeItem(ItemStack stack, org.fiddlemc.fiddle.packet.item.ItemStackInPacketContext itemStackInPackContext) {
+        // By default, we assume all replacements should be made
+        return this.writeItem(stack, itemStackInPackContext, org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacementScope.EVERYTHING);
+    }
+
+    public FriendlyByteBuf writeItem(ItemStack stack, org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacementScope replacementScope) {
+        return this.writeItem(stack, org.fiddlemc.fiddle.packet.item.ItemStackInPacketContext.DEFAULT, replacementScope);
+    }
+
+    public FriendlyByteBuf writeItem(ItemStack stack, org.fiddlemc.fiddle.packet.item.ItemStackInPacketContext itemStackInPackContext, org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacementScope replacementScope) {
+        return this.writeItem(stack, itemStackInPackContext, this.getClientPerspectiveAndSettingsSupplierUnlessScopeIsNothing(replacementScope), replacementScope);
+    }
+
+    public FriendlyByteBuf writeItem(ItemStack stack, org.fiddlemc.fiddle.packet.deepreplacement.ClientPerspectiveAndSettingsSupplier clientPerspectiveAndSettings, org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacementScope replacementScope) {
+        return this.writeItem(stack, org.fiddlemc.fiddle.packet.item.ItemStackInPacketContext.DEFAULT, clientPerspectiveAndSettings, replacementScope);
+    }
+
+    public FriendlyByteBuf writeItem(ItemStack stack, org.fiddlemc.fiddle.packet.item.ItemStackInPacketContext itemStackInPackContext, org.fiddlemc.fiddle.packet.deepreplacement.ClientPerspectiveAndSettingsSupplier clientPerspectiveAndSettings, org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacementScope replacementScope) {
+        // Fiddle end - client perspective - deep replacements - pass scope
         if (stack.isEmpty() || stack.getItem() == null) { // CraftBukkit - NPE fix itemstack.getItem()
             this.writeBoolean(false);
         } else {
@@ -685,7 +763,7 @@ public class FriendlyByteBuf extends ByteBuf {
                 nbttagcompound = stack.getTag();
             }
 
-            this.writeNbt(nbttagcompound);
+            this.writeNbt(nbttagcompound, clientPerspectiveAndSettings, replacementScope); // Fiddle - client perspective - deep replacements - pass scope
         }
 
         return this;
@@ -722,7 +800,26 @@ public class FriendlyByteBuf extends ByteBuf {
     }
 
     public FriendlyByteBuf writeUtf(String s, int maxLength) {
-        Utf8String.write(this.source, s, maxLength);
+        // Fiddle start - client perspective - deep replacements - pass scope
+        // By default, we assume all replacements should be made
+        return this.writeUtf(s, maxLength, true, true, org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacementScope.EVERYTHING);
+    }
+
+    public FriendlyByteBuf writeUtf(String s, boolean canBeRawJsonText, boolean canBeSNBT, org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacementScope replacementScope) {
+        return this.writeUtf(s, MAX_STRING_LENGTH, canBeRawJsonText, canBeSNBT, this.getClientPerspectiveAndSettingsSupplierUnlessScopeIsNothing(replacementScope), replacementScope);
+    }
+
+    public FriendlyByteBuf writeUtf(String s, boolean canBeRawJsonText, boolean canBeSNBT, org.fiddlemc.fiddle.packet.deepreplacement.ClientPerspectiveAndSettingsSupplier clientPerspectiveAndSettings, org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacementScope replacementScope) {
+        return this.writeUtf(s, MAX_STRING_LENGTH, canBeRawJsonText, canBeSNBT, clientPerspectiveAndSettings, replacementScope);
+    }
+
+    public FriendlyByteBuf writeUtf(String s, int maxLength, boolean canBeRawJsonText, boolean canBeSNBT, org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacementScope replacementScope) {
+        return this.writeUtf(s, maxLength, canBeRawJsonText, canBeSNBT, this.getClientPerspectiveAndSettingsSupplierUnlessScopeIsNothing(replacementScope), replacementScope);
+    }
+
+    public FriendlyByteBuf writeUtf(String s, int maxLength, boolean canBeRawJsonText, boolean canBeSNBT, org.fiddlemc.fiddle.packet.deepreplacement.ClientPerspectiveAndSettingsSupplier clientPerspectiveAndSettings, org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacementScope replacementScope) {
+        Utf8String.write(this.source, s, maxLength, canBeRawJsonText, canBeSNBT, clientPerspectiveAndSettings, replacementScope);
+        // Fiddle end - client perspective - deep replacements - pass scope
         return this;
     }
 
@@ -731,7 +828,7 @@ public class FriendlyByteBuf extends ByteBuf {
     }
 
     public FriendlyByteBuf writeResourceLocation(ResourceLocation id) {
-        this.writeUtf(id.toString());
+        this.writeUtf(id.toString(), false, false, org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacementScope.NOTHING); // Fiddle - client perspective - deep replacements - pass scope - this never contains replaceables
         return this;
     }
 
@@ -843,7 +940,7 @@ public class FriendlyByteBuf extends ByteBuf {
 
     public void writeGameProfile(GameProfile gameProfile) {
         this.writeUUID(gameProfile.getId());
-        this.writeUtf(gameProfile.getName());
+        this.writeUtf(gameProfile.getName(), false, false, org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacementScope.NOTHING); // Fiddle - client perspective - deep replacements - pass scope - this never contains replaceables
         this.writeGameProfileProperties(gameProfile.getProperties());
     }
 
@@ -871,9 +968,11 @@ public class FriendlyByteBuf extends ByteBuf {
     }
 
     public void writeProperty(Property property) {
-        this.writeUtf(property.name());
-        this.writeUtf(property.value());
-        this.writeNullable(property.signature(), FriendlyByteBuf::writeUtf);
+        // Fiddle start - client perspective - deep replacements - pass scope - this never contains replaceables
+        this.writeUtf(property.name(), false, false, org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacementScope.NOTHING);
+        this.writeUtf(property.value(), false, false, org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacementScope.NOTHING);
+        this.writeNullable(property.signature(), (buf, signature) -> buf.writeUtf(signature, false, false, org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacementScope.NOTHING));
+        // Fiddle end - client perspective - deep replacements - pass scope - this never contains replaceables
     }
 
     public boolean isContiguous() {
@@ -1769,4 +1868,16 @@ public class FriendlyByteBuf extends ByteBuf {
     }
     // Fiddle end - client perspective - deep replacements - perspective and settings supplier - cache in FriendlyByteBuf
 
+    // Fiddle start - client perspective - deep replacements - pass scope
+    /**
+     * The result of {@link #getClientPerspectiveAndSettingsSupplier()},
+     * unless the given {@code replacementScope} is {@link org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacementScope#NOTHING}, in which case
+     * {@link org.fiddlemc.fiddle.packet.deepreplacement.ClientPerspectiveAndSettingsSupplier#ALWAYS_THROWS_EXCEPTION}
+     * is returned.
+     */
+    public org.fiddlemc.fiddle.packet.deepreplacement.ClientPerspectiveAndSettingsSupplier getClientPerspectiveAndSettingsSupplierUnlessScopeIsNothing(org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacementScope replacementScope) {
+        return replacementScope == org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacementScope.NOTHING ? org.fiddlemc.fiddle.packet.deepreplacement.ClientPerspectiveAndSettingsSupplier.ALWAYS_THROWS_EXCEPTION : this.getClientPerspectiveAndSettingsSupplier();
+    }
+    // Fiddle end - client perspective - deep replacements - pass scope
+
 }
diff --git a/src/main/java/net/minecraft/network/Utf8String.java b/src/main/java/net/minecraft/network/Utf8String.java
index 7b39060cde0ec31c4adf36960b33cefcd5138527..2c001d99a207cab3a7c4fdbed533ad8e4e2fb819 100644
--- a/src/main/java/net/minecraft/network/Utf8String.java
+++ b/src/main/java/net/minecraft/network/Utf8String.java
@@ -30,7 +30,7 @@ public class Utf8String {
         }
     }
 
-    public static void write(ByteBuf buf, CharSequence string, int length) {
+    public static void write(ByteBuf buf, CharSequence string, int length, boolean canBeRawJsonText, boolean canBeSNBT, org.fiddlemc.fiddle.packet.deepreplacement.ClientPerspectiveAndSettingsSupplier clientPerspectiveAndSettings, org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacementScope replacementScope) { // Fiddle - client perspective - deep replacements - pass scope
         if (string.length() > length) {
             throw new EncoderException("String too big (was " + string.length() + " characters, max " + length + ")");
         } else {
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundCommandSuggestionsPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundCommandSuggestionsPacket.java
index dda43b6dba01fca4caee3278e8537f1906823678..8f62c67e28cad5cb240f8a9328e92fbea71c1725 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundCommandSuggestionsPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundCommandSuggestionsPacket.java
@@ -37,7 +37,7 @@ public class ClientboundCommandSuggestionsPacket implements Packet<ClientGamePac
         buf.writeVarInt(this.suggestions.getRange().getStart());
         buf.writeVarInt(this.suggestions.getRange().getLength());
         buf.writeCollection(this.suggestions.getList(), (buf2, suggestion) -> {
-            buf2.writeUtf(suggestion.getText());
+            buf2.writeUtf(suggestion.getText(), false, false, org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacementScope.NOTHING); // Fiddle - client perspective - deep replacements - pass scope - this never contains replaceables
             buf2.writeNullable(suggestion.getTooltip(), (buf3, tooltip) -> {
                 buf3.writeComponent(ComponentUtils.fromMessage(tooltip));
             });
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelChunkPacketData.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelChunkPacketData.java
index 998deae645b4497c3285bfba3260c636439f9ecf..b41417b4c8ab2ad7dbfa5f5a9405856f6363c7e2 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelChunkPacketData.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelChunkPacketData.java
@@ -89,7 +89,7 @@ public class ClientboundLevelChunkPacketData {
     }
 
     public void write(FriendlyByteBuf buf) {
-        buf.writeNbt(this.heightmaps);
+        buf.writeNbt(this.heightmaps, org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacementScope.NOTHING); // Fiddle - client perspective - deep replacements - pass scope - this never contains replaceables
         buf.writeVarInt(this.buffer.length);
         buf.writeBytes(this.buffer);
         buf.writeCollection(this.blockEntitiesData, (buf2, entry) -> {
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetPlayerTeamPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetPlayerTeamPacket.java
index e70decbcf87c2a57bfa34ad7be7120d546ff8e35..d188ab39548cb40a53e5bd5139fee35ebad51b9d 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetPlayerTeamPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetPlayerTeamPacket.java
@@ -76,7 +76,7 @@ public class ClientboundSetPlayerTeamPacket implements Packet<ClientGamePacketLi
         }
 
         if (shouldHavePlayerList(this.method)) {
-            buf.writeCollection(this.players, FriendlyByteBuf::writeUtf);
+            buf.writeCollection(this.players, (sameBuf, player) -> sameBuf.writeUtf(player, false, false, org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacementScope.NOTHING)); // Fiddle - client perspective - deep replacements - pass scope - this never contains replaceables
         }
 
     }
@@ -198,8 +198,10 @@ public class ClientboundSetPlayerTeamPacket implements Packet<ClientGamePacketLi
         public void write(FriendlyByteBuf buf) {
             buf.writeComponent(this.displayName);
             buf.writeByte(this.options);
-            buf.writeUtf(this.nametagVisibility);
-            buf.writeUtf(!io.papermc.paper.configuration.GlobalConfiguration.get().collisions.enablePlayerCollisions ? "never" : this.collisionRule); // Paper - Configurable player collision
+            // Fiddle start - client perspective - deep replacements - pass scope - this never contains replaceables
+            buf.writeUtf(this.nametagVisibility, false, false, org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacementScope.NOTHING);
+            buf.writeUtf(!io.papermc.paper.configuration.GlobalConfiguration.get().collisions.enablePlayerCollisions ? "never" : this.collisionRule, false, false, org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacementScope.NOTHING); // Paper - Configurable player collision
+            // Fiddle end - client perspective - deep replacements - pass scope - this never contains replaceables
             buf.writeEnum(this.color);
             buf.writeComponent(this.playerPrefix);
             buf.writeComponent(this.playerSuffix);
diff --git a/src/main/java/net/minecraft/world/item/crafting/ShapedRecipe.java b/src/main/java/net/minecraft/world/item/crafting/ShapedRecipe.java
index d772cf80fa3831e1c79d601ea09a073da089e2c5..40c97c360dcf0031266ce38299caf47e643524a6 100644
--- a/src/main/java/net/minecraft/world/item/crafting/ShapedRecipe.java
+++ b/src/main/java/net/minecraft/world/item/crafting/ShapedRecipe.java
@@ -197,7 +197,7 @@ public class ShapedRecipe extends io.papermc.paper.inventory.recipe.RecipeBookEx
         }
 
         public void toNetwork(FriendlyByteBuf buf, ShapedRecipe recipe) {
-            buf.writeUtf(recipe.group);
+            buf.writeUtf(recipe.group, false, false, org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacementScope.NOTHING); // Fiddle - client perspective - deep replacements - pass scope - this never contains replaceables
             buf.writeEnum(recipe.category);
             recipe.pattern.toNetwork(buf);
             buf.writeItem(recipe.result);
