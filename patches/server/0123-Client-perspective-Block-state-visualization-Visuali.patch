From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Fri, 5 Jan 2024 18:05:08 +0100
Subject: [PATCH] Client perspective - Block state visualization -
 Visualization setup bypass for visualization changes

* Adds a flag to `ClientboundBlockUpdatePacket` to mark packets meant to send visualization changes to the client (as opposed to a change of the block type itself)
* Adds a convenience method to `ServerPlayer` to send such packets

Does not implement any sending of such packets: this will be done by the processes that maintain visualizations and require doing this.
Does not implement this bypass of the visualization setup: it will be implemented as part of the implementation that calls the setup.

License: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)
Fiddle - https://fiddlemc.org

diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundBlockUpdatePacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundBlockUpdatePacket.java
index 7b4947aa2cdd7f359184689bf348560bde1016dd..b1ad8bea989510bedfdf6674362336e1fcdfc66a 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundBlockUpdatePacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundBlockUpdatePacket.java
@@ -11,6 +11,19 @@ public class ClientboundBlockUpdatePacket implements Packet<ClientGamePacketList
     private final BlockPos pos;
     public final BlockState blockState;
 
+    // Fiddle start - client perspective - block state visualization - ability to send visualization changes
+    /**
+     * A flag for whether this packet is a desired visualization change of a block that has stayed the same,
+     * rather than to indicate an actual block change.
+     * <p>
+     *     This is initially false, and set to true only in
+     *     {@link net.minecraft.server.level.ServerPlayer#sendVisualizationChangeBlockUpdate}.
+     *     It should not be set from anywhere else: the convenience method above should be used instead.
+     * </p>
+     */
+    public boolean isVisualizationChange = false;
+    // Fiddle end - client perspective - block state visualization - ability to send visualization changes
+
     public ClientboundBlockUpdatePacket(BlockPos pos, BlockState state) {
         this.pos = pos;
         this.blockState = state;
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index 4bc8187dda79e76c94dbc78d4d87dd90b487a0b7..12df11f7068f1dda463ec198d6d141ad24474c9f 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -2818,4 +2818,29 @@ public class ServerPlayer extends Player {
     }
     // Fiddle end - client perspective - deep replacements - send updates
 
+    // Fiddle start - client perspective - block state visualization - ability to send visualization changes
+    /**
+     * Sends an update of the {@link BlockState} to this player's client, at the given
+     * {@linkplain BlockPos block coordinates}.
+     * <p>
+     *     This method is solely intended to send block updates to the player that are done to change
+     *     the observed visualization of a block on the client.
+     * </p>
+     * <p>
+     *     As such, this update will not be further subjected to any modification, such as anti-x-ray,
+     *     and will bypass the
+     *     {@linkplain org.fiddlemc.fiddle.packet.block.BlockStateVisualizationSetupper block state visualization setup}
+     *     that regular block update go through.
+     * </p>
+     *
+     * @param state The resulting {@link BlockState} to send to this player's client.
+     */
+    public void sendVisualizationChangeBlockUpdate(BlockPos position, BlockState state) {
+        // Based on org.bukkit.craftbukkit.entity.CraftPlayer#sendBlockChange
+        ClientboundBlockUpdatePacket packet = new ClientboundBlockUpdatePacket(position, state);
+        packet.isVisualizationChange = true;
+        this.connection.send(packet);
+    }
+    // Fiddle end - client perspective - block state visualization - ability to send visualization changes
+
 }
diff --git a/src/main/java/org/fiddlemc/fiddle/packet/block/BlockStateVisualizationSetupper.java b/src/main/java/org/fiddlemc/fiddle/packet/block/BlockStateVisualizationSetupper.java
index 2e15750d5798ef0b7cfc4cccf0590da4a184679a..fc21abf689b0e49064fb0578838c56fe25c21551 100644
--- a/src/main/java/org/fiddlemc/fiddle/packet/block/BlockStateVisualizationSetupper.java
+++ b/src/main/java/org/fiddlemc/fiddle/packet/block/BlockStateVisualizationSetupper.java
@@ -234,7 +234,11 @@ public interface BlockStateVisualizationSetupper {
      *     When needed to be able to dynamically update the visualization based on changing circumstances,
      *     the implementation of this method must perform a setup that makes sure that some process listening for
      *     a change in those circumstances sends a block change to the player without invoking any visualization setup
-     *     again.
+     *     <!-- // Fiddle start - client perspective - block state visualization - ability to send visualization changes -->
+     *     again: by sending {@link net.minecraft.network.protocol.game.ClientboundBlockUpdatePacket} with the
+     *     {@link net.minecraft.network.protocol.game.ClientboundBlockUpdatePacket#isVisualizationChange} flag
+     *     set to true, which can be done with {@link ServerPlayer#sendVisualizationChangeBlockUpdate}.
+     *     <!-- // Fiddle end - client perspective - block state visualization - ability to send visualization changes -->
      *     <br>
      *     Additionally, the implementation of this method must make sure to properly clean up any listeners
      *     for a change in circumstances that may already exist for this particular client and block location
