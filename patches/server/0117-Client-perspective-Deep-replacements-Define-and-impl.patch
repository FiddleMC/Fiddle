From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Sat, 29 Jul 2023 13:28:41 +0000
Subject: [PATCH] Client perspective - Deep replacements - Define and implement
 replacements

Defines the deep replacements that are necessary (or useful for efficiency) to be applied
to data written to the network, and implements them.

These functions are specifically based on what is needed in the subsequent "Client perspective - Deep replacements - Invoke replacements" patch.
No invocation of these functions is added yet.

License: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)
Fiddle - https://fiddlemc.org

diff --git a/src/main/java/org/fiddlemc/fiddle/packet/deepreplacement/DeepReplacements.java b/src/main/java/org/fiddlemc/fiddle/packet/deepreplacement/DeepReplacements.java
new file mode 100644
index 0000000000000000000000000000000000000000..ce36e17aab17d4cfcc06ecf3d97370f656191755
--- /dev/null
+++ b/src/main/java/org/fiddlemc/fiddle/packet/deepreplacement/DeepReplacements.java
@@ -0,0 +1,438 @@
+// Fiddle - client perspective - deep replacements - define and implement replacements
+
+package org.fiddlemc.fiddle.packet.deepreplacement;
+
+import com.mojang.brigadier.StringReader;
+import net.minecraft.nbt.*;
+import net.minecraft.network.chat.Component;
+import net.minecraft.network.chat.ComponentContents;
+import net.minecraft.network.chat.HoverEvent;
+import net.minecraft.network.chat.MutableComponent;
+import net.minecraft.network.chat.contents.TranslatableContents;
+import net.minecraft.world.item.ItemStack;
+import org.fiddlemc.fiddle.packet.item.ItemStackInPacketContext;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.List;
+
+/**
+ * A class providing static functionality for applying the possible deep replacements.
+ * <br>
+ * A value to apply replacements to, a {@link DeepReplacementContext} that determines the replacement values
+ * (and may allow for skipping of unnecessary steps for that context),
+ * and a {@link DeepReplacementScope} to allow for efficient skipping of steps that are no longer necessary
+ * in the current chain of deep replacement invocations,
+ * form the input to each deep replacement invocation.
+ */
+@SuppressWarnings("StringEquality")
+public final class DeepReplacements {
+
+    private DeepReplacements() {
+        throw new RuntimeException();
+    }
+
+    /**
+     * Attempts to apply {@link #replaceRawJSONText} and {@link #replaceSNBT},
+     * in that order, and returns the first result that is different from the given value.
+     */
+    public static String replaceRawJSONTextOrSNBT(String value, DeepReplacementContext context, DeepReplacementScope scope) {
+        var modifiedValue = replaceRawJSONText(value, context, scope);
+        if (modifiedValue != value) {
+            return modifiedValue;
+        }
+        return replaceSNBT(value, context, scope);
+    }
+
+    /**
+     * Replaces replaceables in a given string, when we know that this string is serialized raw JSON text.
+     * @return A string with all needed replacements applied.
+     * When no replacements have been made (and as such, the returned string is {@linkplain Object#equals equal}
+     * to the given {@code value}), this method will make a strong effort to return the given {@code value} instance.
+     */
+    public static String replaceRawJSONText(String value, DeepReplacementContext context, DeepReplacementScope scope) {
+
+        // We only need to replace in hover events if there are any present, which there can only be if a specific substring is present
+        if (scope.attemptToReplaceInHoverEvents && !value.contains("\"hoverEvent")) {
+            scope = scope.withoutAttemptToReplaceInHoverEvents();
+        }
+        // We never need to replace blocks in raw JSON text, and we only need to replace items if there are any present, which there can only be in raw JSON text for hover events of the show_item type
+        if (scope.attemptToReplaceItemsAndBlocks && !(scope.attemptToReplaceInHoverEvents && value.contains("show_item"))) {
+            scope = scope.withoutAttemptToReplaceItemsAndBlocks();
+        }
+        // We only need to replace translatables if there are any present, which there can only be if a specific substring is present
+        if (scope.attemptToReplaceTranslatables && !value.contains("\"translate")) {
+            scope = scope.withoutAttemptToReplaceTranslatables();
+        }
+
+        // Skip if we have no replacements to make
+        if (!scope.canMakeAnyReplacements()) {
+            return value;
+        }
+
+        // Deserialize the string and perform replacements on it
+        Component component;
+        try {
+            component = Component.Serializer.fromJson(value);
+        } catch (Exception ignored) {
+            // If it cannot be deserialized, we skip replacements (no replacements can be made to malformed strings)
+            return value;
+        }
+        if (component == null) {
+            // If the string represents null, no replacements need to be made
+            return value;
+        }
+        var modifiedComponent = replaceComponent(component, context, scope);
+        if (modifiedComponent == component) {
+            // If no changes were made, we return the given value instance
+            return value;
+        }
+        // Re-serialize and return
+        return Component.Serializer.toJson(modifiedComponent);
+
+    }
+
+    /**
+     * Replaces replaceables in a given {@link Component}.
+     * @return A {@link Component} with all needed replacements applied.
+     * When no replacements have been made (and as such, the returned component is {@linkplain Object#equals equal}
+     * to the given {@code value}), this method will make a strong effort to return the given {@code value} instance.
+     */
+    public static Component replaceComponent(Component value, DeepReplacementContext context, DeepReplacementScope scope) {
+
+        // Skip if we have no replacements to make
+        if (!scope.canMakeAnyReplacements()) {
+            return value;
+        }
+
+        // Keep track of the modified value, which remains null while no modifications have been made
+        MutableComponent modifiedValueOrNull = null;
+
+        // Modify the siblings (which is a bad name, they are children) if necessary
+        var siblings = value.getSiblings();
+        List<Component> modifiedSiblings = null;
+        for (int i = 0; i < siblings.size(); i++) {
+            var sibling = siblings.get(i);
+            // Make necessary replacements in the sibling
+            var modifiedSibling = replaceComponent(sibling, context, scope);
+            if (modifiedSibling == sibling) {
+                // If the sibling was unchanged, continue
+                continue;
+            }
+            // Instantiate the modified value
+            if (modifiedValueOrNull == null) {
+                modifiedValueOrNull = value.copy();
+                modifiedSiblings = modifiedValueOrNull.getSiblings();
+            }
+            // Replace the sibling with the modified sibling
+            modifiedSiblings.set(i, modifiedSibling);
+        }
+
+        // Modify the style (specifically, the hover event) if necessary
+        if (scope.attemptToReplaceInHoverEvents) {
+            var style = value.getStyle();
+            var hoverEvent = style.getHoverEvent();
+            if (hoverEvent != null) {
+                var hoverAction = hoverEvent.getAction();
+
+                // Keep track of the modified hover event, which remains null while no modifications have been made
+                HoverEvent modifiedHoverEvent = null;
+
+                if (hoverAction == HoverEvent.Action.SHOW_TEXT) {
+                    // Replace the text, which is once again a component
+                    var showTextValue = hoverEvent.getValue(HoverEvent.Action.SHOW_TEXT);
+                    if (showTextValue != null) {
+                        // Note that we never have to transitively replace in hover events, and thereby also do not have to replace any nested items or blocks
+                        var modifiedShowTextValue = replaceComponent(showTextValue, context, scope.withoutAttemptToReplaceItemsAndBlocks().withoutAttemptToReplaceInHoverEvents());
+                        if (modifiedShowTextValue != showTextValue) {
+                            modifiedHoverEvent = new HoverEvent(HoverEvent.Action.SHOW_TEXT, modifiedShowTextValue);
+                        }
+                    }
+                } else if (hoverAction == HoverEvent.Action.SHOW_ITEM) {
+                    // Replace the item
+                    if (scope.attemptToReplaceItemsAndBlocks) {
+                        var showItemValue = hoverEvent.getValue(HoverEvent.Action.SHOW_ITEM);
+                        if (showItemValue != null) {
+                            try {
+                                var showItemItemStack = showItemValue.getItemStack();
+                                // Note that we never have to transitively replace in hover events
+                                var modifiedShowItemItemStack = replaceItemStack(showItemItemStack, context, scope.withoutAttemptToReplaceInHoverEvents());
+                                if (modifiedShowItemItemStack != showItemItemStack) {
+                                    modifiedHoverEvent = new HoverEvent(HoverEvent.Action.SHOW_ITEM, new HoverEvent.ItemStackInfo(modifiedShowItemItemStack));
+                                }
+                            } catch (Exception ignored) {
+                                // If any exception occurs, we just leave the item stack as-is because we can not make replacements in malformed item stacks
+                            }
+                        }
+                    }
+                } else if (hoverAction == HoverEvent.Action.SHOW_ENTITY) {
+                    // Replace the entity, which is incomplete SNBT that only potentially requires replacements in the name
+                    var showEntityValue = hoverEvent.getValue(HoverEvent.Action.SHOW_ENTITY);
+                    if (showEntityValue != null) {
+                        if (showEntityValue.name != null && showEntityValue.name.isPresent()) {
+                            var showEntityValueName = showEntityValue.name.get();
+                            // Note that we never have to transitively replace in hover events, and thereby also do not have to replace any nested items or blocks
+                            var modifiedName = replaceComponent(showEntityValueName, context, scope.withoutAttemptToReplaceItemsAndBlocks().withoutAttemptToReplaceInHoverEvents());
+                            if (modifiedName != showEntityValueName) {
+                                modifiedHoverEvent = new HoverEvent(HoverEvent.Action.SHOW_ENTITY, new HoverEvent.EntityTooltipInfo(showEntityValue.type, showEntityValue.id, modifiedName));
+                            }
+                        }
+                    }
+                }
+                if (modifiedHoverEvent != null) {
+                    // Instantiate the modified value
+                    if (modifiedValueOrNull == null) {
+                        modifiedValueOrNull = value.copy();
+                    }
+                    // Replace the hover event with the modified hover event
+                    modifiedValueOrNull.setStyle(style.withHoverEvent(modifiedHoverEvent));
+                }
+            }
+        }
+
+        // Modify the contents if necessary (specifically, if they are translatable)
+        if (scope.attemptToReplaceTranslatables) {
+            var contents = value.getContents();
+            if (contents instanceof TranslatableContents translatableContents) {
+
+                // Make replacements in the arguments
+                var arguments = translatableContents.getArgs();
+                // Keep track of the modified arguments array, which remains null while no modifications have been made
+                @Nullable Object[] modifiedArguments = null;
+                for (int argumentI = 0; argumentI < arguments.length; argumentI++) {
+                    var argument = arguments[argumentI];
+                    Object modifiedArgument;
+                    if (argument instanceof String argumentAsString) {
+                        modifiedArgument = replaceRawJSONText(argumentAsString, context, scope);
+                    } else if (argument instanceof Component argumentAsComponent) {
+                        modifiedArgument = replaceComponent(argumentAsComponent, context, scope);
+                    } else {
+                        modifiedArgument = argument;
+                    }
+                    if (modifiedArgument == argument) {
+                        // If the sibling was unchanged, continue
+                        continue;
+                    }
+                    // Instantiate the modified value
+                    if (modifiedArguments == null) {
+                        modifiedArguments = new Object[arguments.length];
+                        System.arraycopy(arguments, 0, modifiedArguments, 0, arguments.length);
+                    }
+                    // Replace the argument with the modified argument
+                    modifiedArguments[argumentI] = modifiedArgument;
+                }
+                // Instantiate the contents with modified arguments
+                var translatableContentsWithModifiedArguments = modifiedArguments != null ? new TranslatableContents(translatableContents.getKey(), translatableContents.getFallback(), modifiedArguments) : translatableContents;
+
+                // Attempt to apply translations on the server
+                var modifiedContents = replaceTranslatableContents(translatableContentsWithModifiedArguments, context.getLocale());
+                if (modifiedContents != contents) {
+                    // Replace the contents with the modified contents
+                    modifiedValueOrNull = (modifiedValueOrNull != null ? modifiedValueOrNull : value).withContents(modifiedContents);
+                }
+
+            }
+        }
+
+        // Return the modified component if modifications were made, or the original component otherwise
+        return modifiedValueOrNull != null ? modifiedValueOrNull : value;
+
+    }
+
+    /**
+     * Replaces replaceables in a given string, when we know that this string is stringified (serialized) NBT
+     * (also known as SNBT).
+     * @return A string with all needed replacements applied.
+     * When no replacements have been made (and as such, the returned string is {@linkplain Object#equals equal}
+     * to the given {@code value}), this method will make a strong effort to return the given {@code value} instance.
+     */
+    public static String replaceSNBT(String value, DeepReplacementContext context, DeepReplacementScope scope) {
+
+        // Skip if we have no replacements to make
+        if (!scope.canMakeAnyReplacements()) {
+            return value;
+        }
+
+        // Attempt to deserialize the string
+        Tag tag;
+        try {
+            tag = new TagParser(new StringReader(value)).readValue();
+        } catch (Exception ignored) {
+            // If it cannot be deserialized, we skip replacements (no replacements can be made to malformed strings)
+            return value;
+        }
+
+        // If the result of deserialization is a StringTag with the exact string as value, there is no point in applying further replacements since it will just loop back here
+        if (tag instanceof StringTag stringTag && stringTag.getAsString().equals(value)) {
+            return value;
+        }
+
+        // Perform replacements on the tag
+        var modifiedTag = replaceTag(tag, context, scope);
+        if (modifiedTag == tag) {
+            // If no changes were made, we return the given value instance
+            return value;
+        }
+        // Re-serialize and return
+        return modifiedTag.getAsString();
+
+    }
+
+    /**
+     * Replaces replaceables in a given {@link Tag}.
+     * @return A {@link Tag} with all needed replacements applied.
+     * When no replacements have been made (and as such, the returned tag is {@linkplain Object#equals equal}
+     * to the given {@code value}), this method will make a strong effort to return the given {@code value} instance.
+     */
+    public static Tag replaceTag(Tag value, DeepReplacementContext context, DeepReplacementScope scope) {
+
+        // Skip if we have no replacements to make
+        if (!scope.canMakeAnyReplacements()) {
+            return value;
+        }
+
+        if (value.getId() == Tag.TAG_COMPOUND && value instanceof CompoundTag compoundValue) {
+
+            // Potentially, the tag represents an item: we simply assume this is possible only if it has the right keys
+            if (scope.attemptToReplaceItemsAndBlocks) {
+                var keys = compoundValue.getAllKeys();
+                if (compoundValue.contains("id", Tag.TAG_STRING) && compoundValue.contains("Count", Tag.TAG_BYTE)) {
+                    boolean hasOnlyValidKeys = true;
+                    forAllKeys:
+                    for (var key : keys) {
+                        switch (key) {
+                            case "id", "Count" -> {
+                            }
+                            case "tag" -> {
+                                if (!compoundValue.contains("tag", Tag.TAG_COMPOUND)) {
+                                    // The tag value is of the wrong type
+                                    hasOnlyValidKeys = false;
+                                    break forAllKeys;
+                                }
+                            }
+                            case "Slot" -> {
+                                if (!compoundValue.contains("Slot", Tag.TAG_BYTE)) {
+                                    // The slot value is of the wrong type
+                                    hasOnlyValidKeys = false;
+                                    break forAllKeys;
+                                }
+                            }
+                            default -> {
+                                // Any other keys are invalid
+                                hasOnlyValidKeys = false;
+                                break forAllKeys;
+                            }
+                        }
+                    }
+                    if (hasOnlyValidKeys) {
+
+                        try {
+                            var itemStack = ItemStack.of(compoundValue);
+                            var modifiedItemStack = replaceItemStack(itemStack, context, scope);
+                            if (modifiedItemStack != itemStack) {
+                                // Copy the given value, but clear the id, count and tag in advance
+                                var modifiedValue = compoundValue.copy();
+                                modifiedValue.remove("id");
+                                modifiedValue.remove("Count");
+                                modifiedValue.remove("tag");
+                                // Save the modified item stack and return
+                                modifiedItemStack.save(modifiedValue);
+                                return modifiedValue;
+                            }
+                        } catch (Exception ignored) {
+                            // If it cannot be parsed, we skip replacements (no replacements can be made to malformed items)
+                        }
+
+                    }
+                }
+            }
+
+            // Otherwise, we make replacements in the individual subvalues
+            // Keep track of the modified arguments array, which remains null while no modifications have been made
+            @Nullable CompoundTag modifiedValue = null;
+            for (var key : compoundValue.getAllKeys()) {
+                var subvalue = compoundValue.get(key);
+                var modifiedSubvalue = replaceTag(subvalue, context, scope);
+                if (modifiedSubvalue == subvalue) {
+                    // If the subvalue was unchanged, continue
+                    continue;
+                }
+                // Instantiate the modified value
+                if (modifiedValue == null) {
+                    modifiedValue = new CompoundTag();
+                }
+                // Set the modified subvalue in the modified value
+                modifiedValue.put(key, modifiedSubvalue);
+            }
+            if (modifiedValue != null) {
+                // If a modified value was created, add any missing keys (that were tested before the first modified subvalue occurred)
+                for (var key : compoundValue.getAllKeys()) {
+                    if (!modifiedValue.contains(key)) {
+                        modifiedValue.put(key, compoundValue.get(key));
+                    }
+                }
+                // Return the modified value
+                return modifiedValue;
+            }
+
+        } else if (value.getId() == Tag.TAG_LIST && value instanceof ListTag listValue) {
+
+            // <ake replacements in the individual subvalues
+            // Keep track of the modified value, which remains null while no modifications have been made
+            @Nullable ListTag modifiedValue = null;
+            for (int i = 0; i < listValue.size(); i++) {
+                var subvalue = listValue.get(i);
+                var modifiedSubvalue = replaceTag(subvalue, context, scope);
+                if (modifiedSubvalue != subvalue) {
+                    // Instantiate the modified value
+                    if (modifiedValue == null) {
+                        modifiedValue = new ListTag();
+                        for (int j = 0; j < i; j++) {
+                            modifiedValue.add(listValue.get(j));
+                        }
+                    }
+                    // Set the modified subvalue in the modified value
+                    modifiedValue.add(modifiedSubvalue);
+                } else if (modifiedValue != null) {
+                    // Add the original subvalue in the modified value
+                    modifiedValue.add(subvalue);
+                }
+            }
+            // Return the modified value if it was created
+            if (modifiedValue != null) {
+                return modifiedValue;
+            }
+
+        } else if (value.getId() == Tag.TAG_STRING && value instanceof StringTag stringValue) {
+
+            // The string may be a serialized component or stringified NBT
+            var text = stringValue.getAsString();
+            var modifiedText = replaceRawJSONTextOrSNBT(text, context, scope);
+            if (modifiedText != text) {
+                return StringTag.valueOf(modifiedText);
+            }
+
+        }
+
+        // By default, if no other value was returned, we return the given instance
+        return value;
+
+    }
+
+    public static ItemStack replaceItemStack(ItemStack value, ItemStackInPacketContext itemStackInPacketContext, DeepReplacementContext context, DeepReplacementScope scope) {
+        // TODO call implementation
+        return value;
+    }
+
+    /**
+     * Nested {@link ItemStack}s always have the {@link ItemStackInPacketContext#DEFAULT} context.
+     */
+    private static ItemStack replaceItemStack(ItemStack value, DeepReplacementContext context, DeepReplacementScope scope) {
+        return replaceItemStack(value, ItemStackInPacketContext.DEFAULT, context, scope);
+    }
+
+    private static ComponentContents replaceTranslatableContents(TranslatableContents value, @Nullable String locale) {
+        // TODO call implementation
+        return value;
+    }
+
+}
