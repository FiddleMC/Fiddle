From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Sat, 30 Dec 2023 21:37:02 +0100
Subject: [PATCH] Client perspective - Block state visualization - Apply to
 chunk packets - Do not multicast chunk packets for anti-x-ray

Removes the mechanism by which constructed `ClientboundLevelChunkWithLightPacket` instances may be sent to multiple targets, if they all must or all must not have anti-x-ray applied.

License: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)
Fiddle - https://fiddlemc.org

diff --git a/src/main/java/io/papermc/paper/chunk/system/RegionizedPlayerChunkLoader.java b/src/main/java/io/papermc/paper/chunk/system/RegionizedPlayerChunkLoader.java
index 924539d4ac50c70178ba220424ffacd6ff277c8b..e56177a6bae4c191a8826235e26c96bb2ff9dd95 100644
--- a/src/main/java/io/papermc/paper/chunk/system/RegionizedPlayerChunkLoader.java
+++ b/src/main/java/io/papermc/paper/chunk/system/RegionizedPlayerChunkLoader.java
@@ -482,7 +482,7 @@ public class RegionizedPlayerChunkLoader {
         private void sendChunk(final int chunkX, final int chunkZ) {
             if (this.sentChunks.add(CoordinateUtils.getChunkKey(chunkX, chunkZ))) {
                 this.world.getChunkSource().chunkMap.updateChunkTracking(this.player,
-                    new ChunkPos(chunkX, chunkZ), new MutableObject<>(), false, true); // unloaded, loaded
+                    new ChunkPos(chunkX, chunkZ), false, true); // unloaded, loaded // Fiddle - client perspective - block state visualization - apply to chunk packets - do not cache for anti-x-ray
                 return;
             }
             throw new IllegalStateException();
@@ -497,7 +497,7 @@ public class RegionizedPlayerChunkLoader {
 
         private void sendUnloadChunkRaw(final int chunkX, final int chunkZ) {
             this.player.serverLevel().getChunkSource().chunkMap.updateChunkTracking(this.player,
-                new ChunkPos(chunkX, chunkZ), null, true, false); // unloaded, loaded
+                new ChunkPos(chunkX, chunkZ), true, false); // unloaded, loaded // Fiddle - client perspective - block state visualization - apply to chunk packets - do not cache for anti-x-ray
         }
 
         private final SingleUserAreaMap<PlayerChunkLoaderData> broadcastMap = new SingleUserAreaMap<>(this) {
diff --git a/src/main/java/net/minecraft/server/level/ChunkMap.java b/src/main/java/net/minecraft/server/level/ChunkMap.java
index 65d947df910d60f478e7a449eb161e5105e2c0c9..3d051881af0c02e21e5a60c6d0764e8ba6c3357c 100644
--- a/src/main/java/net/minecraft/server/level/ChunkMap.java
+++ b/src/main/java/net/minecraft/server/level/ChunkMap.java
@@ -851,7 +851,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
 
     }
 
-    public void updateChunkTracking(ServerPlayer player, ChunkPos pos, MutableObject<java.util.Map<Object, ClientboundLevelChunkWithLightPacket>> packet, boolean oldWithinViewDistance, boolean newWithinViewDistance) { // Paper - public // Paper - Anti-Xray - Bypass
+    public void updateChunkTracking(ServerPlayer player, ChunkPos pos, boolean oldWithinViewDistance, boolean newWithinViewDistance) { // Paper - public // Paper - Anti-Xray - Bypass // Fiddle - client perspective - block state visualization - apply to chunk packets - do not cache for anti-x-ray
         io.papermc.paper.util.TickThread.ensureTickThread(this.level, pos, "May not update chunk tracking for chunk async"); // Paper - replace chunk loader system
         io.papermc.paper.util.TickThread.ensureTickThread(player, "May not update chunk tracking for player async"); // Paper - replace chunk loader system
         if (player.level() == this.level) {
@@ -864,7 +864,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
 
                     if (chunk != null) {
                         playerchunk.addPlayer(player); // Paper - replace chunk loader system
-                        this.playerLoadedChunk(player, packet, chunk);
+                        this.playerLoadedChunk(player, chunk); // Fiddle - client perspective - block state visualization - apply to chunk packets - do not cache for anti-x-ray
                     }
 
                     DebugPackets.sendPoiPacketsForChunk(this.level, pos);
@@ -1393,15 +1393,12 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
     }
 
     // Paper start - Anti-Xray - Bypass
-    private void playerLoadedChunk(ServerPlayer player, MutableObject<java.util.Map<Object, ClientboundLevelChunkWithLightPacket>> cachedDataPackets, LevelChunk chunk) {
-        if (cachedDataPackets.getValue() == null) {
-            cachedDataPackets.setValue(new java.util.HashMap<>());
-        }
-
-        Boolean shouldModify = chunk.getLevel().chunkPacketBlockController.shouldModify(player, chunk);
-        player.trackChunk(chunk.getPos(), (Packet) cachedDataPackets.getValue().computeIfAbsent(shouldModify, (s) -> {
-            return new ClientboundLevelChunkWithLightPacket(chunk, this.lightEngine, (BitSet) null, (BitSet) null, (Boolean) s);
-        }));
+    // Fiddle start - client perspective - block state visualization - apply to chunk packets - do not cache for anti-x-ray
+    private void playerLoadedChunk(ServerPlayer player, LevelChunk chunk) {
+        boolean shouldModify = chunk.getLevel().chunkPacketBlockController.shouldModify(player, chunk);
+        var packet = new ClientboundLevelChunkWithLightPacket(chunk, this.lightEngine, (BitSet) null, (BitSet) null, shouldModify);
+        player.trackChunk(chunk.getPos(), packet);
+        // Fiddle end - client perspective - block state visualization - apply to chunk packets - do not cache for anti-x-ray
         // Paper end
         DebugPackets.sendPoiPacketsForChunk(this.level, chunk.getPos());
         // Paper - no longer needed - this was used to account for clients bugging out since they needed a chunk to store entities, but they no longer need a chunk
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index c2c912154e091251e9cda4f9c296d193fa960b44..8d8e90b30820cd98cf1bff32d76f6db987ef84d6 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -515,14 +515,14 @@ public class CraftWorld extends CraftRegionAccessor implements World {
                 if (playersInRange.isEmpty()) return true; // Paper - rewrite player chunk loader
 
                 // Paper start - Anti-Xray - Bypass
-                Map<Object, ClientboundLevelChunkWithLightPacket> refreshPackets = new HashMap<>();
                 for (ServerPlayer player : playersInRange) {
                     if (player.connection == null) continue;
 
-                    Boolean shouldModify = chunk.getLevel().chunkPacketBlockController.shouldModify(player, chunk);
-                    player.connection.send(refreshPackets.computeIfAbsent(shouldModify, s -> { // Use connection to prevent creating firing event
-                        return new ClientboundLevelChunkWithLightPacket(chunk, this.world.getLightEngine(), null, null, (Boolean) s);
-                    }));
+                    // Fiddle start - client perspective - block state visualization - apply to chunk packets - do not cache for anti-x-ray
+                    boolean shouldModify = chunk.getLevel().chunkPacketBlockController.shouldModify(player, chunk);
+                    var packet = new ClientboundLevelChunkWithLightPacket(chunk, this.world.getLightEngine(), null, null, shouldModify);
+                    player.connection.send(packet); // Use connection to prevent creating firing event
+                    // Fiddle end - client perspective - block state visualization - apply to chunk packets - do not cache for anti-x-ray
                     // Paper end
                 }
         // Paper - rewrite player chunk loader
