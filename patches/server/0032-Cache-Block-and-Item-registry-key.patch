From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Sat, 15 Jul 2023 13:23:05 +0200
Subject: [PATCH] Cache Block and Item registry key

Adds fields `Block.keyInBlockRegistry` and `Item.keyInItemRegistry` that cache the keys in their respective registries.

Also includes corresponding unit tests.

License: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)
Fiddle - https://fiddlemc.org

diff --git a/src/main/java/net/minecraft/world/item/Item.java b/src/main/java/net/minecraft/world/item/Item.java
index b163e80205ef3c44d8921c172844fc85219a9f81..7c7201393c49d2abc4ef7089f0caf1e19ce42894 100644
--- a/src/main/java/net/minecraft/world/item/Item.java
+++ b/src/main/java/net/minecraft/world/item/Item.java
@@ -95,6 +95,15 @@ public class Item implements FeatureElement, ItemLike {
     }
     // Fiddle end - flags for vanilla content - item
 
+    // Fiddle start - cache registry keys as fields - item
+    /**
+     * The {@link net.minecraft.resources.ResourceLocation} with which this item is registered in the
+     * {@link BuiltInRegistries#ITEM item registry}.
+     * This will be null until initialized in {@link org.fiddlemc.fiddle.registry.ItemRegistry#register}.
+     */
+    public @Nullable net.minecraft.resources.ResourceLocation keyInItemRegistry = null;
+    // Fiddle end - cache registry keys as fields - item
+
     public static int getId(Item item) {
         return item == null ? 0 : BuiltInRegistries.ITEM.getId(item);
     }
diff --git a/src/main/java/net/minecraft/world/level/block/Block.java b/src/main/java/net/minecraft/world/level/block/Block.java
index af60eff82fa914fd144b10bbeadbc00f59985732..a608ec6ac4eb34c0894095516aa63a1c44900121 100644
--- a/src/main/java/net/minecraft/world/level/block/Block.java
+++ b/src/main/java/net/minecraft/world/level/block/Block.java
@@ -117,6 +117,16 @@ public class Block extends BlockBehaviour implements ItemLike {
     private String descriptionId;
     @Nullable
     private Item item;
+
+    // Fiddle start - cache registry keys as fields - block
+    /**
+     * The {@link net.minecraft.resources.ResourceLocation} with which this block is registered in the
+     * {@link BuiltInRegistries#BLOCK block registry}.
+     * This will be null until initialized in {@link org.fiddlemc.fiddle.registry.BlockRegistry#register}.
+     */
+    public @Nullable net.minecraft.resources.ResourceLocation keyInBlockRegistry = null;
+    // Fiddle end - cache registry keys as fields - block
+
     private static final int CACHE_SIZE = 2048;
     private static final ThreadLocal<Object2ByteLinkedOpenHashMap<Block.BlockStatePairKey>> OCCLUSION_CACHE = ThreadLocal.withInitial(() -> {
         Object2ByteLinkedOpenHashMap<Block.BlockStatePairKey> object2bytelinkedopenhashmap = new Object2ByteLinkedOpenHashMap<Block.BlockStatePairKey>(2048, 0.25F) {
diff --git a/src/main/java/org/fiddlemc/fiddle/registry/BlockRegistry.java b/src/main/java/org/fiddlemc/fiddle/registry/BlockRegistry.java
index 3fa7faeeaa2fe076ace33d8219f3c44fe3039aa6..b5fd2a1094f6ea8278f3d76228b9919d51e3b849 100644
--- a/src/main/java/org/fiddlemc/fiddle/registry/BlockRegistry.java
+++ b/src/main/java/org/fiddlemc/fiddle/registry/BlockRegistry.java
@@ -41,6 +41,11 @@ public final class BlockRegistry extends DefaultedMappedRegistry<Block> {
         // Register the entry
         var reference = super.register(key, entry, lifecycle);
 
+        // Fiddle start - cache registry keys as fields - block
+        // Initialize the cached registry key field
+        entry.keyInBlockRegistry = super.getKey(entry);
+        // Fiddle end - cache registry keys as fields - block
+
         // Fiddle start - modded registries - apply block post-register operations instantly
         // Perform the post-register operations
         for (net.minecraft.world.level.block.state.BlockState blockState : entry.getStateDefinition().getPossibleStates()) {
@@ -69,4 +74,12 @@ public final class BlockRegistry extends DefaultedMappedRegistry<Block> {
 
     }
 
+    // Fiddle start - cache registry keys as fields - block
+    @Override
+    public net.minecraft.resources.ResourceLocation getKey(Block value) {
+        // Use the cached value
+        return value.keyInBlockRegistry;
+    }
+    // Fiddle end - cache registry keys as fields - block
+
 }
diff --git a/src/main/java/org/fiddlemc/fiddle/registry/ItemRegistry.java b/src/main/java/org/fiddlemc/fiddle/registry/ItemRegistry.java
index 07c51206756ff60cdf45092f0ffc55d1f8bd1c13..2e867d0ce7d6521daabae3fde1f9d0909547b963 100644
--- a/src/main/java/org/fiddlemc/fiddle/registry/ItemRegistry.java
+++ b/src/main/java/org/fiddlemc/fiddle/registry/ItemRegistry.java
@@ -25,6 +25,11 @@ public final class ItemRegistry extends DefaultedMappedRegistry<Item> {
         // Register the entry
         var reference = super.register(key, entry, lifecycle);
 
+        // Fiddle start - cache registry keys as fields - item
+        // Initialize the cached registry key field
+        entry.keyInItemRegistry = super.getKey(entry);
+        // Fiddle end - cache registry keys as fields - item
+
         // Fiddle start - modded registries - register item blocks from item registry
         // Register the item by its blocks if applicable
         if (entry instanceof net.minecraft.world.item.BlockItem blockItem) {
@@ -44,4 +49,12 @@ public final class ItemRegistry extends DefaultedMappedRegistry<Item> {
 
     }
 
+    // Fiddle start - cache registry keys as fields - item
+    @Override
+    public net.minecraft.resources.ResourceLocation getKey(Item value) {
+        // Use the cached value
+        return value.keyInItemRegistry;
+    }
+    // Fiddle end - cache registry keys as fields - item
+
 }
diff --git a/src/test/java/org/fiddlemc/fiddle/block/PerBlockTest.java b/src/test/java/org/fiddlemc/fiddle/block/PerBlockTest.java
index d7d99910630a7e8267352b734bc2eee6c91982f6..f0c325cfc3bdda179482f8b6289e5fde33949e29 100644
--- a/src/test/java/org/fiddlemc/fiddle/block/PerBlockTest.java
+++ b/src/test/java/org/fiddlemc/fiddle/block/PerBlockTest.java
@@ -15,4 +15,13 @@ public class PerBlockTest extends AbstractTestingBase {
         return BuiltInRegistries.BLOCK;
     }
 
+    // Fiddle start - cache registry keys as fields - block
+    @Test
+    public void keyInBlockRegistry() {
+        for (Block block : getBlocks()) {
+            assertEquals(BuiltInRegistries.BLOCK.getKey(block), block.keyInBlockRegistry, "Lookup value does not equal keyInBlockRegistry for " + block);
+        }
+    }
+    // Fiddle end - cache registry keys as fields - block
+
 }
diff --git a/src/test/java/org/fiddlemc/fiddle/item/PerItemTest.java b/src/test/java/org/fiddlemc/fiddle/item/PerItemTest.java
index 911160beec65ff1d865e068f8ad817d6b533ebda..dbde3a6be3b45aea946eb18d7758a8230791c0e9 100644
--- a/src/test/java/org/fiddlemc/fiddle/item/PerItemTest.java
+++ b/src/test/java/org/fiddlemc/fiddle/item/PerItemTest.java
@@ -15,4 +15,13 @@ public class PerItemTest extends AbstractTestingBase {
         return BuiltInRegistries.ITEM;
     }
 
+    // Fiddle start - cache registry keys as fields - item
+    @Test
+    public void keyInItemRegistry() {
+        for (Item item : getItems()) {
+            assertEquals(BuiltInRegistries.ITEM.getKey(item), item.keyInItemRegistry, "Lookup value does not equal keyInItemRegistry for " + item);
+        }
+    }
+    // Fiddle end - cache registry keys as fields - item
+
 }
