From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Mon, 10 Jul 2023 22:05:08 +0200
Subject: [PATCH] Modifiable Bukkit enums - Make legacy Material conversion
 complete

This makes sure that every legacy Material can be converted
to a non-AIR (except if the original is LEGACY_AIR) non-legacy Material,
both explicitly as an item and explicitly as a block.

License: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)
Fiddle - https://fiddlemc.org

diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java
index 471ae4458e7ea7c29d7551b32cec98180fbccd4e..42572f9bf1439b49ff4e9e358a0268873e94cef6 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java
@@ -102,7 +102,7 @@ public class CraftInventory implements Inventory {
     @Override
     public boolean contains(Material material) {
         Preconditions.checkArgument(material != null, "Material cannot be null");
-        material = CraftLegacy.fromLegacy(material);
+        material = CraftLegacy.fromLegacy(material, true); // Fiddle - modifiable Bukkit enums - Material - make legacy conversion complete
         for (ItemStack item : this.getStorageContents()) {
             if (item != null && item.getType() == material) {
                 return true;
@@ -127,7 +127,7 @@ public class CraftInventory implements Inventory {
     @Override
     public boolean contains(Material material, int amount) {
         Preconditions.checkArgument(material != null, "Material cannot be null");
-        material = CraftLegacy.fromLegacy(material);
+        material = CraftLegacy.fromLegacy(material, true); // Fiddle - modifiable Bukkit enums - Material - make legacy conversion complete
         if (amount <= 0) {
             return true;
         }
@@ -176,7 +176,7 @@ public class CraftInventory implements Inventory {
     @Override
     public HashMap<Integer, ItemStack> all(Material material) {
         Preconditions.checkArgument(material != null, "Material cannot be null");
-        material = CraftLegacy.fromLegacy(material);
+        material = CraftLegacy.fromLegacy(material, true); // Fiddle - modifiable Bukkit enums - Material - make legacy conversion complete
         HashMap<Integer, ItemStack> slots = new HashMap<>();
 
         ItemStack[] inventory = this.getStorageContents();
@@ -206,7 +206,7 @@ public class CraftInventory implements Inventory {
     @Override
     public int first(Material material) {
         Preconditions.checkArgument(material != null, "Material cannot be null");
-        material = CraftLegacy.fromLegacy(material);
+        material = CraftLegacy.fromLegacy(material, true); // Fiddle - modifiable Bukkit enums - Material - make legacy conversion complete
         ItemStack[] inventory = this.getStorageContents();
         for (int i = 0; i < inventory.length; i++) {
             ItemStack item = inventory[i];
@@ -261,7 +261,7 @@ public class CraftInventory implements Inventory {
 
     public int firstPartial(Material material) {
         Preconditions.checkArgument(material != null, "Material cannot be null");
-        material = CraftLegacy.fromLegacy(material);
+        material = CraftLegacy.fromLegacy(material, true); // Fiddle - modifiable Bukkit enums - Material - make legacy conversion complete
         ItemStack[] inventory = this.getStorageContents();
         for (int i = 0; i < inventory.length; i++) {
             ItemStack item = inventory[i];
@@ -420,7 +420,7 @@ public class CraftInventory implements Inventory {
     @Override
     public void remove(Material material) {
         Preconditions.checkArgument(material != null, "Material cannot be null");
-        material = CraftLegacy.fromLegacy(material);
+        material = CraftLegacy.fromLegacy(material, true); // Fiddle - modifiable Bukkit enums - Material - make legacy conversion complete
         ItemStack[] items = this.getStorageContents();
         for (int i = 0; i < items.length; i++) {
             if (items[i] != null && items[i].getType() == material) {
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java
index 849e93a8a0645de4c3e6ab8047815d78a722d4f6..64682960669c81ef051e4d97755cf95dfc4f391c 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java
@@ -37,7 +37,7 @@ public final class CraftItemFactory implements ItemFactory {
 
     @Override
     public boolean isApplicable(ItemMeta meta, Material type) {
-        type = CraftLegacy.fromLegacy(type); // This may be called from legacy item stacks, try to get the right material
+        type = CraftLegacy.fromLegacy(type, true); // This may be called from legacy item stacks, try to get the right material // Fiddle - modifiable Bukkit enums - Material - make legacy conversion complete
         if (type == null || meta == null) {
             return false;
         }
@@ -54,7 +54,7 @@ public final class CraftItemFactory implements ItemFactory {
     }
 
     private ItemMeta getItemMeta(Material material, CraftMetaItem meta) {
-        material = CraftLegacy.fromLegacy(material); // This may be called from legacy item stacks, try to get the right material
+        material = CraftLegacy.fromLegacy(material, true); // This may be called from legacy item stacks, try to get the right material // Fiddle - modifiable Bukkit enums - Material - make legacy conversion complete
         switch (material) {
         case AIR:
             return null;
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
index 8657736cdfe2d5d2a1c0851ca54dd26ce17e0a83..6ff2c1399052a5c4e6a775836c308c6e8b208d4f 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
@@ -656,7 +656,7 @@ public final class CraftItemStack extends ItemStack {
         if (this.handle == null || that.handle == null) {
             return false;
         }
-        Material comparisonType = CraftLegacy.fromLegacy(that.getType()); // This may be called from legacy item stacks, try to get the right material
+        Material comparisonType = CraftLegacy.fromLegacy(that.getType(), true); // This may be called from legacy item stacks, try to get the right material // Fiddle - modifiable Bukkit enums - Material - make legacy conversion complete
         if (!(comparisonType == this.getType() && this.getDurability() == that.getDurability())) {
             return false;
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaSpawnEgg.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaSpawnEgg.java
index 3ab43aab043ae59e541f708c8558ddf9bdd82f84..0a3150427e6887b4cdade2607c8837ce8886203f 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaSpawnEgg.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaSpawnEgg.java
@@ -307,7 +307,7 @@ public class CraftMetaSpawnEgg extends CraftMetaItem implements SpawnEggMeta {
                 this.entityTag.remove(ENTITY_ID.NBT);
             }
 
-            return CraftLegacy.fromLegacy(new MaterialData(Material.LEGACY_MONSTER_EGG, (byte) this.spawnedType.getTypeId()));
+            return CraftLegacy.fromLegacy(new MaterialData(Material.LEGACY_MONSTER_EGG, (byte) this.spawnedType.getTypeId()), true); // Fiddle - modifiable Bukkit enums - Material - make legacy conversion complete
         }
 
         return super.updateMaterial(material);
diff --git a/src/main/java/org/bukkit/craftbukkit/legacy/CraftLegacy.java b/src/main/java/org/bukkit/craftbukkit/legacy/CraftLegacy.java
index 2677e21d8239bf0361a3bc5c9a50c328e54d70f6..62ca7c06f8dbcb3315ffa97c0e9c3fecf3acb87f 100644
--- a/src/main/java/org/bukkit/craftbukkit/legacy/CraftLegacy.java
+++ b/src/main/java/org/bukkit/craftbukkit/legacy/CraftLegacy.java
@@ -165,16 +165,12 @@ public final class CraftLegacy {
         return (mappedData == null) ? new MaterialData(Material.LEGACY_AIR) : mappedData;
     }
 
-    public static Material fromLegacy(Material material) {
+    public static Material fromLegacy(Material material, boolean itemPriority) { // Fiddle - modifiable Bukkit enums - Material - make legacy conversion complete
         if (material == null || !material.isLegacy()) {
             return material;
         }
 
-        return CraftLegacy.fromLegacy(new MaterialData(material));
-    }
-
-    public static Material fromLegacy(MaterialData materialData) {
-        return CraftLegacy.fromLegacy(materialData, false);
+        return CraftLegacy.fromLegacy(new MaterialData(material), itemPriority); // Fiddle - modifiable Bukkit enums - Material - make legacy conversion complete
     }
 
     public static Material fromLegacy(MaterialData materialData, boolean itemPriority) {
@@ -428,6 +424,67 @@ public final class CraftLegacy {
                 itemToMaterial.put(newMaterial, matData);
             }
         }
+
+        // Fiddle start - modifiable Bukkit enums - Material - make legacy conversion complete - add LEGACY_SKULL
+        for (byte data = 0; data < 16; data++) {
+            var materialData = new MaterialData(Material.LEGACY_SKULL, data);
+            Item nonLegacyItem;
+            Block nonLegacyBlock;
+            switch (data) {
+                case 1 -> {
+                    nonLegacyItem = Items.WITHER_SKELETON_SKULL;
+                    nonLegacyBlock = Blocks.WITHER_SKELETON_SKULL;
+                }
+                case 2 -> {
+                    nonLegacyItem = Items.ZOMBIE_HEAD;
+                    nonLegacyBlock = Blocks.ZOMBIE_HEAD;
+                }
+                case 3 -> {
+                    nonLegacyItem = Items.PLAYER_HEAD;
+                    nonLegacyBlock = Blocks.PLAYER_HEAD;
+                }
+                case 4 -> {
+                    nonLegacyItem = Items.CREEPER_HEAD;
+                    nonLegacyBlock = Blocks.CREEPER_HEAD;
+                }
+                case 5 -> {
+                    nonLegacyItem = Items.DRAGON_HEAD;
+                    nonLegacyBlock = Blocks.DRAGON_HEAD;
+                }
+                default -> {
+                    nonLegacyItem = Items.SKELETON_SKULL;
+                    nonLegacyBlock = Blocks.SKELETON_SKULL;
+                }
+            }
+            materialToItem.put(materialData, nonLegacyItem);
+            materialToBlock.put(materialData, nonLegacyBlock);
+        }
+        // Fiddle end - modifiable Bukkit enums - Material - make legacy conversion complete - add LEGACY_SKULL
+
+        // Fiddle start - modifiable Bukkit enums - Material - make legacy conversion complete - ensure correct LEGACY_LONG_GRASS
+        for (byte data = 0; data < 16; data++) {
+            var materialData = new MaterialData(Material.LEGACY_LONG_GRASS, data);
+            Item nonLegacyItem;
+            Block nonLegacyBlock;
+            switch (data) {
+                case 1 -> {
+                    nonLegacyItem = Items.GRASS;
+                    nonLegacyBlock = Blocks.GRASS;
+                }
+                case 2 -> {
+                    nonLegacyItem = Items.FERN;
+                    nonLegacyBlock = Blocks.FERN;
+                }
+                default -> {
+                    nonLegacyItem = Items.DEAD_BUSH;
+                    nonLegacyBlock = Blocks.DEAD_BUSH;
+                }
+            }
+            materialToItem.put(materialData, nonLegacyItem);
+            materialToBlock.put(materialData, nonLegacyBlock);
+        }
+        // Fiddle end - modifiable Bukkit enums - Material - make legacy conversion complete - ensure correct LEGACY_LONG_GRASS
+
     }
 
     public static void main(String[] args) {
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftLegacy.java b/src/main/java/org/bukkit/craftbukkit/util/CraftLegacy.java
index c8dde75de231b5fdde88f5bc111c21883d9c3f49..16640f83c14b907b26dff8d5490e89169234dde5 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftLegacy.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftLegacy.java
@@ -14,16 +14,18 @@ public final class CraftLegacy {
         //
     }
 
-    public static Material fromLegacy(Material material) {
+    public static Material fromLegacy(Material material, boolean itemPriority) { // Fiddle - modifiable Bukkit enums - Material - make legacy conversion complete
         if (material == null || !material.isLegacy()) {
             return material;
         }
 
-        return org.bukkit.craftbukkit.legacy.CraftLegacy.fromLegacy(material);
+        return org.bukkit.craftbukkit.legacy.CraftLegacy.fromLegacy(material, itemPriority); // Fiddle - modifiable Bukkit enums - Material - make legacy conversion complete
     }
 
-    public static Material fromLegacy(MaterialData materialData) {
-        return org.bukkit.craftbukkit.legacy.CraftLegacy.fromLegacy(materialData);
+    // Fiddle start - modifiable Bukkit enums - Material - make legacy conversion complete
+    public static Material fromLegacy(MaterialData materialData, boolean itemPriority) {
+        return org.bukkit.craftbukkit.legacy.CraftLegacy.fromLegacy(materialData, itemPriority);
+        // Fiddle end - modifiable Bukkit enums - Material - make legacy conversion complete
     }
 
     public static Material[] modern_values() {
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
index 90a3f82a2491379318db6382ed8b8f80524dbc0a..84d3c58e0cc120faa8d3dbe78246c8612bc3e5cd 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
@@ -194,7 +194,7 @@ public final class CraftMagicNumbers implements UnsafeValues {
 
     public static Item getItem(Material material) {
         if (material != null && material.isLegacy()) {
-            material = CraftLegacy.fromLegacy(material);
+            material = CraftLegacy.fromLegacy(material, true); // Fiddle - modifiable Bukkit enums - Material - make legacy conversion complete
         }
 
         return CraftMagicNumbers.MATERIAL_ITEM.get(material);
@@ -202,7 +202,7 @@ public final class CraftMagicNumbers implements UnsafeValues {
 
     public static Block getBlock(Material material) {
         if (material != null && material.isLegacy()) {
-            material = CraftLegacy.fromLegacy(material);
+            material = CraftLegacy.fromLegacy(material, false); // Fiddle - modifiable Bukkit enums - Material - make legacy conversion complete
         }
 
         return CraftMagicNumbers.MATERIAL_BLOCK.get(material);
@@ -242,12 +242,19 @@ public final class CraftMagicNumbers implements UnsafeValues {
 
     @Override
     public Material fromLegacy(Material material) {
-        return CraftLegacy.fromLegacy(material);
+        // Fiddle start - modifiable Bukkit enums - Material - make legacy conversion complete
+        return this.fromLegacy(material, false);
+    }
+
+    @Override
+    public Material fromLegacy(Material material, boolean itemPriority) {
+        return CraftLegacy.fromLegacy(material, itemPriority);
+        // Fiddle end - modifiable Bukkit enums - Material - make legacy conversion complete
     }
 
     @Override
     public Material fromLegacy(MaterialData material) {
-        return CraftLegacy.fromLegacy(material);
+        return this.fromLegacy(material, false); // Fiddle - modifiable Bukkit enums - Material - make legacy conversion complete
     }
 
     @Override
diff --git a/src/test/java/org/bukkit/craftbukkit/legacy/LegacyTest.java b/src/test/java/org/bukkit/craftbukkit/legacy/LegacyTest.java
index 7e3452542e954ad202f4bbb861d9a2f9ef8262ef..e7b3f694d9667b62c66f448027a8475cc977c3c2 100644
--- a/src/test/java/org/bukkit/craftbukkit/legacy/LegacyTest.java
+++ b/src/test/java/org/bukkit/craftbukkit/legacy/LegacyTest.java
@@ -128,10 +128,10 @@ public class LegacyTest extends AbstractTestingBase {
                 Assert.assertNotEquals("Could not toLegacy " + material, Material.LEGACY_AIR, converted.getItemType());
 
                 if (!this.INVALIDATED_MATERIALS.contains(converted.getItemType())) {
-                    Assert.assertNotEquals("Could not fromLegacy(toLegacy) " + converted + "(" + material + ")", Material.AIR, CraftLegacy.fromLegacy(converted));
+                    Assert.assertNotEquals("Could not fromLegacy(toLegacy) " + converted + "(" + material + ")", Material.AIR, CraftLegacy.fromLegacy(converted, false)); // Fiddle - modifiable Bukkit enums - Material - make legacy conversion complete
                 }
                 if (!this.INVERSION_FAILS.contains(material)) {
-                    Assert.assertEquals("Could not fromLegacy(toLegacy) " + converted + "(" + material + ")", material, CraftLegacy.fromLegacy(converted));
+                    Assert.assertEquals("Could not fromLegacy(toLegacy) " + converted + "(" + material + ")", material, CraftLegacy.fromLegacy(converted, false)); // Fiddle - modifiable Bukkit enums - Material - make legacy conversion complete
                 }
             }
         }
@@ -143,7 +143,7 @@ public class LegacyTest extends AbstractTestingBase {
     public void fromLegacyMaterial() {
         for (Material material : Material.values()) {
             if (!this.INVALIDATED_MATERIALS.contains(material) && material.isLegacy()) {
-                Material converted = CraftLegacy.fromLegacy(material);
+                Material converted = CraftLegacy.fromLegacy(material, false); // Fiddle - modifiable Bukkit enums - Material - make legacy conversion complete
                 Assert.assertNotEquals("Could not fromLegacy " + material, Material.AIR, converted);
 
                 Assert.assertNotEquals("Could not toLegacy(fromLegacy) " + converted + "(" + material + ")", Material.AIR, CraftLegacy.toLegacy(converted));
@@ -153,7 +153,7 @@ public class LegacyTest extends AbstractTestingBase {
             }
         }
 
-        Assert.assertEquals("Could not fromLegacy Air", Material.AIR, CraftLegacy.fromLegacy(Material.LEGACY_AIR));
+        Assert.assertEquals("Could not fromLegacy Air", Material.AIR, CraftLegacy.fromLegacy(Material.LEGACY_AIR, false)); // Fiddle - modifiable Bukkit enums - Material - make legacy conversion complete
     }
 
     @Test
diff --git a/src/test/java/org/fiddlemc/fiddle/material/legacy/PerLegacyMaterialTest.java b/src/test/java/org/fiddlemc/fiddle/material/legacy/PerLegacyMaterialTest.java
new file mode 100644
index 0000000000000000000000000000000000000000..223b30b950d014106b640b3c00f51e531fb107bc
--- /dev/null
+++ b/src/test/java/org/fiddlemc/fiddle/material/legacy/PerLegacyMaterialTest.java
@@ -0,0 +1,38 @@
+// Fiddle - modifiable Bukkit enums - Material - make legacy conversion complete
+
+package org.fiddlemc.fiddle.material.legacy;
+
+import org.bukkit.Material;
+import org.bukkit.craftbukkit.legacy.CraftLegacy;
+import org.bukkit.support.AbstractTestingBase;
+import org.junit.Test;
+
+import java.util.Arrays;
+
+import static org.junit.Assert.*;
+
+/**
+ * Does a number of sanity checks on {@linkplain Material#isLegacy() legacy} {@link Material}s.
+ */
+public class PerLegacyMaterialTest extends AbstractTestingBase {
+
+    private Material[] getMaterials() {
+        return Arrays.stream(Material.values()).filter(Material::isLegacy).toList().toArray(Material[]::new);
+    }
+
+    @Test
+    @SuppressWarnings("deprecation")
+    public void hasMappedNonLegacy() {
+        for (Material material : getMaterials()) {
+            for (boolean itemPriority : new boolean[]{false, true}) {
+                // when
+                var nonLegacy = CraftLegacy.fromLegacy(material, itemPriority);
+
+                // then
+                assertNotNull("Non-legacy is non-null for " + material + " with item priority = " + itemPriority, nonLegacy);
+                assertEquals("Non-legacy is non-air (unless original is legacy air) for " + material + " with item priority = " + itemPriority,material == Material.LEGACY_AIR, nonLegacy == Material.AIR);
+            }
+        }
+    }
+
+}
diff --git a/src/test/java/org/fiddlemc/fiddle/material/legacy/PerNonLegacyMaterialTest.java b/src/test/java/org/fiddlemc/fiddle/material/legacy/PerNonLegacyMaterialTest.java
new file mode 100644
index 0000000000000000000000000000000000000000..12889be0db543d9138f328163617c5f583c48018
--- /dev/null
+++ b/src/test/java/org/fiddlemc/fiddle/material/legacy/PerNonLegacyMaterialTest.java
@@ -0,0 +1,38 @@
+// Fiddle - modifiable Bukkit enums - Material - make legacy conversion complete
+
+package org.fiddlemc.fiddle.material.legacy;
+
+import org.bukkit.Material;
+import org.bukkit.craftbukkit.legacy.CraftLegacy;
+import org.bukkit.support.AbstractTestingBase;
+import org.junit.Test;
+
+import java.util.Arrays;
+import java.util.function.Predicate;
+
+import static org.junit.Assert.assertEquals;
+
+/**
+ * Does a number of sanity checks on {@linkplain Material#isLegacy() non-legacy Materials}.
+ */
+public class PerNonLegacyMaterialTest extends AbstractTestingBase {
+
+    private Material[] getMaterials() {
+        return Arrays.stream(Material.values()).filter(Predicate.not(Material::isLegacy)).toList().toArray(Material[]::new);
+    }
+
+    @Test
+    @SuppressWarnings("deprecation")
+    public void hasNoMappedNonLegacy() {
+        for (Material material : getMaterials()) {
+            for (boolean itemPriority : new boolean[]{false, true}) {
+                // when
+                var nonLegacy = CraftLegacy.fromLegacy(material, itemPriority);
+
+                // then
+                assertEquals("Non-legacy is self for " + material + " with item priority = " + itemPriority, material, nonLegacy);
+            }
+        }
+    }
+
+}
