From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Sat, 29 Jul 2023 12:54:28 +0200
Subject: [PATCH] Client perspective - Deep replacements - Pass replacement
 scope

License: Fiddle Public License Agreement 1.0 (included in license/FPL-1.0.txt)
Fiddle - https://fiddlemc.org

diff --git a/src/main/java/net/minecraft/nbt/CompoundTag.java b/src/main/java/net/minecraft/nbt/CompoundTag.java
index 7e94ebe06fc62293e665d6db19e42d947e7eb30f..2963f5ef432cdad060324dfe30b1ac13ca3ecc3c 100644
--- a/src/main/java/net/minecraft/nbt/CompoundTag.java
+++ b/src/main/java/net/minecraft/nbt/CompoundTag.java
@@ -17,6 +17,9 @@ import javax.annotation.Nullable;
 import net.minecraft.CrashReport;
 import net.minecraft.CrashReportCategory;
 import net.minecraft.ReportedException;
+import org.fiddlemc.fiddle.packet.deepreplacement.ClientPerspectiveAndSettingsSupplier;
+import org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacementScope;
+import org.jetbrains.annotations.NotNull;
 
 public class CompoundTag implements Tag {
     public static final Codec<CompoundTag> CODEC = Codec.PASSTHROUGH.comapFlatMap((dynamic) -> {
@@ -135,9 +138,16 @@ public class CompoundTag implements Tag {
 
     @Override
     public void write(DataOutput output) throws IOException {
+        // Fiddle start - client perspective - deep replacements - pass scope - to CompoundTag#write
+        throw new UnsupportedOperationException(this.getClass().getSimpleName() + ".write(...) without a replacement scope is not supported");
+    }
+
+    @Override
+    public void write(DataOutput output, @org.jetbrains.annotations.Nullable ClientPerspectiveAndSettingsSupplier clientPerspectiveAndSettings, @NotNull DeepReplacementScope replacementScope) throws IOException {
+        // Fiddle end - client perspective - deep replacements - pass scope - to CompoundTag#write
         for(String string : this.tags.keySet()) {
             Tag tag = this.tags.get(string);
-            writeNamedTag(string, tag, output);
+            writeNamedTag(string, tag, output, clientPerspectiveAndSettings, replacementScope); // Fiddle - client perspective - deep replacements - pass scope - to CompoundTag#writeNamedTag
         }
 
         output.writeByte(0);
@@ -491,11 +501,11 @@ public class CompoundTag implements Tag {
         return this.tags.hashCode();
     }
 
-    private static void writeNamedTag(String key, Tag element, DataOutput output) throws IOException {
+    private static void writeNamedTag(String key, Tag element, DataOutput output, @org.jetbrains.annotations.Nullable ClientPerspectiveAndSettingsSupplier clientPerspectiveAndSettings, @NotNull DeepReplacementScope replacementScope) throws IOException { // Fiddle - client perspective - deep replacements - pass scope - to CompoundTag#writeNamedTag
         output.writeByte(element.getId());
         if (element.getId() != 0) {
             output.writeUTF(key);
-            element.write(output);
+            element.write(output, clientPerspectiveAndSettings, replacementScope); // Fiddle - client perspective - deep replacements - pass scope - to Tag#write
         }
     }
 
diff --git a/src/main/java/net/minecraft/nbt/ListTag.java b/src/main/java/net/minecraft/nbt/ListTag.java
index b74b77ec2fd45c7a44e4f2696c4f57075c3d4080..61467bb7ea7d506f192259621bead8f18968fb7f 100644
--- a/src/main/java/net/minecraft/nbt/ListTag.java
+++ b/src/main/java/net/minecraft/nbt/ListTag.java
@@ -2,6 +2,11 @@ package net.minecraft.nbt;
 
 import com.google.common.collect.Iterables;
 import com.google.common.collect.Lists;
+import org.fiddlemc.fiddle.packet.deepreplacement.ClientPerspectiveAndSettingsSupplier;
+import org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacementScope;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 import java.io.DataInput;
 import java.io.DataOutput;
 import java.io.IOException;
@@ -117,6 +122,13 @@ public class ListTag extends CollectionTag<Tag> {
 
     @Override
     public void write(DataOutput output) throws IOException {
+        // Fiddle start - client perspective - deep replacements - pass scope - to ListTag#write
+        throw new UnsupportedOperationException(this.getClass().getSimpleName() + ".write(...) without a replacement scope is not supported");
+    }
+
+    @Override
+    public void write(DataOutput output, @Nullable ClientPerspectiveAndSettingsSupplier clientPerspectiveAndSettings, @NotNull DeepReplacementScope replacementScope) throws IOException {
+        // Fiddle end - client perspective - deep replacements - pass scope - to ListTag#write
         if (this.list.isEmpty()) {
             this.type = 0;
         } else {
@@ -127,7 +139,7 @@ public class ListTag extends CollectionTag<Tag> {
         output.writeInt(this.list.size());
 
         for(Tag tag : this.list) {
-            tag.write(output);
+            tag.write(output, clientPerspectiveAndSettings, replacementScope); // Fiddle end - client perspective - deep replacements - pass scope - to Tag#write
         }
 
     }
diff --git a/src/main/java/net/minecraft/nbt/NbtIo.java b/src/main/java/net/minecraft/nbt/NbtIo.java
index 8101b9f29824138e549555fa9aff3913e49f1e50..73c34eb47b0b8a304b238d67cf63711c5bd74a65 100644
--- a/src/main/java/net/minecraft/nbt/NbtIo.java
+++ b/src/main/java/net/minecraft/nbt/NbtIo.java
@@ -19,6 +19,9 @@ import net.minecraft.CrashReport;
 import net.minecraft.CrashReportCategory;
 import net.minecraft.ReportedException;
 import net.minecraft.util.FastBufferedInputStream;
+import org.fiddlemc.fiddle.packet.deepreplacement.ClientPerspectiveAndSettingsSupplier;
+import org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacementScope;
+import org.jetbrains.annotations.NotNull;
 
 public class NbtIo {
 
@@ -245,7 +248,14 @@ public class NbtIo {
     }
 
     public static void write(CompoundTag nbt, DataOutput output) throws IOException {
-        NbtIo.writeUnnamedTag(nbt, output);
+        // Fiddle start - client perspective - deep replacements - pass scope - to NbtIo#write
+        // The only occurrence of NbtIo#write that is network-related is in FriendlyByteBuf#writeNbt, so by default we assume that calls are not network-related and therefore do not need replacements
+        write(nbt, output, null, DeepReplacementScope.NOTHING);
+    }
+
+    public static void write(CompoundTag nbt, DataOutput output, @org.jetbrains.annotations.Nullable ClientPerspectiveAndSettingsSupplier clientPerspectiveAndSettings, @NotNull DeepReplacementScope replacementScope) throws IOException {
+        // Fiddle end - client perspective - deep replacements - pass scope - to NbtIo#write
+        NbtIo.writeUnnamedTag(nbt, output, clientPerspectiveAndSettings, replacementScope); // Fiddle - client perspective - deep replacements - pass scope - to NbtIo#writeUnnamedTag
     }
 
     public static void parse(DataInput input, StreamTagVisitor scanner) throws IOException {
@@ -273,11 +283,11 @@ public class NbtIo {
         }
     }
 
-    public static void writeUnnamedTag(Tag nbt, DataOutput output) throws IOException {
+    public static void writeUnnamedTag(Tag nbt, DataOutput output, @org.jetbrains.annotations.Nullable ClientPerspectiveAndSettingsSupplier clientPerspectiveAndSettings, @NotNull DeepReplacementScope replacementScope) throws IOException { // Fiddle - client perspective - deep replacements - pass scope - to NbtIo#writeUnnamedTag
         output.writeByte(nbt.getId());
         if (nbt.getId() != 0) {
             output.writeUTF("");
-            nbt.write(output);
+            nbt.write(output, clientPerspectiveAndSettings, replacementScope); // Fiddle - client perspective - deep replacements - pass scope - to Tag#write
         }
     }
 
diff --git a/src/main/java/net/minecraft/nbt/StringTag.java b/src/main/java/net/minecraft/nbt/StringTag.java
index afe6bdb5995cfb9c9e76effc4c159163f9b6e367..58c84e6745dcd73560bb47afd85e57f998b99a19 100644
--- a/src/main/java/net/minecraft/nbt/StringTag.java
+++ b/src/main/java/net/minecraft/nbt/StringTag.java
@@ -6,6 +6,9 @@ import java.io.IOException;
 import java.io.UTFDataFormatException;
 import java.util.Objects;
 import net.minecraft.Util;
+import org.fiddlemc.fiddle.packet.deepreplacement.ClientPerspectiveAndSettingsSupplier;
+import org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacementScope;
+import org.jetbrains.annotations.NotNull;
 
 public class StringTag implements Tag {
     private static final int SELF_SIZE_IN_BYTES = 36;
@@ -65,6 +68,13 @@ public class StringTag implements Tag {
 
     @Override
     public void write(DataOutput output) throws IOException {
+        // Fiddle start - client perspective - deep replacements - pass scope - to StringTag#write
+        throw new UnsupportedOperationException(this.getClass().getSimpleName() + ".write(...) without a replacement scope is not supported");
+    }
+
+    @Override
+    public void write(DataOutput output, @org.jetbrains.annotations.Nullable ClientPerspectiveAndSettingsSupplier clientPerspectiveAndSettings, @NotNull DeepReplacementScope replacementScope) throws IOException {
+        // Fiddle end - client perspective - deep replacements - pass scope - to StringTag#write
         try {
             output.writeUTF(this.data);
         } catch (UTFDataFormatException var3) {
diff --git a/src/main/java/net/minecraft/nbt/Tag.java b/src/main/java/net/minecraft/nbt/Tag.java
index 0c3fb39dfff42cc322b82c6da885d39f866aee41..775641e0caa21a5eca1ce404fc99b2bf95d6050d 100644
--- a/src/main/java/net/minecraft/nbt/Tag.java
+++ b/src/main/java/net/minecraft/nbt/Tag.java
@@ -1,5 +1,10 @@
 package net.minecraft.nbt;
 
+import org.fiddlemc.fiddle.packet.deepreplacement.ClientPerspectiveAndSettingsSupplier;
+import org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacementScope;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 import java.io.DataOutput;
 import java.io.IOException;
 
@@ -26,6 +31,13 @@ public interface Tag {
 
     void write(DataOutput output) throws IOException;
 
+    // Fiddle start - client perspective - deep replacements - pass scope - to Tag#write
+    default void write(DataOutput output, @Nullable ClientPerspectiveAndSettingsSupplier clientPerspectiveAndSettings, @NotNull DeepReplacementScope replacementScope) throws IOException {
+        // By default, this simply calls write(DataOutput), which will be the implementation for most non-complex tags
+        this.write(output);
+    }
+    // Fiddle end - client perspective - deep replacements - pass scope - to Tag#write
+
     @Override
     String toString();
 
diff --git a/src/main/java/net/minecraft/network/FriendlyByteBuf.java b/src/main/java/net/minecraft/network/FriendlyByteBuf.java
index 6536d84b95d0d4ede52b41b47c68054f793fdaac..c5aa578d984f5350b850012c25e5a62124cc8207 100644
--- a/src/main/java/net/minecraft/network/FriendlyByteBuf.java
+++ b/src/main/java/net/minecraft/network/FriendlyByteBuf.java
@@ -86,6 +86,8 @@ import net.minecraft.world.phys.BlockHitResult;
 import net.minecraft.world.phys.Vec3;
 import org.fiddlemc.fiddle.packet.ClientPerspective;
 import org.fiddlemc.fiddle.packet.deepreplacement.ClientPerspectiveAndSettingsSupplier;
+import org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacementScope;
+import org.fiddlemc.fiddle.packet.item.ItemStackInPacketContext;
 import org.jetbrains.annotations.NotNull;
 import org.joml.Quaternionf;
 import org.joml.Vector3f;
@@ -563,18 +565,51 @@ public class FriendlyByteBuf extends ByteBuf {
 
     // Paper start
     public FriendlyByteBuf writeComponent(final net.kyori.adventure.text.Component component) {
-        return this.writeUtf(PaperAdventure.asJsonString(component, this.adventure$locale), 262144);
+        // Fiddle start - client perspective - deep replacements - pass scope - to FriendlyByteBuf#writeComponent(net.kyori.adventure.text.Component)
+        // By default, we assume all replacements should be made
+        return this.writeComponent(component, DeepReplacementScope.EVERYTHING);
+    }
+
+    public FriendlyByteBuf writeComponent(final net.kyori.adventure.text.Component component, @NotNull DeepReplacementScope replacementScope) {
+        return this.writeComponent(component, this.getClientPerspectiveAndSettingsSupplierUnlessScopeIsNothing(replacementScope), replacementScope);
+    }
+
+    public FriendlyByteBuf writeComponent(final net.kyori.adventure.text.Component component, @NotNull ClientPerspectiveAndSettingsSupplier clientPerspectiveAndSettings, @NotNull DeepReplacementScope replacementScope) {
+        return this.writeUtf(PaperAdventure.asJsonString(component, this.adventure$locale), 262144, true, false, clientPerspectiveAndSettings, replacementScope);
+        // Fiddle end - client perspective - deep replacements - pass scope - to FriendlyByteBuf#writeComponent(net.kyori.adventure.text.Component)
     }
 
     @Deprecated
     public FriendlyByteBuf writeComponent(final net.md_5.bungee.api.chat.BaseComponent[] component) {
-        return this.writeUtf(net.md_5.bungee.chat.ComponentSerializer.toString(component), 262144);
+        // Fiddle start - client perspective - deep replacements - pass scope - to FriendlyByteBuf#writeComponent(net.md_5.bungee.api.chat.BaseComponent[])
+        // By default, we assume all replacements should be made
+        return this.writeComponent(component, DeepReplacementScope.EVERYTHING);
+    }
+
+    public FriendlyByteBuf writeComponent(final net.md_5.bungee.api.chat.BaseComponent[] component, @NotNull DeepReplacementScope replacementScope) {
+        return this.writeComponent(component, this.getClientPerspectiveAndSettingsSupplierUnlessScopeIsNothing(replacementScope), replacementScope);
+    }
+
+    public FriendlyByteBuf writeComponent(final net.md_5.bungee.api.chat.BaseComponent[] component, @NotNull ClientPerspectiveAndSettingsSupplier clientPerspectiveAndSettings, @NotNull DeepReplacementScope replacementScope) {
+        return this.writeUtf(net.md_5.bungee.chat.ComponentSerializer.toString(component), 262144, true, false, clientPerspectiveAndSettings, replacementScope);
+        // Fiddle end - client perspective - deep replacements - pass scope - to FriendlyByteBuf#writeComponent(net.md_5.bungee.api.chat.BaseComponent[])
     }
     // Paper end
 
     public FriendlyByteBuf writeComponent(Component text) {
+        // Fiddle start - client perspective - deep replacements - pass scope - to FriendlyByteBuf#writeComponent(net.minecraft.network.chat.Component)
+        // By default, we assume all replacements should be made
+        return this.writeComponent(text, DeepReplacementScope.EVERYTHING);
+    }
+
+    public FriendlyByteBuf writeComponent(Component text, @NotNull DeepReplacementScope replacementScope) {
+        return this.writeComponent(text, this.getClientPerspectiveAndSettingsSupplierUnlessScopeIsNothing(replacementScope), replacementScope);
+    }
+
+    public FriendlyByteBuf writeComponent(Component text, @NotNull ClientPerspectiveAndSettingsSupplier clientPerspectiveAndSettings, @NotNull DeepReplacementScope replacementScope) {
+        // Fiddle end - client perspective - deep replacements - pass scope - to FriendlyByteBuf#writeComponent(net.minecraft.network.chat.Component)
         //return this.a(IChatBaseComponent.ChatSerializer.a(ichatbasecomponent), 262144); // Paper - comment
-        return this.writeUtf(PaperAdventure.asJsonString(text, this.adventure$locale), 262144); // Paper
+        return this.writeUtf(PaperAdventure.asJsonString(text, this.adventure$locale), 262144, true, false, clientPerspectiveAndSettings, replacementScope); // Paper // Fiddle - client perspective - deep replacements - pass scope - to FriendlyByteBuf#writeComponent(net.minecraft.network.chat.Component)
     }
 
     public <T extends Enum<T>> T readEnum(Class<T> enumClass) {
@@ -650,11 +685,22 @@ public class FriendlyByteBuf extends ByteBuf {
     }
 
     public FriendlyByteBuf writeNbt(@Nullable CompoundTag compound) {
+        // Fiddle start - client perspective - deep replacements - pass scope - to FriendlyByteBuf#writeNbt
+        // By default, we assume all replacements should be made
+        return this.writeNbt(compound, DeepReplacementScope.EVERYTHING);
+    }
+
+    public FriendlyByteBuf writeNbt(@Nullable CompoundTag compound, @NotNull DeepReplacementScope replacementScope) {
+        return this.writeNbt(compound, this.getClientPerspectiveAndSettingsSupplierUnlessScopeIsNothing(replacementScope), replacementScope);
+    }
+
+    public FriendlyByteBuf writeNbt(@Nullable CompoundTag compound, @NotNull ClientPerspectiveAndSettingsSupplier clientPerspectiveAndSettings, @NotNull DeepReplacementScope replacementScope) {
+        // Fiddle end - client perspective - deep replacements - pass scope - to FriendlyByteBuf#writeNbt
         if (compound == null) {
             this.writeByte(0);
         } else {
             try {
-                NbtIo.write(compound, (DataOutput) (new ByteBufOutputStream(this)));
+                NbtIo.write(compound, (DataOutput) (new ByteBufOutputStream(this)), clientPerspectiveAndSettings, replacementScope);
             } catch (Exception ioexception) { // CraftBukkit - IOException -> Exception
                 throw new EncoderException(ioexception);
             }
@@ -692,6 +738,29 @@ public class FriendlyByteBuf extends ByteBuf {
     }
 
     public FriendlyByteBuf writeItem(ItemStack stack) {
+        // Fiddle start - client perspective - deep replacements - pass scope - to FriendlyByteBuf#writeItem
+        return this.writeItem(stack, ItemStackInPacketContext.DEFAULT);
+    }
+
+    public FriendlyByteBuf writeItem(ItemStack stack, @NotNull ItemStackInPacketContext itemStackInPackContext) {
+        // By default, we assume all replacements should be made
+        return this.writeItem(stack, itemStackInPackContext, DeepReplacementScope.EVERYTHING);
+    }
+
+    public FriendlyByteBuf writeItem(ItemStack stack, @NotNull DeepReplacementScope replacementScope) {
+        return this.writeItem(stack, ItemStackInPacketContext.DEFAULT, replacementScope);
+    }
+
+    public FriendlyByteBuf writeItem(ItemStack stack, @NotNull ItemStackInPacketContext itemStackInPackContext, @NotNull DeepReplacementScope replacementScope) {
+        return this.writeItem(stack, itemStackInPackContext, this.getClientPerspectiveAndSettingsSupplierUnlessScopeIsNothing(replacementScope), replacementScope);
+    }
+
+    public FriendlyByteBuf writeItem(ItemStack stack, @NotNull ClientPerspectiveAndSettingsSupplier clientPerspectiveAndSettings, @NotNull DeepReplacementScope replacementScope) {
+        return this.writeItem(stack, ItemStackInPacketContext.DEFAULT, clientPerspectiveAndSettings, replacementScope);
+    }
+
+    public FriendlyByteBuf writeItem(ItemStack stack, @NotNull ItemStackInPacketContext itemStackInPackContext, @NotNull ClientPerspectiveAndSettingsSupplier clientPerspectiveAndSettings, @NotNull DeepReplacementScope replacementScope) {
+        // Fiddle end - client perspective - deep replacements - pass scope - to FriendlyByteBuf#writeItem
         if (stack.isEmpty() || stack.getItem() == null) { // CraftBukkit - NPE fix itemstack.getItem()
             this.writeBoolean(false);
         } else {
@@ -710,7 +779,7 @@ public class FriendlyByteBuf extends ByteBuf {
                 nbttagcompound = stack.getTag();
             }
 
-            this.writeNbt(nbttagcompound);
+            this.writeNbt(nbttagcompound, clientPerspectiveAndSettings, replacementScope); // Fiddle - client perspective - deep replacements - pass scope - to FriendlyByteBuf#writeNbt
         }
 
         return this;
@@ -765,6 +834,25 @@ public class FriendlyByteBuf extends ByteBuf {
     }
 
     public FriendlyByteBuf writeUtf(String string, int maxLength) {
+        // Fiddle start - client perspective - deep replacements - pass scope - to FriendlyByteBuf#writeUtf
+        // By default, we assume all replacements should be made
+        return this.writeUtf(string, true, true, DeepReplacementScope.EVERYTHING);
+    }
+
+    public FriendlyByteBuf writeUtf(String string, boolean canBeRawJsonText, boolean canBeSNBT, @NotNull DeepReplacementScope replacementScope) {
+        return this.writeUtf(string, 32767, canBeRawJsonText, canBeSNBT, this.getClientPerspectiveAndSettingsSupplierUnlessScopeIsNothing(replacementScope), replacementScope);
+    }
+
+    public FriendlyByteBuf writeUtf(String string, boolean canBeRawJsonText, boolean canBeSNBT, @NotNull ClientPerspectiveAndSettingsSupplier clientPerspectiveAndSettings, @NotNull DeepReplacementScope replacementScope) {
+        return this.writeUtf(string, 32767, canBeRawJsonText, canBeSNBT, clientPerspectiveAndSettings, replacementScope);
+    }
+
+    public FriendlyByteBuf writeUtf(String string, int maxLength, boolean canBeRawJsonText, boolean canBeSNBT, @NotNull DeepReplacementScope replacementScope) {
+        return this.writeUtf(string, maxLength, canBeRawJsonText, canBeSNBT, this.getClientPerspectiveAndSettingsSupplierUnlessScopeIsNothing(replacementScope), replacementScope);
+    }
+
+    public FriendlyByteBuf writeUtf(String string, int maxLength, boolean canBeRawJsonText, boolean canBeSNBT, @NotNull ClientPerspectiveAndSettingsSupplier clientPerspectiveAndSettings, @NotNull DeepReplacementScope replacementScope) {
+        // Fiddle end - client perspective - deep replacements - pass scope - to FriendlyByteBuf#writeUtf
         if (string.length() > maxLength) {
             int j = string.length();
 
@@ -792,7 +880,7 @@ public class FriendlyByteBuf extends ByteBuf {
     }
 
     public FriendlyByteBuf writeResourceLocation(ResourceLocation id) {
-        this.writeUtf(id.toString());
+        this.writeUtf(id.toString(), false, false, DeepReplacementScope.NOTHING); // Fiddle - client perspective - deep replacements - pass scope - to FriendlyByteBuf#writeUtf - this never contains replaceables
         return this;
     }
 
@@ -898,7 +986,7 @@ public class FriendlyByteBuf extends ByteBuf {
 
     public void writeGameProfile(GameProfile gameProfile) {
         this.writeUUID(gameProfile.getId());
-        this.writeUtf(gameProfile.getName());
+        this.writeUtf(gameProfile.getName(), false, false, DeepReplacementScope.NOTHING); // Fiddle - client perspective - deep replacements - pass scope - to FriendlyByteBuf#writeUtf - this never contains replaceables
         this.writeGameProfileProperties(gameProfile.getProperties());
     }
 
@@ -931,11 +1019,13 @@ public class FriendlyByteBuf extends ByteBuf {
     }
 
     public void writeProperty(Property property) {
-        this.writeUtf(property.getName());
-        this.writeUtf(property.getValue());
+        // Fiddle start - client perspective - deep replacements - pass scope - to FriendlyByteBuf#writeUtf - this never contains replaceables
+        this.writeUtf(property.getName(), false, false, DeepReplacementScope.NOTHING);
+        this.writeUtf(property.getValue(), false, false, DeepReplacementScope.NOTHING);
+        // Fiddle end - client perspective - deep replacements - pass scope - to FriendlyByteBuf#writeUtf - this never contains replaceables
         if (property.hasSignature()) {
             this.writeBoolean(true);
-            this.writeUtf(property.getSignature());
+            this.writeUtf(property.getSignature(), false, false, DeepReplacementScope.NOTHING); // Fiddle - client perspective - deep replacements - pass scope - to FriendlyByteBuf#writeUtf - this never contains replaceables
         } else {
             this.writeBoolean(false);
         }
@@ -1756,4 +1846,15 @@ public class FriendlyByteBuf extends ByteBuf {
     }
     // Fiddle end - client perspective - deep replacements - perspective and settings supplier - cache in FriendlyByteBuf
 
+    // Fiddle start - client perspective - deep replacements - pass scope - to FriendlyByteBuf
+    /**
+     * The result of {@link #getClientPerspectiveAndSettingsSupplier()},
+     * unless the given {@code replacementScope} is {@link DeepReplacementScope#NOTHING}, in which case
+     * {@link ClientPerspectiveAndSettingsSupplier#ALWAYS_THROWS_EXCEPTION} is returned.
+     */
+    public @NotNull ClientPerspectiveAndSettingsSupplier getClientPerspectiveAndSettingsSupplierUnlessScopeIsNothing(@NotNull DeepReplacementScope replacementScope) {
+        return replacementScope == DeepReplacementScope.NOTHING ? ClientPerspectiveAndSettingsSupplier.ALWAYS_THROWS_EXCEPTION : this.getClientPerspectiveAndSettingsSupplier();
+    }
+    // Fiddle end - client perspective - deep replacements - pass scope - to FriendlyByteBuf
+
 }
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundCommandSuggestionsPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundCommandSuggestionsPacket.java
index b8c008a311edebe90256bd8482a2402d12ffd0db..682b7697522b0632f9ecce1697ec6ee286036aee 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundCommandSuggestionsPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundCommandSuggestionsPacket.java
@@ -8,6 +8,7 @@ import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.ComponentUtils;
 import net.minecraft.network.protocol.Packet;
+import org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacementScope;
 
 public class ClientboundCommandSuggestionsPacket implements Packet<ClientGamePacketListener> {
     private final int id;
@@ -37,7 +38,7 @@ public class ClientboundCommandSuggestionsPacket implements Packet<ClientGamePac
         buf.writeVarInt(this.suggestions.getRange().getStart());
         buf.writeVarInt(this.suggestions.getRange().getLength());
         buf.writeCollection(this.suggestions.getList(), (buf2, suggestion) -> {
-            buf2.writeUtf(suggestion.getText());
+            buf2.writeUtf(suggestion.getText(), false, false, DeepReplacementScope.NOTHING); // Fiddle - client perspective - deep replacements - pass scope - to FriendlyByteBuf#writeUtf - this never contains replaceables
             buf2.writeNullable(suggestion.getTooltip(), (buf3, tooltip) -> {
                 buf3.writeComponent(ComponentUtils.fromMessage(tooltip));
             });
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelChunkPacketData.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelChunkPacketData.java
index 39b879f21f958dbd91ab0f74e5d4f3c74928fc33..06b862eeeaf105ea9d844d8b21246ae1eaaaa15e 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelChunkPacketData.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelChunkPacketData.java
@@ -18,6 +18,7 @@ import net.minecraft.world.level.block.entity.BlockEntityType;
 import net.minecraft.world.level.chunk.LevelChunk;
 import net.minecraft.world.level.chunk.LevelChunkSection;
 import net.minecraft.world.level.levelgen.Heightmap;
+import org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacementScope;
 
 public class ClientboundLevelChunkPacketData {
     private static final int TWO_MEGABYTES = 2097152;
@@ -89,7 +90,7 @@ public class ClientboundLevelChunkPacketData {
     }
 
     public void write(FriendlyByteBuf buf) {
-        buf.writeNbt(this.heightmaps);
+        buf.writeNbt(this.heightmaps, DeepReplacementScope.NOTHING); // Fiddle - client perspective - deep replacements - pass scope - to FriendlyByteBuf#writeNbt - this never contains replaceables
         buf.writeVarInt(this.buffer.length);
         buf.writeBytes(this.buffer);
         buf.writeCollection(this.blockEntitiesData, (buf2, entry) -> {
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetPlayerTeamPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetPlayerTeamPacket.java
index 4ebe22ac20f1a98694cc3bec570ef5bbf06f00aa..63ae308e169f71520e33d21908599d91b201f7b2 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetPlayerTeamPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetPlayerTeamPacket.java
@@ -9,6 +9,7 @@ import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.world.scores.PlayerTeam;
+import org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacementScope;
 
 public class ClientboundSetPlayerTeamPacket implements Packet<ClientGamePacketListener> {
     private static final int METHOD_ADD = 0;
@@ -76,7 +77,7 @@ public class ClientboundSetPlayerTeamPacket implements Packet<ClientGamePacketLi
         }
 
         if (shouldHavePlayerList(this.method)) {
-            buf.writeCollection(this.players, FriendlyByteBuf::writeUtf);
+            buf.writeCollection(this.players, (sameBuf, player) -> sameBuf.writeUtf(player, false, false, DeepReplacementScope.NOTHING)); // Fiddle - client perspective - deep replacements - pass scope - to FriendlyByteBuf#writeUtf - this never contains replaceables
         }
 
     }
@@ -198,8 +199,10 @@ public class ClientboundSetPlayerTeamPacket implements Packet<ClientGamePacketLi
         public void write(FriendlyByteBuf buf) {
             buf.writeComponent(this.displayName);
             buf.writeByte(this.options);
-            buf.writeUtf(this.nametagVisibility);
-            buf.writeUtf(!io.papermc.paper.configuration.GlobalConfiguration.get().collisions.enablePlayerCollisions ? "never" : this.collisionRule); // Paper
+            // Fiddle start - client perspective - deep replacements - pass scope - to FriendlyByteBuf#writeUtf - this never contains replaceables
+            buf.writeUtf(this.nametagVisibility, false, false, DeepReplacementScope.NOTHING);
+            buf.writeUtf(!io.papermc.paper.configuration.GlobalConfiguration.get().collisions.enablePlayerCollisions ? "never" : this.collisionRule, false, false, DeepReplacementScope.NOTHING); // Paper
+            // Fiddle end - client perspective - deep replacements - pass scope - to FriendlyByteBuf#writeUtf - this never contains replaceables
             buf.writeEnum(this.color);
             buf.writeComponent(this.playerPrefix);
             buf.writeComponent(this.playerSuffix);
diff --git a/src/main/java/net/minecraft/world/item/crafting/ShapedRecipe.java b/src/main/java/net/minecraft/world/item/crafting/ShapedRecipe.java
index 9c1285e31d947f92e0b00149e342e793898e0d7c..4be24324947d570cbb9d14f57b63420a2132a705 100644
--- a/src/main/java/net/minecraft/world/item/crafting/ShapedRecipe.java
+++ b/src/main/java/net/minecraft/world/item/crafting/ShapedRecipe.java
@@ -28,6 +28,7 @@ import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.craftbukkit.inventory.CraftRecipe;
 import org.bukkit.craftbukkit.inventory.CraftShapedRecipe;
 import org.bukkit.inventory.RecipeChoice;
+import org.fiddlemc.fiddle.packet.deepreplacement.DeepReplacementScope;
 // CraftBukkit end
 
 public class ShapedRecipe implements CraftingRecipe {
@@ -422,7 +423,7 @@ public class ShapedRecipe implements CraftingRecipe {
         public void toNetwork(FriendlyByteBuf buf, ShapedRecipe recipe) {
             buf.writeVarInt(recipe.width);
             buf.writeVarInt(recipe.height);
-            buf.writeUtf(recipe.group);
+            buf.writeUtf(recipe.group, false, false, DeepReplacementScope.NOTHING); // Fiddle - client perspective - deep replacements - pass scope - to FriendlyByteBuf#writeUtf - this never contains replaceables
             buf.writeEnum(recipe.category);
             Iterator iterator = recipe.recipeItems.iterator();
 
