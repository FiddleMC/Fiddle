From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Sat, 22 Jul 2023 16:12:39 +0200
Subject: [PATCH] Client perspective - Expose packet target client properties -
 Can be used by FriendlyByteBuf

License: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)
Fiddle - https://fiddlemc.org

diff --git a/src/main/java/net/minecraft/network/FriendlyByteBuf.java b/src/main/java/net/minecraft/network/FriendlyByteBuf.java
index 2e395962b555bef0ce1a98e1d768e7738f011535..bd30382b103e7c2dc407b53cea5d49286e7c45f9 100644
--- a/src/main/java/net/minecraft/network/FriendlyByteBuf.java
+++ b/src/main/java/net/minecraft/network/FriendlyByteBuf.java
@@ -77,6 +77,7 @@ import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.phys.BlockHitResult;
 import net.minecraft.world.phys.Vec3;
+import org.jetbrains.annotations.NotNull;
 import org.joml.Quaternionf;
 import org.joml.Vector3f;
 
@@ -94,6 +95,13 @@ public class FriendlyByteBuf extends ByteBuf {
     private static final int MAX_PUBLIC_KEY_LENGTH = 512;
     private static final Gson GSON = new Gson();
 
+    // Fiddle start - client perspective - packets are modifiable - store explicit perspective and locale - FriendlyByteBuf
+    /**
+     * The packet that is writing its contents to this {@link FriendlyByteBuf}.
+     */
+    public @Nullable java.lang.ref.WeakReference<net.minecraft.network.protocol.@NotNull Packet<?>> writingPacket;
+    // Fiddle end - client perspective - packets are modifiable - store explicit perspective and locale - FriendlyByteBuf
+
     public FriendlyByteBuf(ByteBuf parent) {
         this.source = parent;
     }
@@ -1667,4 +1675,58 @@ public class FriendlyByteBuf extends ByteBuf {
             };
         }
     }
+
+    // Fiddle start - client perspective - packets are modifiable - expose target client properties - can be used by FriendlyByteBuf
+    /**
+     * @return The explicit {@link org.fiddlemc.fiddle.packet.ClientPerspective} of the target client of a packet that is writing its contents
+     * to this {@link FriendlyByteBuf}.
+     * This method always return a non-null value or throws an exception, and it must never actually throw
+     * such an exception (if there is a possibility of an exception being thrown,
+     * the method should not be called at all), similarly to
+     * {@link net.minecraft.network.protocol.Packet#getExplicitTargetClientPerspective()}.
+     */
+    public @NotNull org.fiddlemc.fiddle.packet.ClientPerspective getExplicitTargetClientPerspective() throws NullPointerException {
+        return this.writingPacket.get().getExplicitTargetClientPerspective();
+    }
+
+    /**
+     * @return The same value as {@link #getExplicitTargetClientPerspective()}, except that it returns null
+     * where {@link #getExplicitTargetClientPerspective()} would otherwise throw an exception.
+     */
+    public @Nullable org.fiddlemc.fiddle.packet.ClientPerspective getExplicitTargetClientPerspectiveOrNull() throws NullPointerException {
+        if (this.writingPacket == null) {
+            return null;
+        }
+        var actualWritingPacket = this.writingPacket.get();
+        if (actualWritingPacket == null) {
+            return null;
+        }
+        return actualWritingPacket.getExplicitTargetClientPerspectiveOrNull();
+    }
+
+    /**
+     * @return The explicit {@link net.minecraft.server.level.ServerPlayer#locale}
+     * of the target client of a packet that is writing its contents to this {@link FriendlyByteBuf}.
+     * This method always return a nullable value or throws an exception, and it must never actually throw
+     * such an exception (if there is a possibility of an exception being thrown,
+     * the method should not be called at all), similarly to
+     * {@link net.minecraft.network.protocol.Packet#getExplicitTargetLocale()}.
+     */
+    public @Nullable String getExplicitTargetLocale() throws NullPointerException {
+        return this.writingPacket.get().getExplicitTargetLocale();
+    }
+
+    /**
+     * @return The explicit {@linkplain net.minecraft.server.level.ServerPlayerGameMode#getGameModeForPlayer() game mode}
+     * of the target player of a packet that is writing its contents to this {@link FriendlyByteBuf}.
+     * This method always return a non-null value or throws an exception, and it must never actually throw
+     * such an exception (if there is a possibility of an exception being thrown,
+     * the method should not be called at all), similarly to
+     * {@link net.minecraft.network.protocol.Packet#getExplicitTargetClientPerspective()}.
+     */
+    public @NotNull net.minecraft.world.level.GameType getExplicitTargetGameMode() throws NullPointerException {
+        return this.writingPacket.get().getExplicitTargetGameMode();
+    }
+    // Fiddle end - client perspective - packets are modifiable - expose target client properties - can be used by FriendlyByteBuf
+
 }
diff --git a/src/main/java/net/minecraft/network/PacketEncoder.java b/src/main/java/net/minecraft/network/PacketEncoder.java
index 45b4f1c295eda2fcc5067a4b21de247218ef117f..7b76867249ae44af76e7d0c71d27be876fb4048b 100644
--- a/src/main/java/net/minecraft/network/PacketEncoder.java
+++ b/src/main/java/net/minecraft/network/PacketEncoder.java
@@ -34,6 +34,7 @@ public class PacketEncoder extends MessageToByteEncoder<Packet<?>> {
                 throw new IOException("Can't serialize unregistered packet");
             } else {
                 FriendlyByteBuf friendlyByteBuf = new FriendlyByteBuf(byteBuf);
+                friendlyByteBuf.writingPacket = new java.lang.ref.WeakReference<>(packet); // Fiddle - client perspective - packets are modifiable - expose target client properties - can be used by FriendlyByteBuf
                 friendlyByteBuf.writeVarInt(i);
                 friendlyByteBuf.adventure$locale = channelHandlerContext.channel().attr(io.papermc.paper.adventure.PaperAdventure.LOCALE_ATTRIBUTE).get(); // Paper
 
