From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Sat, 15 Jul 2023 13:23:05 +0200
Subject: [PATCH] Cache block and item registry keys as fields

License: Fiddle Public License Agreement 1.0 (included in license/FPL-1.0.txt)
Fiddle - https://fiddlemc.org

diff --git a/src/main/java/net/minecraft/world/item/Item.java b/src/main/java/net/minecraft/world/item/Item.java
index dd2f6c67533cc3344a171fe3ae9b3704796d8c50..eeb4df51d12cf4c3471c83481f44f3738ac8c7f3 100644
--- a/src/main/java/net/minecraft/world/item/Item.java
+++ b/src/main/java/net/minecraft/world/item/Item.java
@@ -16,6 +16,7 @@ import net.minecraft.core.Holder;
 import net.minecraft.core.registries.BuiltInRegistries;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.network.chat.Component;
+import net.minecraft.resources.ResourceLocation;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.tags.DamageTypeTags;
@@ -48,6 +49,7 @@ import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.phys.BlockHitResult;
 import net.minecraft.world.phys.Vec3;
+import org.jetbrains.annotations.NotNull;
 import org.slf4j.Logger;
 
 public class Item implements FeatureElement, ItemLike {
@@ -71,6 +73,21 @@ public class Item implements FeatureElement, ItemLike {
     private final FoodProperties foodProperties;
     private final FeatureFlagSet requiredFeatures;
 
+    // Fiddle start - cache registry keys as fields - item
+    /**
+     * The {@link ResourceLocation} with which this item is registered in the
+     * {@link BuiltInRegistries#ITEM item registry}.
+     * This will be null until initialized in {@link #getKeyInItemRegistry}.
+     */
+    private @Nullable ResourceLocation keyInItemRegistry = null;
+
+    /**
+     * {@link ResourceLocation#toString()} of {@link #keyInItemRegistry}.
+     * This will be null until initialized in {@link #getKeyInItemRegistryString}.
+     */
+    private @Nullable String keyInItemRegistryString = null;
+    // Fiddle end - cache registry keys as fields - item
+
     public static int getId(Item item) {
         return item == null ? 0 : BuiltInRegistries.ITEM.getId(item);
     }
@@ -369,6 +386,22 @@ public class Item implements FeatureElement, ItemLike {
         return this.requiredFeatures;
     }
 
+    // Fiddle start - cache registry keys as fields - item
+    public @NotNull ResourceLocation getKeyInItemRegistry() {
+        if (this.keyInItemRegistry == null) {
+            this.keyInItemRegistry = BuiltInRegistries.ITEM.getKey(this);
+        }
+        return this.keyInItemRegistry;
+    }
+
+    public @NotNull String getKeyInItemRegistryString() {
+        if (this.keyInItemRegistryString == null) {
+            this.keyInItemRegistryString = this.getKeyInItemRegistry().toString();
+        }
+        return this.keyInItemRegistryString;
+    }
+    // Fiddle end - cache registry keys as fields - item
+
     public static class Properties {
         int maxStackSize = 64;
         int maxDamage;
diff --git a/src/main/java/net/minecraft/world/level/block/Block.java b/src/main/java/net/minecraft/world/level/block/Block.java
index 9522e646529f3d849471931b4b3c0d133e7fcfc5..5dd932c458298fa5f2160eac00d76302bb18bc01 100644
--- a/src/main/java/net/minecraft/world/level/block/Block.java
+++ b/src/main/java/net/minecraft/world/level/block/Block.java
@@ -20,6 +20,7 @@ import net.minecraft.core.IdMapper;
 import net.minecraft.core.registries.BuiltInRegistries;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.MutableComponent;
+import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.stats.Stats;
 import net.minecraft.tags.BlockTags;
@@ -60,6 +61,7 @@ import net.minecraft.world.phys.Vec3;
 import net.minecraft.world.phys.shapes.BooleanOp;
 import net.minecraft.world.phys.shapes.Shapes;
 import net.minecraft.world.phys.shapes.VoxelShape;
+import org.jetbrains.annotations.NotNull;
 import org.slf4j.Logger;
 
 public class Block extends BlockBehaviour implements ItemLike {
@@ -113,6 +115,22 @@ public class Block extends BlockBehaviour implements ItemLike {
     private String descriptionId;
     @Nullable
     private Item item;
+
+    // Fiddle start - cache registry keys as fields - block
+    /**
+     * The {@link ResourceLocation} with which this block is registered in the
+     * {@link BuiltInRegistries#BLOCK block registry}.
+     * This will be null until initialized in {@link #getKeyInBlockRegistry}.
+     */
+    private @Nullable ResourceLocation keyInBlockRegistry = null;
+
+    /**
+     * {@link ResourceLocation#toString()} of {@link #keyInBlockRegistry}.
+     * This will be null until initialized in {@link #getKeyInBlockRegistryString}.
+     */
+    private @Nullable String keyInBlockRegistryString = null;
+    // Fiddle end - cache registry keys as fields - block
+
     private static final int CACHE_SIZE = 2048;
     private static final ThreadLocal<Object2ByteLinkedOpenHashMap<Block.BlockStatePairKey>> OCCLUSION_CACHE = ThreadLocal.withInitial(() -> {
         Object2ByteLinkedOpenHashMap<Block.BlockStatePairKey> object2bytelinkedopenhashmap = new Object2ByteLinkedOpenHashMap<Block.BlockStatePairKey>(2048, 0.25F) {
@@ -573,6 +591,22 @@ public class Block extends BlockBehaviour implements ItemLike {
     }
     // CraftBukkit end
 
+    // Fiddle start - cache registry keys as fields - block
+    public @NotNull ResourceLocation getKeyInBlockRegistry() {
+        if (this.keyInBlockRegistry == null) {
+            this.keyInBlockRegistry = BuiltInRegistries.BLOCK.getKey(this);
+        }
+        return this.keyInBlockRegistry;
+    }
+
+    public @NotNull String getKeyInBlockRegistryString() {
+        if (this.keyInBlockRegistryString == null) {
+            this.keyInBlockRegistryString = this.getKeyInBlockRegistry().toString();
+        }
+        return this.keyInBlockRegistryString;
+    }
+    // Fiddle end - cache registry keys as fields - block
+
     // Spigot start
     public static float range(float min, float value, float max) {
         if (value < min) {
