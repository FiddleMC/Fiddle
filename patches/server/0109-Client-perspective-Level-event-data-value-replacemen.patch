From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Sat, 10 Feb 2024 13:47:32 +0100
Subject: [PATCH] Client perspective - Level event data value replacements -
 Data can be generic

Allows the `data` field in `ClientboundLevelEventPacket` to have any type.

Currently, `getData()` (and thereby also `write(FriendlyByteBuf)`) will fail if it is anything other than an `Integer`.
Later patches can add cases where it is something else, and add support for it in the `getData()` method.

License: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)
Fiddle - https://fiddlemc.org

diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelEventPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelEventPacket.java
index 2c31c8d55d716b1660412218d5287da672ab45f6..11de2041b07914b2868a818acb756dc729eaf59c 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelEventPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelEventPacket.java
@@ -7,10 +7,10 @@ import net.minecraft.network.protocol.Packet;
 public class ClientboundLevelEventPacket extends org.fiddlemc.fiddle.packet.CloningPacketWithExplicitTargetClientConnection<ClientGamePacketListener> { // Fiddle - client perspective - level event data value replacements - store connection explicitly
     private final int type;
     private final BlockPos pos;
-    private final int data;
+    private final Object data; // Fiddle - client perspective - level event data value replacements - data can be generic
     private final boolean globalEvent;
 
-    public ClientboundLevelEventPacket(int eventId, BlockPos pos, int data, boolean global) {
+    public ClientboundLevelEventPacket(int eventId, BlockPos pos, Object data, boolean global) { // Fiddle - client perspective - level event data value replacements - data can be generic
         super(); // Fiddle - client perspective - level event data value replacements - store connection explicitly
         this.type = eventId;
         this.pos = pos.immutable();
@@ -34,6 +34,12 @@ public class ClientboundLevelEventPacket extends org.fiddlemc.fiddle.packet.Clon
 
     @Override
     protected boolean canSkipCloning() {
+        // Fiddle start - client perspective - level event data value replacements - data can be generic
+        if (!(this.data instanceof Integer)) {
+            // Whether cloning can be skipped must already have been determined
+            throw new IllegalStateException("Could not determine canSkipCloning() for non-integer data of type " + this.data.getClass().getName() + ": " + this.data);
+        }
+        // Fiddle end - client perspective - level event data value replacements - data can be generic
         // The same data (an integer that doesn't represent anything replaceable) will be sent to everyone, so we can skip cloning
         return true;
     }
@@ -61,7 +67,12 @@ public class ClientboundLevelEventPacket extends org.fiddlemc.fiddle.packet.Clon
     }
 
     public int getData() {
-        return this.data;
+        // Fiddle start - client perspective - level event data value replacements - data can be generic
+        if (!(this.data instanceof Integer)) {
+            throw new IllegalStateException("Could not determine getData() for non-integer data of type " + this.data.getClass().getName() + ": " + this.data);
+        }
+        // Fiddle end - client perspective - level event data value replacements - data can be generic
+        return (int) this.data;
     }
 
     public BlockPos getPos() {
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index f60ad1b920ac4a3a8ca4fedac778bb84e0cf8c35..24fe39a7c55aa7506c15d41ea2f69c21f5ac2fb9 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -1806,7 +1806,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
     }
 
     @Override
-    public void levelEvent(@Nullable Player player, int eventId, BlockPos pos, int data) {
+    public void levelEvent(@Nullable Player player, int eventId, BlockPos pos, Object data) { // Fiddle - client perspective - level event data value replacements - data can be generic
         this.server.getPlayerList().broadcast(player, (double) pos.getX(), (double) pos.getY(), (double) pos.getZ(), 64.0D, this.dimension(), new ClientboundLevelEventPacket(eventId, pos, data, false));
     }
 
diff --git a/src/main/java/net/minecraft/server/level/WorldGenRegion.java b/src/main/java/net/minecraft/server/level/WorldGenRegion.java
index 50ed7cfe1ecef6d075ba484804827cec83ba2bf2..82ed30072fd2321d328238e7ca2160879e10719d 100644
--- a/src/main/java/net/minecraft/server/level/WorldGenRegion.java
+++ b/src/main/java/net/minecraft/server/level/WorldGenRegion.java
@@ -486,7 +486,7 @@ public class WorldGenRegion implements WorldGenLevel {
     public void addParticle(ParticleOptions parameters, double x, double y, double z, double velocityX, double velocityY, double velocityZ) {}
 
     @Override
-    public void levelEvent(@Nullable Player player, int eventId, BlockPos pos, int data) {}
+    public void levelEvent(@Nullable Player player, int eventId, BlockPos pos, Object data) {} // Fiddle - client perspective - level event data value replacements - data can be generic
 
     @Override
     public void gameEvent(GameEvent event, Vec3 emitterPos, GameEvent.Context emitter) {}
diff --git a/src/main/java/net/minecraft/world/level/LevelAccessor.java b/src/main/java/net/minecraft/world/level/LevelAccessor.java
index 73d1adc5ddf0363966eac0c77c8dfbbb20a2b6a3..0819a15da53044f79a99e1a8c58c67dd42273be0 100644
--- a/src/main/java/net/minecraft/world/level/LevelAccessor.java
+++ b/src/main/java/net/minecraft/world/level/LevelAccessor.java
@@ -95,12 +95,24 @@ public interface LevelAccessor extends CommonLevelAccessor, LevelTimeAccess {
 
     void addParticle(ParticleOptions parameters, double x, double y, double z, double velocityX, double velocityY, double velocityZ);
 
-    void levelEvent(@Nullable Player player, int eventId, BlockPos pos, int data);
+    // Fiddle start - client perspective - level event data value replacements - data can be generic
+    void levelEvent(@Nullable Player player, int eventId, BlockPos pos, Object data);
 
-    default void levelEvent(int eventId, BlockPos pos, int data) {
+    default void levelEvent(@Nullable Player player, int eventId, BlockPos pos, int data) {
+        this.levelEvent(player, eventId, pos, Integer.valueOf(data));
+    }
+
+    default void levelEvent(int eventId, BlockPos pos, Object data) {
+        // Fiddle end - client perspective - level event data value replacements - data can be generic
         this.levelEvent((Player) null, eventId, pos, data);
     }
 
+    // Fiddle start - client perspective - level event data value replacements - data can be generic
+    default void levelEvent(int eventId, BlockPos pos, int data) {
+        this.levelEvent(eventId, pos, Integer.valueOf(data));
+    }
+    // Fiddle end - client perspective - level event data value replacements - data can be generic
+
     void gameEvent(GameEvent event, Vec3 emitterPos, GameEvent.Context emitter);
 
     default void gameEvent(@Nullable Entity entity, GameEvent event, Vec3 pos) {
diff --git a/src/main/java/org/bukkit/craftbukkit/util/DelegatedGeneratorAccess.java b/src/main/java/org/bukkit/craftbukkit/util/DelegatedGeneratorAccess.java
index cbedb6f002bc01daa16d349421c4ef04d4bcbcb2..c400213270d81b96467a53dbaa3ba412020169e7 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/DelegatedGeneratorAccess.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/DelegatedGeneratorAccess.java
@@ -214,12 +214,12 @@ public abstract class DelegatedGeneratorAccess implements WorldGenLevel {
     }
 
     @Override
-    public void levelEvent(int eventId, BlockPos pos, int data) {
+    public void levelEvent(int eventId, BlockPos pos, Object data) { // Fiddle - client perspective - level event data value replacements - data can be generic
         this.handle.levelEvent(eventId, pos, data);
     }
 
     @Override
-    public void levelEvent(Player player, int eventId, BlockPos pos, int data) {
+    public void levelEvent(Player player, int eventId, BlockPos pos, Object data) { // Fiddle - client perspective - level event data value replacements - data can be generic
         this.handle.levelEvent(player, eventId, pos, data);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/util/DummyGeneratorAccess.java b/src/main/java/org/bukkit/craftbukkit/util/DummyGeneratorAccess.java
index 23ee60e8843a6a05e7ae6512248a57ec2a08321b..e619474819151945918e69a64ed06088082fcf7e 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/DummyGeneratorAccess.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/DummyGeneratorAccess.java
@@ -114,7 +114,7 @@ public class DummyGeneratorAccess implements WorldGenLevel {
     }
 
     @Override
-    public void levelEvent(Player player, int eventId, BlockPos pos, int data) {
+    public void levelEvent(Player player, int eventId, BlockPos pos, Object data) { // Fiddle - client perspective - level event data value replacements - data can be generic
         // Used by PowderSnowBlock.removeFluid
     }
 
