From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Thu, 25 Jan 2024 18:21:24 +0100
Subject: [PATCH] Cache Block, Item and BlockState registry index

Adds fields `Block.keyInBlockRegistry`, `Item.keyInItemRegistry` and `BlockState.keyInBlockStateRegistry` that cache the keys in their respective registries.
Also adds analgous fields for the vanilla-only registries.

Also includes corresponding unit tests.

License: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)
Fiddle - https://fiddlemc.org

diff --git a/src/main/java/net/minecraft/world/item/Item.java b/src/main/java/net/minecraft/world/item/Item.java
index 7c7201393c49d2abc4ef7089f0caf1e19ce42894..f2cdd4c79bf8a415bfdb0e3533c7912cc9782585 100644
--- a/src/main/java/net/minecraft/world/item/Item.java
+++ b/src/main/java/net/minecraft/world/item/Item.java
@@ -104,6 +104,22 @@ public class Item implements FeatureElement, ItemLike {
     public @Nullable net.minecraft.resources.ResourceLocation keyInItemRegistry = null;
     // Fiddle end - cache registry keys as fields - item
 
+    // Fiddle start - cache registry indices as fields - item
+    /**
+     * The {@linkplain net.minecraft.core.Registry#getId index} at which this item is registered in the
+     * {@link BuiltInRegistries#ITEM item registry}.
+     * This will be -1 until initialized in {@link org.fiddlemc.fiddle.registry.ItemRegistry#register}.
+     */
+    public int indexInItemRegistry = -1;
+
+    /**
+     * The {@linkplain net.minecraft.core.Registry#getId index} at which this item is registered in the
+     * {@link #VANILLA_ONLY_ITEM_REGISTRY vanilla-only item registry}.
+     * This will be -1 until initialized in {@link org.fiddlemc.fiddle.registry.VanillaOnlyItemRegistry#add}.
+     */
+    public int indexInVanillaOnlyItemRegistry = -1;
+    // Fiddle end - cache registry indices as fields - item
+
     public static int getId(Item item) {
         return item == null ? 0 : BuiltInRegistries.ITEM.getId(item);
     }
diff --git a/src/main/java/net/minecraft/world/level/block/Block.java b/src/main/java/net/minecraft/world/level/block/Block.java
index a608ec6ac4eb34c0894095516aa63a1c44900121..2c8e0d2ad0d3f46456d9a9be844908cffc0e1ab2 100644
--- a/src/main/java/net/minecraft/world/level/block/Block.java
+++ b/src/main/java/net/minecraft/world/level/block/Block.java
@@ -127,6 +127,22 @@ public class Block extends BlockBehaviour implements ItemLike {
     public @Nullable net.minecraft.resources.ResourceLocation keyInBlockRegistry = null;
     // Fiddle end - cache registry keys as fields - block
 
+    // Fiddle start - cache registry indices as fields - block
+    /**
+     * The {@linkplain net.minecraft.core.Registry#getId index} at which this block is registered in the
+     * {@link BuiltInRegistries#BLOCK block registry}.
+     * This will be -1 until initialized in {@link org.fiddlemc.fiddle.registry.BlockRegistry#register}.
+     */
+    public int indexInBlockRegistry = -1;
+
+    /**
+     * The {@linkplain net.minecraft.core.Registry#getId index} at which this block is registered in the
+     * {@link #VANILLA_ONLY_BLOCK_REGISTRY vanilla-only block registry}.
+     * This will be -1 until initialized in {@link org.fiddlemc.fiddle.registry.VanillaOnlyBlockRegistry#add}..
+     */
+    public int indexInVanillaOnlyBlockRegistry = -1;
+    // Fiddle end - cache registry indices as fields - block
+
     private static final int CACHE_SIZE = 2048;
     private static final ThreadLocal<Object2ByteLinkedOpenHashMap<Block.BlockStatePairKey>> OCCLUSION_CACHE = ThreadLocal.withInitial(() -> {
         Object2ByteLinkedOpenHashMap<Block.BlockStatePairKey> object2bytelinkedopenhashmap = new Object2ByteLinkedOpenHashMap<Block.BlockStatePairKey>(2048, 0.25F) {
diff --git a/src/main/java/net/minecraft/world/level/block/state/BlockState.java b/src/main/java/net/minecraft/world/level/block/state/BlockState.java
index acb458e03bfffdae406eae99eb81ce0c3078c9ea..786a4d38be67d28edf5fe446aec296631999e708 100644
--- a/src/main/java/net/minecraft/world/level/block/state/BlockState.java
+++ b/src/main/java/net/minecraft/world/level/block/state/BlockState.java
@@ -21,6 +21,23 @@ public class BlockState extends BlockBehaviour.BlockStateBase {
         return this.cachedMaterial;
     }
     // Paper end - optimise getType calls
+
+    // Fiddle start - cache registry indices as fields - block state
+    /**
+     * The {@linkplain net.minecraft.core.Registry#getId index} at which this block state is registered in the
+     * {@link Block#BLOCK_STATE_REGISTRY block state registry}.
+     * This will be -1 until initialized in {@link org.fiddlemc.fiddle.registry.BlockStateRegistry#add}.
+     */
+    public int indexInBlockStateRegistry = -1;
+
+    /**
+     * The {@linkplain net.minecraft.core.Registry#getId index} at which this block state is registered in the
+     * {@link Block#VANILLA_ONLY_BLOCK_STATE_REGISTRY vanilla-only block state registry}.
+     * This will be -1 until initialized in {@link org.fiddlemc.fiddle.registry.VanillaOnlyBlockStateRegistry#add}.
+     */
+    public int indexInVanillaOnlyBlockStateRegistry = -1;
+    // Fiddle end - cache registry indices as fields - block state
+
     public BlockState(Block block, ImmutableMap<Property<?>, Comparable<?>> propertyMap, MapCodec<BlockState> codec) {
         super(block, propertyMap, codec);
     }
diff --git a/src/main/java/org/fiddlemc/fiddle/registry/BlockRegistry.java b/src/main/java/org/fiddlemc/fiddle/registry/BlockRegistry.java
index b5fd2a1094f6ea8278f3d76228b9919d51e3b849..9de1599bd929ed93531d1c4924b507b7d2432ed8 100644
--- a/src/main/java/org/fiddlemc/fiddle/registry/BlockRegistry.java
+++ b/src/main/java/org/fiddlemc/fiddle/registry/BlockRegistry.java
@@ -46,6 +46,11 @@ public final class BlockRegistry extends DefaultedMappedRegistry<Block> {
         entry.keyInBlockRegistry = super.getKey(entry);
         // Fiddle end - cache registry keys as fields - block
 
+        // Fiddle start - cache registry indices as fields - block
+        // Initialize the cached registry index field
+        entry.indexInBlockRegistry = super.getId(entry);
+        // Fiddle end - cache registry indices as fields - block
+
         // Fiddle start - modded registries - apply block post-register operations instantly
         // Perform the post-register operations
         for (net.minecraft.world.level.block.state.BlockState blockState : entry.getStateDefinition().getPossibleStates()) {
@@ -82,4 +87,12 @@ public final class BlockRegistry extends DefaultedMappedRegistry<Block> {
     }
     // Fiddle end - cache registry keys as fields - block
 
+    // Fiddle start - cache registry indices as fields - block
+    @Override
+    public int getId(@org.jetbrains.annotations.Nullable Block value) {
+        // Use the cached value
+        return value == null ? -1 : value.indexInBlockRegistry;
+    }
+    // Fiddle end - cache registry indices as fields - block
+
 }
diff --git a/src/main/java/org/fiddlemc/fiddle/registry/BlockStateRegistry.java b/src/main/java/org/fiddlemc/fiddle/registry/BlockStateRegistry.java
index d1f2e7f8c60e4762a3e72b00ad30e04682914a15..ed2ed67a71e0bc71ccb0eecd4e4f109fb5442793 100644
--- a/src/main/java/org/fiddlemc/fiddle/registry/BlockStateRegistry.java
+++ b/src/main/java/org/fiddlemc/fiddle/registry/BlockStateRegistry.java
@@ -21,6 +21,11 @@ public final class BlockStateRegistry extends IdMapper<BlockState> {
         // Add the value
         super.add(value);
 
+        // Fiddle start - cache registry indices as fields - block state
+        // Initialize the cached registry index field
+        value.indexInBlockStateRegistry = super.getId(value);
+        // Fiddle end - cache registry indices as fields - block state
+
         // Fiddle start - modded registries - vanilla-only registries - create - block state
         // Also add the block state to the vanilla-only registry if applicable
         if (value.isVanilla()) {
@@ -30,4 +35,12 @@ public final class BlockStateRegistry extends IdMapper<BlockState> {
 
     }
 
+    // Fiddle start - cache registry indices as fields - block state
+    @Override
+    public int getId(BlockState value) {
+        // Use the cached value
+        return value.indexInBlockStateRegistry;
+    }
+    // Fiddle end - cache registry indices as fields - block state
+
 }
diff --git a/src/main/java/org/fiddlemc/fiddle/registry/ItemRegistry.java b/src/main/java/org/fiddlemc/fiddle/registry/ItemRegistry.java
index 2e867d0ce7d6521daabae3fde1f9d0909547b963..0a448e99216adcbf82501bc3486ccf851956993b 100644
--- a/src/main/java/org/fiddlemc/fiddle/registry/ItemRegistry.java
+++ b/src/main/java/org/fiddlemc/fiddle/registry/ItemRegistry.java
@@ -30,6 +30,11 @@ public final class ItemRegistry extends DefaultedMappedRegistry<Item> {
         entry.keyInItemRegistry = super.getKey(entry);
         // Fiddle end - cache registry keys as fields - item
 
+        // Fiddle start - cache registry indices as fields - item
+        // Initialize the cached registry index field
+        entry.indexInItemRegistry = super.getId(entry);
+        // Fiddle end - cache registry indices as fields - item
+
         // Fiddle start - modded registries - register item blocks from item registry
         // Register the item by its blocks if applicable
         if (entry instanceof net.minecraft.world.item.BlockItem blockItem) {
@@ -57,4 +62,12 @@ public final class ItemRegistry extends DefaultedMappedRegistry<Item> {
     }
     // Fiddle end - cache registry keys as fields - item
 
+    // Fiddle start - cache registry indices as fields - item
+    @Override
+    public int getId(@org.jetbrains.annotations.Nullable Item value) {
+        // Use the cached value
+        return value == null ? -1 : value.indexInItemRegistry;
+    }
+    // Fiddle end - cache registry indices as fields - item
+
 }
diff --git a/src/main/java/org/fiddlemc/fiddle/registry/VanillaOnlyBlockRegistry.java b/src/main/java/org/fiddlemc/fiddle/registry/VanillaOnlyBlockRegistry.java
index 94ce1ada2c08a1dd8ba9227db6f932139c560808..ad82aacb5250e7aaa71d052c61e2fee01dc0f891 100644
--- a/src/main/java/org/fiddlemc/fiddle/registry/VanillaOnlyBlockRegistry.java
+++ b/src/main/java/org/fiddlemc/fiddle/registry/VanillaOnlyBlockRegistry.java
@@ -20,6 +20,19 @@ public final class VanillaOnlyBlockRegistry extends IdMapper<Block> {
         // Add the value
         super.add(value);
 
+        // Fiddle start - cache registry indices as fields - block
+        // Initialize the cached registry index field
+        value.indexInVanillaOnlyBlockRegistry = super.getId(value);
+        // Fiddle end - cache registry indices as fields - block
+
+    }
+
+    // Fiddle start - cache registry indices as fields - block
+    @Override
+    public int getId(Block value) {
+        // Use the cached value
+        return value.indexInVanillaOnlyBlockRegistry;
     }
+    // Fiddle end - cache registry indices as fields - block
 
 }
diff --git a/src/main/java/org/fiddlemc/fiddle/registry/VanillaOnlyBlockStateRegistry.java b/src/main/java/org/fiddlemc/fiddle/registry/VanillaOnlyBlockStateRegistry.java
index aa0a2fc3261224262ddb5071ad9883c4fe073e50..895bd504788ec81b71fc4ddc6e072a04e76af13b 100644
--- a/src/main/java/org/fiddlemc/fiddle/registry/VanillaOnlyBlockStateRegistry.java
+++ b/src/main/java/org/fiddlemc/fiddle/registry/VanillaOnlyBlockStateRegistry.java
@@ -21,6 +21,19 @@ public final class VanillaOnlyBlockStateRegistry extends IdMapper<BlockState> {
         // Add the value
         super.add(value);
 
+        // Fiddle start - cache registry indices as fields - block state
+        // Initialize the cached registry index field
+        value.indexInVanillaOnlyBlockStateRegistry = super.getId(value);
+        // Fiddle end - cache registry indices as fields - block state
+
+    }
+
+    // Fiddle start - cache registry indices as fields - block state
+    @Override
+    public int getId(BlockState value) {
+        // Use the cached value
+        return value.indexInVanillaOnlyBlockStateRegistry;
     }
+    // Fiddle end - cache registry indices as fields - block state
 
 }
diff --git a/src/main/java/org/fiddlemc/fiddle/registry/VanillaOnlyItemRegistry.java b/src/main/java/org/fiddlemc/fiddle/registry/VanillaOnlyItemRegistry.java
index 94ff1dd6849f1e4f225254ff5c36421c7632b897..c5a0911cd33229c8a952293aacfc30b2e6ac3f2c 100644
--- a/src/main/java/org/fiddlemc/fiddle/registry/VanillaOnlyItemRegistry.java
+++ b/src/main/java/org/fiddlemc/fiddle/registry/VanillaOnlyItemRegistry.java
@@ -20,6 +20,19 @@ public final class VanillaOnlyItemRegistry extends IdMapper<Item> {
         // Add the value
         super.add(value);
 
+        // Fiddle start - cache registry indices as fields - item
+        // Initialize the cached registry index field
+        value.indexInVanillaOnlyItemRegistry = super.getId(value);
+        // Fiddle end - cache registry indices as fields - item
+
+    }
+
+    // Fiddle start - cache registry indices as fields - item
+    @Override
+    public int getId(Item value) {
+        // Use the cached value
+        return value.indexInVanillaOnlyItemRegistry;
     }
+    // Fiddle end - cache registry indices as fields - item
 
 }
diff --git a/src/test/java/org/fiddlemc/fiddle/block/PerBlockTest.java b/src/test/java/org/fiddlemc/fiddle/block/PerBlockTest.java
index f0c325cfc3bdda179482f8b6289e5fde33949e29..2992ecd670453569ab8daf0f5b45a397cd726555 100644
--- a/src/test/java/org/fiddlemc/fiddle/block/PerBlockTest.java
+++ b/src/test/java/org/fiddlemc/fiddle/block/PerBlockTest.java
@@ -24,4 +24,26 @@ public class PerBlockTest extends AbstractTestingBase {
     }
     // Fiddle end - cache registry keys as fields - block
 
+    // Fiddle start - cache registry indices as fields - block
+    @Test
+    public void indexInBlockRegistry() {
+        for (Block block : getBlocks()) {
+            assertEquals(BuiltInRegistries.BLOCK.getId(block), block.indexInBlockRegistry, "Lookup value does not equal indexInBlockRegistry for " + block);
+            assertEquals(Block.VANILLA_ONLY_BLOCK_REGISTRY.getId(block), block.indexInVanillaOnlyBlockRegistry, "Lookup value does not equal indexInVanillaOnlyBlockRegistry for " + block);
+        }
+    }
+    // Fiddle end - cache registry indices as fields - block
+
+    // Fiddle start - cache registry indices as fields - block state
+    @Test
+    public void indexInBlockStateRegistry() {
+        for (Block block : getBlocks()) {
+            for (var state : block.getStateDefinition().getPossibleStates()) {
+                assertEquals(Block.BLOCK_STATE_REGISTRY.getId(state), state.indexInBlockStateRegistry, "Lookup does not equal indexInBlockStateRegistry for " + state);
+                assertEquals(Block.VANILLA_ONLY_BLOCK_STATE_REGISTRY.getId(state), state.indexInVanillaOnlyBlockStateRegistry, "Lookup value does not equal indexInVanillaOnlyBlockStateRegistry for " + state);
+            }
+        }
+    }
+    // Fiddle start - cache registry indices as fields - block state
+
 }
diff --git a/src/test/java/org/fiddlemc/fiddle/item/PerItemTest.java b/src/test/java/org/fiddlemc/fiddle/item/PerItemTest.java
index dbde3a6be3b45aea946eb18d7758a8230791c0e9..43304cc134fc687fd5f4811cd60e1f9b94a85c0f 100644
--- a/src/test/java/org/fiddlemc/fiddle/item/PerItemTest.java
+++ b/src/test/java/org/fiddlemc/fiddle/item/PerItemTest.java
@@ -24,4 +24,14 @@ public class PerItemTest extends AbstractTestingBase {
     }
     // Fiddle end - cache registry keys as fields - item
 
+    // Fiddle start - cache registry indices as fields - item
+    @Test
+    public void indexInItemRegistry() {
+        for (Item item : getItems()) {
+            assertEquals(BuiltInRegistries.ITEM.getId(item), item.indexInItemRegistry, "Lookup value does not equal indexInItemRegistry for " + item);
+            assertEquals(Item.VANILLA_ONLY_ITEM_REGISTRY.getId(item), item.indexInVanillaOnlyItemRegistry, "Lookup value does not equal indexInVanillaOnlyItemRegistry for " + item);
+        }
+    }
+    // Fiddle end - cache registry indices as fields - item
+
 }
