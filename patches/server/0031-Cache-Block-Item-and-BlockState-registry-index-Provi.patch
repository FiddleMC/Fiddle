From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Sun, 16 Jul 2023 13:18:52 +0200
Subject: [PATCH] Cache Block, Item and BlockState registry index - Provide

Adds a lazily computed value to the `Block`, `Item` and `BlockState` classes (respectively gettable with `getIndexInBlockRegistry`, `getIndexInItemRegistry` and `getIndexInBlockStateRegistry`, and cached in `indexInBlockRegistry`, `indexInItemRegistry` and `indexInBlockStateRegistry`)
that stores the cached index (also known as id: `Registry.getId`) of that `Block`, `Item` or `BlockState` in their registries, respectively `BuiltInRegistries.BLOCK`, `BuiltInRegistries.ITEM` and `Block.BLOCK_STATE_REGISTRY`.
Adds analogous versions for the vanilla-only registries too.

Also includes some corresponding unit tests.

Does not add any usages of the lazily computed value: those are added in subsequent patches. Notably, the "Cache Block, Item and BlockState registry index - Use - Item" and "Cache Block, Item and BlockState registry index - Use - BlockState" patches replace existing occurrences of the registry indices.

License: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)
Fiddle - https://fiddlemc.org

diff --git a/src/main/java/net/minecraft/world/item/Item.java b/src/main/java/net/minecraft/world/item/Item.java
index ecb13f0ac7c24694269c16126b9998032ee47239..d115b48a4736bdf7a1c2b729a6786ffb56c91625 100644
--- a/src/main/java/net/minecraft/world/item/Item.java
+++ b/src/main/java/net/minecraft/world/item/Item.java
@@ -13,6 +13,7 @@ import net.minecraft.SharedConstants;
 import net.minecraft.Util;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Holder;
+import net.minecraft.core.Registry;
 import net.minecraft.core.registries.BuiltInRegistries;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.network.chat.Component;
@@ -110,6 +111,22 @@ public class Item implements FeatureElement, ItemLike {
     private @Nullable String keyInItemRegistryString = null;
     // Fiddle end - cache registry keys as fields - item
 
+    // Fiddle start - cache registry indices as fields - item
+    /**
+     * The {@linkplain Registry#getId index} at which this item is registered in the
+     * {@link BuiltInRegistries#ITEM item registry}.
+     * This will be -1 until initialized in {@link #getIndexInItemRegistry}.
+     */
+    private int indexInItemRegistry = -1;
+
+    /**
+     * The {@linkplain Registry#getId index} at which this item is registered in the
+     * {@link #VANILLA_ONLY_ITEM_REGISTRY vanilla-only item registry}.
+     * This will be -1 until initialized in {@link #getIndexInVanillaOnlyItemRegistry}.
+     */
+    private int indexInVanillaOnlyItemRegistry = -1;
+    // Fiddle end - cache registry indices as fields - item
+
     public static int getId(Item item) {
         return item == null ? 0 : BuiltInRegistries.ITEM.getId(item);
     }
@@ -424,6 +441,22 @@ public class Item implements FeatureElement, ItemLike {
     }
     // Fiddle end - cache registry keys as fields - item
 
+    // Fiddle start - cache registry indices as fields - item
+    public int getIndexInItemRegistry() {
+        if (this.indexInItemRegistry == -1) {
+            this.indexInItemRegistry = BuiltInRegistries.ITEM.getId(this);
+        }
+        return this.indexInItemRegistry;
+    }
+
+    public int getIndexInVanillaOnlyItemRegistry() {
+        if (this.indexInVanillaOnlyItemRegistry == -1) {
+            this.indexInVanillaOnlyItemRegistry = VANILLA_ONLY_ITEM_REGISTRY.getId(this);
+        }
+        return this.indexInVanillaOnlyItemRegistry;
+    }
+    // Fiddle end - cache registry indices as fields - item
+
     public static class Properties {
         int maxStackSize = 64;
         int maxDamage;
diff --git a/src/main/java/net/minecraft/world/level/block/Block.java b/src/main/java/net/minecraft/world/level/block/Block.java
index eeebdb66829ec0cf96a61a2a33f8f7d0352667be..8604af900e1230724b2288b7287367aa3fb5d316 100644
--- a/src/main/java/net/minecraft/world/level/block/Block.java
+++ b/src/main/java/net/minecraft/world/level/block/Block.java
@@ -13,10 +13,7 @@ import java.util.function.Supplier;
 import javax.annotation.Nullable;
 import net.minecraft.SharedConstants;
 import net.minecraft.Util;
-import net.minecraft.core.BlockPos;
-import net.minecraft.core.Direction;
-import net.minecraft.core.Holder;
-import net.minecraft.core.IdMapper;
+import net.minecraft.core.*;
 import net.minecraft.core.registries.BuiltInRegistries;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.MutableComponent;
@@ -144,6 +141,22 @@ public class Block extends BlockBehaviour implements ItemLike {
     private @Nullable String keyInBlockRegistryString = null;
     // Fiddle end - cache registry keys as fields - block
 
+    // Fiddle start - cache registry indices as fields - block
+    /**
+     * The {@linkplain Registry#getId index} at which this block is registered in the
+     * {@link BuiltInRegistries#BLOCK block registry}.
+     * This will be -1 until initialized in {@link #getIndexInBlockRegistry}.
+     */
+    private int indexInBlockRegistry = -1;
+
+    /**
+     * The {@linkplain Registry#getId index} at which this block is registered in the
+     * {@link #VANILLA_ONLY_BLOCK_REGISTRY vanilla-only block registry}.
+     * This will be -1 until initialized in {@link #getIndexInVanillaOnlyBlockRegistry}.
+     */
+    private int indexInVanillaOnlyBlockRegistry = -1;
+    // Fiddle end - cache registry indices as fields - block
+
     private static final int CACHE_SIZE = 2048;
     private static final ThreadLocal<Object2ByteLinkedOpenHashMap<Block.BlockStatePairKey>> OCCLUSION_CACHE = ThreadLocal.withInitial(() -> {
         Object2ByteLinkedOpenHashMap<Block.BlockStatePairKey> object2bytelinkedopenhashmap = new Object2ByteLinkedOpenHashMap<Block.BlockStatePairKey>(2048, 0.25F) {
@@ -646,6 +659,22 @@ public class Block extends BlockBehaviour implements ItemLike {
     }
     // Fiddle end - cache registry keys as fields - block
 
+    // Fiddle start - cache registry indices as fields - block
+    public int getIndexInBlockRegistry() {
+        if (this.indexInBlockRegistry == -1) {
+            this.indexInBlockRegistry = BuiltInRegistries.BLOCK.getId(this);
+        }
+        return this.indexInBlockRegistry;
+    }
+
+    public int getIndexInVanillaOnlyBlockRegistry() {
+        if (this.indexInVanillaOnlyBlockRegistry == -1) {
+            this.indexInVanillaOnlyBlockRegistry = VANILLA_ONLY_BLOCK_REGISTRY.getId(this);
+        }
+        return this.indexInVanillaOnlyBlockRegistry;
+    }
+    // Fiddle end - cache registry indices as fields - block
+
     // Spigot start
     public static float range(float min, float value, float max) {
         if (value < min) {
diff --git a/src/main/java/net/minecraft/world/level/block/state/BlockState.java b/src/main/java/net/minecraft/world/level/block/state/BlockState.java
index acb458e03bfffdae406eae99eb81ce0c3078c9ea..5ac3b9c148facfced0f5ab4d98bc2f35b843e596 100644
--- a/src/main/java/net/minecraft/world/level/block/state/BlockState.java
+++ b/src/main/java/net/minecraft/world/level/block/state/BlockState.java
@@ -3,6 +3,7 @@ package net.minecraft.world.level.block.state;
 import com.google.common.collect.ImmutableMap;
 import com.mojang.serialization.Codec;
 import com.mojang.serialization.MapCodec;
+import net.minecraft.core.Registry;
 import net.minecraft.core.registries.BuiltInRegistries;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.state.properties.Property;
@@ -21,6 +22,23 @@ public class BlockState extends BlockBehaviour.BlockStateBase {
         return this.cachedMaterial;
     }
     // Paper end - optimise getType calls
+
+    // Fiddle start - cache registry indices as fields - block state
+    /**
+     * The {@linkplain Registry#getId index} at which this block state is registered in the
+     * {@link Block#BLOCK_STATE_REGISTRY block state registry}.
+     * This will be -1 until initialized in {@link #getIndexInBlockStateRegistry}.
+     */
+    private int indexInBlockStateRegistry = -1;
+
+    /**
+     * The {@linkplain Registry#getId index} at which this block state is registered in the
+     * {@link Block#VANILLA_ONLY_BLOCK_STATE_REGISTRY vanilla-only block state registry}.
+     * This will be -1 until initialized in {@link #getIndexInVanillaOnlyBlockStateRegistry}.
+     */
+    private int indexInVanillaOnlyBlockStateRegistry = -1;
+    // Fiddle end - cache registry indices as fields - block state
+
     public BlockState(Block block, ImmutableMap<Property<?>, Comparable<?>> propertyMap, MapCodec<BlockState> codec) {
         super(block, propertyMap, codec);
     }
@@ -55,4 +73,21 @@ public class BlockState extends BlockBehaviour.BlockStateBase {
     protected BlockState asState() {
         return this;
     }
+
+    // Fiddle start - cache registry indices as fields - block state
+    public int getIndexInBlockStateRegistry() {
+        if (this.indexInBlockStateRegistry == -1) {
+            this.indexInBlockStateRegistry = Block.BLOCK_STATE_REGISTRY.getId(this);
+        }
+        return this.indexInBlockStateRegistry;
+    }
+
+    public int getIndexInVanillaOnlyBlockStateRegistry() {
+        if (this.indexInVanillaOnlyBlockStateRegistry == -1) {
+            this.indexInVanillaOnlyBlockStateRegistry = Block.VANILLA_ONLY_BLOCK_STATE_REGISTRY.getId(this);
+        }
+        return this.indexInVanillaOnlyBlockStateRegistry;
+    }
+    // Fiddle end - cache registry indices as fields - block state
+
 }
diff --git a/src/test/java/org/fiddlemc/fiddle/block/PerBlockTest.java b/src/test/java/org/fiddlemc/fiddle/block/PerBlockTest.java
index 3209419ff3392886b4c39de6d77ce57853e29b8a..33e7ac9908bb82d73e66634ed0f8f6afe3aa1f1f 100644
--- a/src/test/java/org/fiddlemc/fiddle/block/PerBlockTest.java
+++ b/src/test/java/org/fiddlemc/fiddle/block/PerBlockTest.java
@@ -31,4 +31,13 @@ public class PerBlockTest extends AbstractTestingBase {
     }
     // Fiddle end - cache registry keys as fields - block
 
+    // Fiddle start - cache registry indices as fields - block
+    @Test
+    public void getIndexInBlockRegistry() {
+        for (Block block : getBlocks()) {
+            assertEquals("getIndexInBlockRegistry equals lookup value for " + block, block.getIndexInBlockRegistry(), BuiltInRegistries.BLOCK.getId(block));
+        }
+    }
+    // Fiddle end - cache registry indices as fields - block
+
 }
diff --git a/src/test/java/org/fiddlemc/fiddle/block/PerItemTest.java b/src/test/java/org/fiddlemc/fiddle/block/PerItemTest.java
index 3bf5fc5a222f3e355d07948a1392cecd3753e8fd..4e5c6af82c2d0cc6b69b179216a8cedc55b2b31d 100644
--- a/src/test/java/org/fiddlemc/fiddle/block/PerItemTest.java
+++ b/src/test/java/org/fiddlemc/fiddle/block/PerItemTest.java
@@ -31,4 +31,13 @@ public class PerItemTest extends AbstractTestingBase {
     }
     // Fiddle end - cache registry keys as fields - item
 
+    // Fiddle start - cache registry indices as fields - item
+    @Test
+    public void getIndexInItemRegistry() {
+        for (Item item : getItems()) {
+            assertEquals("getIndexInItemRegistry equals lookup value for " + item, item.getIndexInItemRegistry(), BuiltInRegistries.ITEM.getId(item));
+        }
+    }
+    // Fiddle end - cache registry indices as fields - item
+
 }
