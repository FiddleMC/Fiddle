From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Thu, 11 May 2023 18:35:26 +0200
Subject: [PATCH] Load packs - Data packs - Repository source implementation

License: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)
Fiddle - https://fiddlemc.org

diff --git a/src/main/java/org/fiddlemc/fiddle/pack/load/data/FiddleRepositorySource.java b/src/main/java/org/fiddlemc/fiddle/pack/load/data/FiddleRepositorySource.java
new file mode 100644
index 0000000000000000000000000000000000000000..c2f5eeecb4997f4389b08305e83af3954a197ce8
--- /dev/null
+++ b/src/main/java/org/fiddlemc/fiddle/pack/load/data/FiddleRepositorySource.java
@@ -0,0 +1,77 @@
+// Fiddle - load packs - data packs - repository source
+
+package org.fiddlemc.fiddle.pack.load.data;
+
+import net.minecraft.network.chat.Component;
+import net.minecraft.server.packs.PackResources;
+import net.minecraft.server.packs.PackType;
+import net.minecraft.server.packs.repository.Pack;
+import net.minecraft.server.packs.repository.PackSource;
+import net.minecraft.server.packs.repository.RepositorySource;
+import com.mojang.logging.LogUtils;
+import org.fiddlemc.fiddle.configuration.FiddleGlobalConfiguration;
+import org.fiddlemc.fiddle.pack.FiddlePack;
+import org.fiddlemc.fiddle.pack.FiddlePackMeta;
+import org.fiddlemc.fiddle.pack.FiddlePacks;
+import org.fiddlemc.fiddle.pack.read.filesprovider.DirectoryInPack;
+import org.fiddlemc.fiddle.pack.read.filesprovider.FiddlePackFilesProvider;
+import org.fiddlemc.fiddle.pack.exception.PackException;
+import org.fiddlemc.fiddle.pack.read.PackScanner;
+import org.fiddlemc.fiddle.pack.read.meta.FiddlePackMetaParser;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+import org.slf4j.Logger;
+
+import java.util.function.Consumer;
+
+/**
+ * A {@link RepositorySource} that provides the data packs from Fiddle packs.
+ */
+public class FiddleRepositorySource implements RepositorySource {
+
+    private static final PackType packType = PackType.SERVER_DATA; // Obviously
+    private static final PackSource packSource = PackSource.SERVER; // Arbitrary choice
+    private static final String packNamePrefix = "fiddle/";
+
+    private static final String dataFolderName = PackType.SERVER_DATA.getDirectory();
+
+    private static final Logger LOGGER = LogUtils.getClassLogger();
+
+    @Override
+    public void loadPacks(@NotNull Consumer<Pack> profileAdder) {
+        for (FiddlePack pack : FiddlePacks.getPacks()) {
+            FiddlePackFilesProvider filesProvider = pack.filesProvider();
+            // Check that there is a data folder
+            @Nullable DirectoryInPack dataFolder;
+            try {
+                dataFolder = filesProvider.getTopLevelDirectory(dataFolderName);
+            } catch (PackException e) {
+                LOGGER.warn("Failed to check for a directory named '" + dataFolderName + "' in a pack ('" + pack + "'): " + e.getMessage(), e);
+                continue;
+            }
+            if (dataFolder != null) {
+                // Check that the data folder is non-empty (i.e. it contains some actual file)
+                if (dataFolder.containsAnyNestedRegularFile()) {
+                    @Nullable FiddlePackMeta.DataPackMeta dataPackMeta = pack.meta().dataPackMeta;
+                    if (dataPackMeta == null && pack.developmentModeEnabled() && FiddleGlobalConfiguration.get().packCreatorSettings.printDebugInformationToConsole) {
+                        LOGGER.info("Pack '" + pack + "' has a " + dataFolderName + " directory, but no " + FiddlePackMetaParser.dataPackMetaJsonKey + " in the " + PackScanner.packMetaFilename + " file");
+                    }
+                    Pack.ResourcesSupplier dataPackResourcesSupplier = new Pack.ResourcesSupplier() {
+                        @Override
+                        public PackResources openPrimary(String name) {
+                            return new FiddlePackResources(name, pack);//TODO support overlays
+                        }
+
+                        @Override
+                        public PackResources openFull(String name, Pack.Info metadata) {
+                            return new FiddlePackResources(name, pack);//TODO support overlays
+                        }
+                    };
+                    Pack dataPack = Pack.readMetaAndCreate(packNamePrefix + pack.meta().technicalName, Component.literal(pack.meta().displayName), false, dataPackResourcesSupplier, packType, Pack.Position.TOP, packSource);
+                    profileAdder.accept(dataPack);
+                }
+            }
+        }
+    }
+
+}
diff --git a/src/main/java/org/fiddlemc/fiddle/pack/read/PackScanner.java b/src/main/java/org/fiddlemc/fiddle/pack/read/PackScanner.java
index b5f2ad47bfb87a95d8e965ad3c3dce18a2af5659..667d182af93be56348ca19e884a818b43551c81b 100644
--- a/src/main/java/org/fiddlemc/fiddle/pack/read/PackScanner.java
+++ b/src/main/java/org/fiddlemc/fiddle/pack/read/PackScanner.java
@@ -31,7 +31,7 @@ import java.util.*;
  */
 public final class PackScanner {
 
-    private static final String packMetaFilename = "pack.mcmeta";
+    public static final String packMetaFilename = "pack.mcmeta"; // Fiddle - load packs - data packs - repository source - private -> public
     // Accept .jar files in the packs folder too (to use them as packs without the plugin code, which is useful if the code has broken after an update)
     private static final String[] javaExtractableArchiveExtensions = {"zip", "jar", "gz"};
     private static final String[] rarExtractableArchiveExtensions = {"rar"};
