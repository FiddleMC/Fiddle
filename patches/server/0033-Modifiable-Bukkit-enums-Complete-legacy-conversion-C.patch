From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Mon, 8 Jan 2024 19:04:41 +0100
Subject: [PATCH] Modifiable Bukkit enums - Complete legacy conversion -
 Conversion is explicitly for item or block

* Makes the `itemPriority` parameter of the `CraftLegacy.fromLegacy` method required.
* Modifies occurrences of abovementioned method to explicitly specify a value for the parameter.

This is, apart from the benefits of increased explicitness, so the full coverage of legacy conversion can be tested in the "Modifiable Bukkit enums - Complete legacy conversion - Test completeness" patch.

License: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)
Fiddle - https://fiddlemc.org

diff --git a/src/main/java/net/minecraft/world/level/block/Block.java b/src/main/java/net/minecraft/world/level/block/Block.java
index 8604af900e1230724b2288b7287367aa3fb5d316..34de48df6e4aceab651d69dbd9c03c73de212bea 100644
--- a/src/main/java/net/minecraft/world/level/block/Block.java
+++ b/src/main/java/net/minecraft/world/level/block/Block.java
@@ -197,7 +197,7 @@ public class Block extends BlockBehaviour implements ItemLike {
         if (state == null) {
             return 0;
         } else {
-            int i = Block.BLOCK_STATE_REGISTRY.getId(state);
+            int i = state.getIndexInBlockStateRegistry(); // Fiddle - cache registry indices as fields - use instead of lookup - block state
 
             return i == -1 ? 0 : i;
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java
index 471ae4458e7ea7c29d7551b32cec98180fbccd4e..01a1282b595ba368026affaee0dc0b34d48d0fc3 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java
@@ -102,7 +102,7 @@ public class CraftInventory implements Inventory {
     @Override
     public boolean contains(Material material) {
         Preconditions.checkArgument(material != null, "Material cannot be null");
-        material = CraftLegacy.fromLegacy(material);
+        material = CraftLegacy.fromLegacy(material, true); // Fiddle - modifiable Bukkit enums - Material - make legacy conversion complete - conversion is explicitly for item or block
         for (ItemStack item : this.getStorageContents()) {
             if (item != null && item.getType() == material) {
                 return true;
@@ -127,7 +127,7 @@ public class CraftInventory implements Inventory {
     @Override
     public boolean contains(Material material, int amount) {
         Preconditions.checkArgument(material != null, "Material cannot be null");
-        material = CraftLegacy.fromLegacy(material);
+        material = CraftLegacy.fromLegacy(material, true); // Fiddle - modifiable Bukkit enums - Material - make legacy conversion complete - conversion is explicitly for item or block
         if (amount <= 0) {
             return true;
         }
@@ -176,7 +176,7 @@ public class CraftInventory implements Inventory {
     @Override
     public HashMap<Integer, ItemStack> all(Material material) {
         Preconditions.checkArgument(material != null, "Material cannot be null");
-        material = CraftLegacy.fromLegacy(material);
+        material = CraftLegacy.fromLegacy(material, true); // Fiddle - modifiable Bukkit enums - Material - make legacy conversion complete - conversion is explicitly for item or block
         HashMap<Integer, ItemStack> slots = new HashMap<>();
 
         ItemStack[] inventory = this.getStorageContents();
@@ -206,7 +206,7 @@ public class CraftInventory implements Inventory {
     @Override
     public int first(Material material) {
         Preconditions.checkArgument(material != null, "Material cannot be null");
-        material = CraftLegacy.fromLegacy(material);
+        material = CraftLegacy.fromLegacy(material, true); // Fiddle - modifiable Bukkit enums - Material - make legacy conversion complete - conversion is explicitly for item or block
         ItemStack[] inventory = this.getStorageContents();
         for (int i = 0; i < inventory.length; i++) {
             ItemStack item = inventory[i];
@@ -261,7 +261,7 @@ public class CraftInventory implements Inventory {
 
     public int firstPartial(Material material) {
         Preconditions.checkArgument(material != null, "Material cannot be null");
-        material = CraftLegacy.fromLegacy(material);
+        material = CraftLegacy.fromLegacy(material, true); // Fiddle - modifiable Bukkit enums - Material - make legacy conversion complete - conversion is explicitly for item or block
         ItemStack[] inventory = this.getStorageContents();
         for (int i = 0; i < inventory.length; i++) {
             ItemStack item = inventory[i];
@@ -420,7 +420,7 @@ public class CraftInventory implements Inventory {
     @Override
     public void remove(Material material) {
         Preconditions.checkArgument(material != null, "Material cannot be null");
-        material = CraftLegacy.fromLegacy(material);
+        material = CraftLegacy.fromLegacy(material, true); // Fiddle - modifiable Bukkit enums - Material - make legacy conversion complete - conversion is explicitly for item or block
         ItemStack[] items = this.getStorageContents();
         for (int i = 0; i < items.length; i++) {
             if (items[i] != null && items[i].getType() == material) {
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java
index b4850f4da500771e890247d9ed7f7d027460a718..daef69005557e8906caea3d53e00dcdc0de1696f 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java
@@ -37,7 +37,7 @@ public final class CraftItemFactory implements ItemFactory {
 
     @Override
     public boolean isApplicable(ItemMeta meta, Material type) {
-        type = CraftLegacy.fromLegacy(type); // This may be called from legacy item stacks, try to get the right material
+        type = CraftLegacy.fromLegacy(type, true); // This may be called from legacy item stacks, try to get the right material // Fiddle - modifiable Bukkit enums - Material - make legacy conversion complete - conversion is explicitly for item or block
         if (type == null || meta == null) {
             return false;
         }
@@ -54,7 +54,7 @@ public final class CraftItemFactory implements ItemFactory {
     }
 
     private ItemMeta getItemMeta(Material material, CraftMetaItem meta) {
-        material = CraftLegacy.fromLegacy(material); // This may be called from legacy item stacks, try to get the right material
+        material = CraftLegacy.fromLegacy(material, true); // This may be called from legacy item stacks, try to get the right material // Fiddle - modifiable Bukkit enums - Material - make legacy conversion complete - conversion is explicitly for item or block
         switch (material) {
         case AIR:
             return null;
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
index f62ef038af2dfe7525e72c8b8e30a3fa9ce2b451..06213590b1bc763fc57a123b8fe870556672a284 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
@@ -657,7 +657,7 @@ public final class CraftItemStack extends ItemStack {
         if (this.handle == null || that.handle == null) {
             return false;
         }
-        Material comparisonType = CraftLegacy.fromLegacy(that.getType()); // This may be called from legacy item stacks, try to get the right material
+        Material comparisonType = CraftLegacy.fromLegacy(that.getType(), true); // This may be called from legacy item stacks, try to get the right material // Fiddle - modifiable Bukkit enums - Material - make legacy conversion complete - conversion is explicitly for item or block
         if (!(comparisonType == this.getType() && this.getDurability() == that.getDurability())) {
             return false;
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaSpawnEgg.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaSpawnEgg.java
index 3ab43aab043ae59e541f708c8558ddf9bdd82f84..621ef7bacb978b9c9061ae59b4db1a5ba03f3152 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaSpawnEgg.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaSpawnEgg.java
@@ -307,7 +307,7 @@ public class CraftMetaSpawnEgg extends CraftMetaItem implements SpawnEggMeta {
                 this.entityTag.remove(ENTITY_ID.NBT);
             }
 
-            return CraftLegacy.fromLegacy(new MaterialData(Material.LEGACY_MONSTER_EGG, (byte) this.spawnedType.getTypeId()));
+            return CraftLegacy.fromLegacy(new MaterialData(Material.LEGACY_MONSTER_EGG, (byte) this.spawnedType.getTypeId()), true); // Fiddle - modifiable Bukkit enums - Material - make legacy conversion complete - conversion is explicitly for item or block
         }
 
         return super.updateMaterial(material);
diff --git a/src/main/java/org/bukkit/craftbukkit/legacy/CraftLegacy.java b/src/main/java/org/bukkit/craftbukkit/legacy/CraftLegacy.java
index 2677e21d8239bf0361a3bc5c9a50c328e54d70f6..d9f731d605add107c0235c8f8db009bb924fb8a2 100644
--- a/src/main/java/org/bukkit/craftbukkit/legacy/CraftLegacy.java
+++ b/src/main/java/org/bukkit/craftbukkit/legacy/CraftLegacy.java
@@ -165,16 +165,12 @@ public final class CraftLegacy {
         return (mappedData == null) ? new MaterialData(Material.LEGACY_AIR) : mappedData;
     }
 
-    public static Material fromLegacy(Material material) {
+    public static Material fromLegacy(Material material, boolean itemPriority) { // Fiddle - modifiable Bukkit enums - Material - make legacy conversion complete - conversion is explicitly for item or block
         if (material == null || !material.isLegacy()) {
             return material;
         }
 
-        return CraftLegacy.fromLegacy(new MaterialData(material));
-    }
-
-    public static Material fromLegacy(MaterialData materialData) {
-        return CraftLegacy.fromLegacy(materialData, false);
+        return CraftLegacy.fromLegacy(new MaterialData(material), itemPriority); // Fiddle - modifiable Bukkit enums - Material - make legacy conversion complete - conversion is explicitly for item or block
     }
 
     public static Material fromLegacy(MaterialData materialData, boolean itemPriority) {
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftLegacy.java b/src/main/java/org/bukkit/craftbukkit/util/CraftLegacy.java
index c8dde75de231b5fdde88f5bc111c21883d9c3f49..c788b24c8030a69f1428b751d218e250d142a36c 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftLegacy.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftLegacy.java
@@ -14,16 +14,18 @@ public final class CraftLegacy {
         //
     }
 
-    public static Material fromLegacy(Material material) {
+    public static Material fromLegacy(Material material, boolean itemPriority) { // Fiddle - modifiable Bukkit enums - Material - make legacy conversion complete - conversion is explicitly for item or block
         if (material == null || !material.isLegacy()) {
             return material;
         }
 
-        return org.bukkit.craftbukkit.legacy.CraftLegacy.fromLegacy(material);
+        return org.bukkit.craftbukkit.legacy.CraftLegacy.fromLegacy(material, itemPriority); // Fiddle - modifiable Bukkit enums - Material - make legacy conversion complete - conversion is explicitly for item or block
     }
 
-    public static Material fromLegacy(MaterialData materialData) {
-        return org.bukkit.craftbukkit.legacy.CraftLegacy.fromLegacy(materialData);
+    // Fiddle start - modifiable Bukkit enums - Material - make legacy conversion complete - conversion is explicitly for item or block
+    public static Material fromLegacy(MaterialData materialData, boolean itemPriority) {
+        return org.bukkit.craftbukkit.legacy.CraftLegacy.fromLegacy(materialData, itemPriority);
+        // Fiddle end - modifiable Bukkit enums - Material - make legacy conversion complete - conversion is explicitly for item or block
     }
 
     public static Material[] modern_values() {
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
index 997885b4319082a676621658a9210e5f6c607b69..82b353bccdd9f057e61697e22038f5565a31ed36 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
@@ -194,7 +194,7 @@ public final class CraftMagicNumbers implements UnsafeValues {
 
     public static Item getItem(Material material) {
         if (material != null && material.isLegacy()) {
-            material = CraftLegacy.fromLegacy(material);
+            material = CraftLegacy.fromLegacy(material, true); // Fiddle - modifiable Bukkit enums - Material - make legacy conversion complete - conversion is explicitly for item or block
         }
 
         return CraftMagicNumbers.MATERIAL_ITEM.get(material);
@@ -202,7 +202,7 @@ public final class CraftMagicNumbers implements UnsafeValues {
 
     public static Block getBlock(Material material) {
         if (material != null && material.isLegacy()) {
-            material = CraftLegacy.fromLegacy(material);
+            material = CraftLegacy.fromLegacy(material, false); // Fiddle - modifiable Bukkit enums - Material - make legacy conversion complete - conversion is explicitly for item or block
         }
 
         return CraftMagicNumbers.MATERIAL_BLOCK.get(material);
@@ -242,12 +242,12 @@ public final class CraftMagicNumbers implements UnsafeValues {
 
     @Override
     public Material fromLegacy(Material material) {
-        return CraftLegacy.fromLegacy(material);
+        return this.fromLegacy(material, false); // Fiddle - modifiable Bukkit enums - Material - make legacy conversion complete - conversion is explicitly for item or block
     }
 
     @Override
     public Material fromLegacy(MaterialData material) {
-        return CraftLegacy.fromLegacy(material);
+        return this.fromLegacy(material, false); // Fiddle - modifiable Bukkit enums - Material - make legacy conversion complete - conversion is explicitly for item or block
     }
 
     @Override
diff --git a/src/test/java/org/bukkit/craftbukkit/legacy/LegacyTest.java b/src/test/java/org/bukkit/craftbukkit/legacy/LegacyTest.java
index 7e3452542e954ad202f4bbb861d9a2f9ef8262ef..f4db4d6bc827cf5ca35d831183d9f6c42e073ef3 100644
--- a/src/test/java/org/bukkit/craftbukkit/legacy/LegacyTest.java
+++ b/src/test/java/org/bukkit/craftbukkit/legacy/LegacyTest.java
@@ -128,10 +128,10 @@ public class LegacyTest extends AbstractTestingBase {
                 Assert.assertNotEquals("Could not toLegacy " + material, Material.LEGACY_AIR, converted.getItemType());
 
                 if (!this.INVALIDATED_MATERIALS.contains(converted.getItemType())) {
-                    Assert.assertNotEquals("Could not fromLegacy(toLegacy) " + converted + "(" + material + ")", Material.AIR, CraftLegacy.fromLegacy(converted));
+                    Assert.assertNotEquals("Could not fromLegacy(toLegacy) " + converted + "(" + material + ")", Material.AIR, CraftLegacy.fromLegacy(converted, false)); // Fiddle - modifiable Bukkit enums - Material - make legacy conversion complete - conversion is explicitly for item or block
                 }
                 if (!this.INVERSION_FAILS.contains(material)) {
-                    Assert.assertEquals("Could not fromLegacy(toLegacy) " + converted + "(" + material + ")", material, CraftLegacy.fromLegacy(converted));
+                    Assert.assertEquals("Could not fromLegacy(toLegacy) " + converted + "(" + material + ")", material, CraftLegacy.fromLegacy(converted, false)); // Fiddle - modifiable Bukkit enums - Material - make legacy conversion complete - conversion is explicitly for item or block
                 }
             }
         }
@@ -143,7 +143,7 @@ public class LegacyTest extends AbstractTestingBase {
     public void fromLegacyMaterial() {
         for (Material material : Material.values()) {
             if (!this.INVALIDATED_MATERIALS.contains(material) && material.isLegacy()) {
-                Material converted = CraftLegacy.fromLegacy(material);
+                Material converted = CraftLegacy.fromLegacy(material, false); // Fiddle - modifiable Bukkit enums - Material - make legacy conversion complete - conversion is explicitly for item or block
                 Assert.assertNotEquals("Could not fromLegacy " + material, Material.AIR, converted);
 
                 Assert.assertNotEquals("Could not toLegacy(fromLegacy) " + converted + "(" + material + ")", Material.AIR, CraftLegacy.toLegacy(converted));
@@ -153,7 +153,7 @@ public class LegacyTest extends AbstractTestingBase {
             }
         }
 
-        Assert.assertEquals("Could not fromLegacy Air", Material.AIR, CraftLegacy.fromLegacy(Material.LEGACY_AIR));
+        Assert.assertEquals("Could not fromLegacy Air", Material.AIR, CraftLegacy.fromLegacy(Material.LEGACY_AIR, false)); // Fiddle - modifiable Bukkit enums - Material - make legacy conversion complete - conversion is explicitly for item or block
     }
 
     @Test
