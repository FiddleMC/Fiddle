From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Sat, 22 Jul 2023 10:42:01 +0200
Subject: [PATCH] Client perspective - Wait for client information

Ensures that the servers waits for a ServerboundClientInformationPacket
(which is send by the Notchian client in response to a ClienboundLoginPacket)
before sending any further packets.
This guarantees that items in the inventory, entities, blocks, messages and more that are
sent to the player are updated in accordance with the client settings (such as locale).

License: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)
Fiddle - https://fiddlemc.org

diff --git a/src/main/java/net/minecraft/server/network/ServerConfigurationPacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerConfigurationPacketListenerImpl.java
index f544959972b9b881231bcf9833b1ca18fd04ff45..d2d568bfac905aec2dcce324e4d642478930ed32 100644
--- a/src/main/java/net/minecraft/server/network/ServerConfigurationPacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerConfigurationPacketListenerImpl.java
@@ -44,6 +44,7 @@ public class ServerConfigurationPacketListenerImpl extends ServerCommonPacketLis
     private ConfigurationTask currentTask;
     private ClientInformation clientInformation;
     private @Nullable ServerResourcePackConfigurationTask fiddleResourcePackTask; // Fiddle - client perspective - send resource pack
+    public boolean hasReceivedClientInformation; // Fiddle start - client perspective - wait for client information
 
     public ServerConfigurationPacketListenerImpl(MinecraftServer minecraftserver, Connection networkmanager, CommonListenerCookie commonlistenercookie, ServerPlayer player) { // CraftBukkit
         super(minecraftserver, networkmanager, commonlistenercookie, player); // CraftBukkit
@@ -80,6 +81,7 @@ public class ServerConfigurationPacketListenerImpl extends ServerCommonPacketLis
         this.send(new ClientboundRegistryDataPacket((new RegistryAccess.ImmutableRegistryAccess(RegistrySynchronization.networkedRegistries(layeredregistryaccess))).freeze()));
         this.send(new ClientboundUpdateTagsPacket(TagNetworkSerialization.serializeTagsToNetwork(layeredregistryaccess)));
         this.addOptionalTasks();
+        this.configurationTasks.add(new org.fiddlemc.fiddle.packet.clientinformation.WaitForClientInformationTask(this)); // Fiddle - client perspective - wait for client information
         this.configurationTasks.add(new JoinWorldTask());
         this.startNextTask();
     }
@@ -109,7 +111,15 @@ public class ServerConfigurationPacketListenerImpl extends ServerCommonPacketLis
     @Override
     public void handleClientInformation(ServerboundClientInformationPacket packet) {
         this.clientInformation = packet.information();
-        this.connection.channel.attr(io.papermc.paper.adventure.PaperAdventure.LOCALE_ATTRIBUTE).set(net.kyori.adventure.translation.Translator.parseLocale(packet.information().language())); // Paper
+        this.connection.channel.attr(io.papermc.paper.adventure.PaperAdventure.LOCALE_ATTRIBUTE).set(net.kyori.adventure.translation.Translator.parseLocale(packet.information().language())); // Paper\
+        // Fiddle start - client perspective - wait for client information
+        if (!this.hasReceivedClientInformation) {
+            if (this.currentTask != null && this.currentTask.type() == org.fiddlemc.fiddle.packet.clientinformation.WaitForClientInformationTask.TYPE) {
+                this.finishCurrentTask(org.fiddlemc.fiddle.packet.clientinformation.WaitForClientInformationTask.TYPE);
+            }
+            this.hasReceivedClientInformation = true;
+        }
+        // Fiddle end - client perspective - wait for client information
     }
 
     @Override
@@ -184,7 +194,7 @@ public class ServerConfigurationPacketListenerImpl extends ServerCommonPacketLis
         }
     }
 
-    private void finishCurrentTask(ConfigurationTask.Type key) {
+    public void finishCurrentTask(ConfigurationTask.Type key) { // Fiddle - client perspective - wait for client information - private -> public
         ConfigurationTask.Type configurationtask_a1 = this.currentTask != null ? this.currentTask.type() : null;
 
         if (!key.equals(configurationtask_a1)) {
diff --git a/src/main/java/org/fiddlemc/fiddle/packet/clientinformation/WaitForClientInformationTask.java b/src/main/java/org/fiddlemc/fiddle/packet/clientinformation/WaitForClientInformationTask.java
new file mode 100644
index 0000000000000000000000000000000000000000..6d00b01a33aa82e2df75a633958358235562f144
--- /dev/null
+++ b/src/main/java/org/fiddlemc/fiddle/packet/clientinformation/WaitForClientInformationTask.java
@@ -0,0 +1,35 @@
+// Fiddle - client perspective - wait for client information
+
+package org.fiddlemc.fiddle.packet.clientinformation;
+
+import net.minecraft.network.protocol.Packet;
+import net.minecraft.server.network.ConfigurationTask;
+import net.minecraft.server.network.ServerConfigurationPacketListenerImpl;
+
+import java.lang.ref.WeakReference;
+import java.util.function.Consumer;
+
+public class WaitForClientInformationTask implements ConfigurationTask {
+
+    public static final ConfigurationTask.Type TYPE = new ConfigurationTask.Type("wait_for_client_information");
+
+    private final WeakReference<ServerConfigurationPacketListenerImpl> packetListener;
+
+    public WaitForClientInformationTask(ServerConfigurationPacketListenerImpl packetListener) {
+        this.packetListener = new WeakReference<>(packetListener);
+    }
+
+    @Override
+    public void start(Consumer<Packet<?>> sender) {
+        var packetListener = this.packetListener.get();
+        if (packetListener.hasReceivedClientInformation) {
+            packetListener.finishCurrentTask(TYPE);
+        }
+    }
+
+    @Override
+    public ConfigurationTask.Type type() {
+        return TYPE;
+    }
+
+}
