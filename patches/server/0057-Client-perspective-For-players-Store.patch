From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Tue, 18 Jul 2023 22:19:51 +0200
Subject: [PATCH] Client perspective - For players - Store

License: Fiddle Public License Agreement 1.0 (included in license/FPL-1.0.txt)
Fiddle - https://fiddlemc.org

diff --git a/src/main/java/net/minecraft/network/Connection.java b/src/main/java/net/minecraft/network/Connection.java
index cf20f0983fc25b26cf92b9d3a28746b1909fc56b..280463a21589822d09a04bf024e7239edc38207c 100644
--- a/src/main/java/net/minecraft/network/Connection.java
+++ b/src/main/java/net/minecraft/network/Connection.java
@@ -44,6 +44,7 @@ import net.minecraft.server.RunningOnDifferentThreadException;
 import net.minecraft.util.LazyLoadedValue;
 import net.minecraft.util.Mth;
 import org.apache.commons.lang3.Validate;
+import org.fiddlemc.fiddle.packet.ClientPerspective;
 import org.slf4j.Logger;
 import org.slf4j.Marker;
 import org.slf4j.MarkerFactory;
@@ -851,6 +852,22 @@ public class Connection extends SimpleChannelInboundHandler<Packet<?>> {
         return this.averageSentPackets;
     }
 
+    // Fiddle start - client perspective - player - get from connection
+    /**
+     * @return The {@link ClientPerspective} of this connection's {@linkplain #getPlayer() player}.
+     * This is null if the player is null.
+     *
+     * @see net.minecraft.server.level.ServerPlayer#getClientPerspective
+     */
+    public final @Nullable ClientPerspective getPlayerClientPerspective() {
+        var player = this.getPlayer();
+        if (player == null) {
+            return null;
+        }
+        return player.getClientPerspective();
+    }
+    // Fiddle start - client perspective - player - get from connection
+
     private static class PacketHolder {
 
         final Packet<?> packet;
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index 009e3a81a257ccb428926dfeb1f7101fac598502..6d129fd434ae2a3f6bbda700b1a8a7022f168c19 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -153,6 +153,8 @@ import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.level.portal.PortalInfo;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.Vec3;
+import org.fiddlemc.fiddle.packet.ClientPerspective;
+import org.jetbrains.annotations.NotNull;
 import org.slf4j.Logger;
 import net.minecraft.world.Container;
 import net.minecraft.world.InteractionHand;
@@ -282,6 +284,7 @@ public class ServerPlayer extends Player {
     public io.papermc.paper.chunk.system.RegionizedPlayerChunkLoader.PlayerChunkLoaderData chunkLoader;
 
     public boolean hasBeenPlacedIntoPlayerList = false; // Fiddle - client perspective - send resource pack
+    private @Nullable ClientPerspective clientPerspective; // Fiddle - client perspective - player
 
     public io.papermc.paper.chunk.system.RegionizedPlayerChunkLoader.ViewDistances getViewDistances() {
         return this.viewDistances.get();
@@ -2651,4 +2654,25 @@ public class ServerPlayer extends Player {
         return (CraftPlayer) super.getBukkitEntity();
     }
     // CraftBukkit end
+
+    // Fiddle start - client perspective - player
+    /**
+     * @return The {@link ClientPerspective} of this player.
+     * This is null if and only if it has not been {@linkplain #setClientPerspective initialized} yet.
+     */
+    public final @Nullable ClientPerspective getClientPerspective() {
+        return this.clientPerspective;
+    }
+
+    /**
+     * @param clientPerspective The value to initialize this player's {@link ClientPerspective} to.
+     */
+    public final void setClientPerspective(@NotNull ClientPerspective clientPerspective) {
+        if (this.clientPerspective != null) {
+            throw new IllegalStateException("Tried to set Player.clientPerspective when it was already set");
+        }
+        this.clientPerspective = clientPerspective;
+    }
+    // Fiddle end - client perspective - player
+
 }
