From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Mon, 15 May 2023 21:01:45 +0200
Subject: [PATCH] Read packs - Files provider - Implementation for packs in
 archive files

License: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)
Fiddle - https://fiddlemc.org

diff --git a/src/main/java/org/fiddlemc/fiddle/pack/read/SevenZipSupport.java b/src/main/java/org/fiddlemc/fiddle/pack/read/SevenZipSupport.java
new file mode 100644
index 0000000000000000000000000000000000000000..ee2d830fccbdd6710706e2191028b4137b20d469
--- /dev/null
+++ b/src/main/java/org/fiddlemc/fiddle/pack/read/SevenZipSupport.java
@@ -0,0 +1,27 @@
+package org.fiddlemc.fiddle.pack.read;
+
+import net.sf.sevenzipjbinding.SevenZip;
+
+/**
+ * A class providing a check for whether the 7-Zip-JBinding library can be used.
+ */
+public final class SevenZipSupport {
+
+    private SevenZipSupport() {
+        throw new RuntimeException();
+    }
+
+    private static Boolean is7ZipAvailable;
+    public static boolean is7ZipAvailable() {
+        if (is7ZipAvailable == null) {
+            try {
+                SevenZip.initSevenZipFromPlatformJAR();
+                is7ZipAvailable = SevenZip.isInitializedSuccessfully();;
+            } catch (Throwable ignored) {
+                is7ZipAvailable = false;
+            }
+        }
+        return is7ZipAvailable;
+    }
+
+}
diff --git a/src/main/java/org/fiddlemc/fiddle/pack/read/filesprovider/archive/ArchiveFileFiddlePackFilesProvider.java b/src/main/java/org/fiddlemc/fiddle/pack/read/filesprovider/archive/ArchiveFileFiddlePackFilesProvider.java
new file mode 100644
index 0000000000000000000000000000000000000000..b76c8c3c8d77c8004266909b9633cd5b812ed994
--- /dev/null
+++ b/src/main/java/org/fiddlemc/fiddle/pack/read/filesprovider/archive/ArchiveFileFiddlePackFilesProvider.java
@@ -0,0 +1,288 @@
+// Fiddle - read packs - pack files - archive file packs
+
+package org.fiddlemc.fiddle.pack.read.filesprovider.archive;
+
+import com.google.common.collect.Iterators;
+import com.mojang.logging.LogUtils;
+import it.unimi.dsi.fastutil.ints.IntArrayFIFOQueue;
+import it.unimi.dsi.fastutil.ints.IntArrayList;
+import it.unimi.dsi.fastutil.ints.IntList;
+import it.unimi.dsi.fastutil.ints.IntPriorityQueue;
+import net.sf.sevenzipjbinding.IInArchive;
+import net.sf.sevenzipjbinding.SevenZip;
+import net.sf.sevenzipjbinding.SevenZipException;
+import net.sf.sevenzipjbinding.impl.RandomAccessFileInStream;
+import net.sf.sevenzipjbinding.simple.ISimpleInArchiveItem;
+import org.fiddlemc.fiddle.pack.read.SevenZipSupport;
+import org.fiddlemc.fiddle.pack.read.filesprovider.FiddlePackFilesProvider;
+import org.fiddlemc.fiddle.pack.read.filesprovider.FileInPack;
+import org.fiddlemc.fiddle.pack.read.filesprovider.RegularFileInPack;
+import org.fiddlemc.fiddle.pack.exception.PackException;
+import org.jetbrains.annotations.Nullable;
+import org.slf4j.Logger;
+
+import java.io.File;
+import java.io.RandomAccessFile;
+import java.util.*;
+import java.util.stream.IntStream;
+import java.util.stream.Stream;
+import java.util.zip.ZipEntry;
+import java.util.zip.ZipFile;
+
+/**
+ * A {@link FiddlePackFilesProvider} for packs that are defined in an archive file.
+ */
+public class ArchiveFileFiddlePackFilesProvider implements FiddlePackFilesProvider {
+
+    private static final Logger LOGGER = LogUtils.getClassLogger();
+
+    /**
+     * The archive file of this pack.
+     */
+    private final File packFile;
+
+    /**
+     * Whether this provider will use 7-Zip-JBinding to read the archive.
+     */
+    private final boolean use7Zip;
+
+    /**
+     * Null while the pack archive file is not open,
+     * or if 7-Zip-JBinding is not used.
+     */
+    private @Nullable RandomAccessFile randomAccessPackFile;
+
+    /**
+     * Null while the pack archive file is not open,
+     * or if 7-Zip-JBinding is used.
+     */
+    private @Nullable ZipFile zipFile;
+
+    /**
+     * Null while the pack archive file is not open, or while it has not been computed yet.
+     */
+    private @Nullable List<FileInArchiveFilePack> files;
+
+    /**
+     * Null while the pack archive file is not open, or while it has not been computed yet.
+     */
+    private @Nullable List<FileInArchiveFilePack> topLevelFiles;
+
+    public ArchiveFileFiddlePackFilesProvider(File packFile, boolean attemptToUse7Zip) {
+        this.packFile = packFile;
+        this.use7Zip = attemptToUse7Zip && SevenZipSupport.is7ZipAvailable();
+    }
+
+    @Override
+    public String getLocation() {
+        return this.packFile.getPath();
+    }
+
+    @Override
+    public Stream<? extends FileInPack> getTopLevelFilesStream() throws PackException {
+        return this.getTopLevelFiles().stream();
+    }
+
+    @Override
+    public List<? extends FileInPack> getTopLevelFiles() throws PackException {
+        this.readAndCacheFileStructure();
+        return this.topLevelFiles;
+    }
+
+    /**
+     * Reads the file structure from the {@link #randomAccessPackFile}
+     * and sets {@link #topLevelFiles} based on it.
+     * <br>
+     * This does nothing if the file structure has already been cached.
+     */
+    private void readAndCacheFileStructure() throws PackException {
+
+        // Do nothing if the file structure has already been cached
+        if (this.topLevelFiles != null) {
+            return;
+        }
+
+        // The archive items, in case 7-Zip-JBinding is used (otherwise will stay null)
+        ISimpleInArchiveItem[] items = null;
+        // The zip entries, in case 7-Zip-JBinding is not used (otherwise will stay null)
+        ZipEntry[] entries = null;
+        if (this.use7Zip) {
+            // Open the random access file
+            this.openRandomAccessPackFile();
+
+            // Open the file as an archive
+            IInArchive inArchive;
+            try {
+                inArchive = SevenZip.openInArchive(null, new RandomAccessFileInStream(this.randomAccessPackFile));
+            } catch (Exception e) {
+                throw new PackException("Failed to read the file for a pack ('" + this.getLocation() + "') as an archive: " + e.getMessage(), e);
+            }
+
+            // Get the items in the archive
+            try {
+                items = inArchive.getSimpleInterface().getArchiveItems();
+            } catch (Exception e) {
+                throw new PackException("Failed to read the items in the archive for a pack ('" + this.getLocation() + "'): " + e.getMessage(), e);
+            }
+        } else {
+            // Open the zip file
+            this.openZipFile();
+
+            // Get the entries in the archive
+            try {
+                entries = Iterators.toArray(this.zipFile.entries().asIterator(), ZipEntry.class);
+            } catch (IllegalStateException e) {
+                throw new PackException("Failed to read the entries in the archive for a pack ('" + this.getLocation() + "'): " + e.getMessage(), e);
+            }
+        }
+
+        // Determine the paths of the items
+        String[] itemPaths = new String[(this.use7Zip ? items : entries).length];
+        for (int i = 0; i < itemPaths.length; i++) {
+            try {
+                itemPaths[i] = this.use7Zip ? items[i].getPath() : entries[i].getName();
+            } catch (SevenZipException e) {
+                throw new PackException("Failed to determine the path of a file in an archive pack ('" + this.getLocation() + "'): " + e.getMessage(), e);
+            }
+        }
+
+        // Determine which items are folders
+        boolean[] itemIsFolder = new boolean[itemPaths.length];
+        for (int i = 0; i < itemPaths.length; i++) {
+            try {
+                itemIsFolder[i] = this.use7Zip ? items[i].isFolder() : entries[i].isDirectory();
+            } catch (SevenZipException e) {
+                throw new PackException("Failed to determine for a file ('" + itemPaths[i] + "') in an archive pack ('" + getLocation() + "') whether it is a folder: " + e.getMessage(), e);
+            }
+        }
+
+        // Create an array of the folder's indices in items
+        int[] itemIndicesOfFolders = IntStream.range(0, itemPaths.length).filter(i -> itemIsFolder[i]).toArray();
+        int[] inverseItemIndicesOfFolders = new int[itemPaths.length];
+        for (int i = 0; i < itemIndicesOfFolders.length; i++) {
+            inverseItemIndicesOfFolders[itemIndicesOfFolders[i]] = i;
+        }
+
+        // Determine which items are top-level items of a folder, or top-level items of the pack
+        IntList[] folderSubItems = new IntList[itemIndicesOfFolders.length];
+        for (int i = 0; i < folderSubItems.length; i++) {
+            folderSubItems[i] = new IntArrayList(1);
+        }
+        IntList packTopLevelItems = new IntArrayList(1);
+        int[] containingFolderItemIndexPerItem = new int[itemPaths.length];
+        Arrays.fill(containingFolderItemIndexPerItem, -1);
+        for (int itemI = 0; itemI < itemPaths.length; itemI++) {
+            String itemPath = itemPaths[itemI];
+            int folderIndexFound = -1;
+            for (int folderI = 0; folderI < itemIndicesOfFolders.length; folderI++) {
+                String folderPath = itemPaths[itemIndicesOfFolders[folderI]];
+                if (itemPath.startsWith(folderPath + "/") || itemPath.startsWith(folderPath + "\\") || itemPath.startsWith(folderPath + File.separatorChar)) {
+                    if (folderIndexFound == -1 || folderPath.length() > itemPaths[itemIndicesOfFolders[folderIndexFound]].length()) {
+                        folderIndexFound = folderI;
+                    }
+                }
+            }
+            if (folderIndexFound == -1) {
+                packTopLevelItems.add(itemI);
+            } else {
+                folderSubItems[folderIndexFound].add(itemI);
+                containingFolderItemIndexPerItem[itemI] = itemIndicesOfFolders[folderIndexFound];
+            }
+        }
+
+        // Create an array of all files, and top-level files
+        FileInArchiveFilePack[] files = new FileInArchiveFilePack[itemPaths.length];
+        List<FileInArchiveFilePack> topLevelFiles = new ArrayList<>(packTopLevelItems.size());
+        IntPriorityQueue itemIndicesToDo = new IntArrayFIFOQueue(1);
+        int[] subItemsLeft = new int[itemPaths.length];
+        for (int i = 0; i < itemPaths.length; i++) {
+            subItemsLeft[i] = itemIsFolder[i] ? folderSubItems[inverseItemIndicesOfFolders[i]].size() : 0;
+            if (subItemsLeft[i] == 0) {
+                itemIndicesToDo.enqueue(i);
+            }
+        }
+        while (!itemIndicesToDo.isEmpty()) {
+            int itemIndex = itemIndicesToDo.dequeueInt();
+            if (itemIsFolder[itemIndex]) {
+                List<FileInArchiveFilePack> folderTopLevelFiles = folderSubItems[inverseItemIndicesOfFolders[itemIndex]].intStream().mapToObj(subItemIndex -> files[subItemIndex]).toList();
+                files[itemIndex] = this.use7Zip ? new DirectoryInArchiveFilePack(this, items[itemIndex], folderTopLevelFiles) : new DirectoryInArchiveFilePack(this, entries[itemIndex], folderTopLevelFiles);
+            } else {
+                files[itemIndex] = this.use7Zip ? new RegularFileInArchiveFilePack(this, items[itemIndex]) : new RegularFileInArchiveFilePack(this, this.zipFile, entries[itemIndex]);
+            }
+            if (containingFolderItemIndexPerItem[itemIndex] == -1) {
+                topLevelFiles.add(files[itemIndex]);
+            } else {
+                if (--subItemsLeft[containingFolderItemIndexPerItem[itemIndex]] == 0) {
+                    itemIndicesToDo.enqueue(containingFolderItemIndexPerItem[itemIndex]);
+                }
+            }
+        }
+
+        // Set the fields
+        this.topLevelFiles = FileInPack.filterOutSystemFilesAndDirectories(topLevelFiles.stream()).toList();
+        this.files = Arrays.asList(files);
+
+    }
+
+    /**
+     * Sets {@link #randomAccessPackFile} as an opened {@link RandomAccessFile} for this pack's {@link #packFile}.
+     * <br>
+     * This does nothing if a {@link #randomAccessPackFile} is already open.
+     */
+    private void openRandomAccessPackFile() throws PackException {
+        if (this.randomAccessPackFile != null) {
+            return;
+        }
+        try {
+            this.randomAccessPackFile = new RandomAccessFile(this.packFile, "r");
+        } catch (Exception e) {
+            throw new PackException("Failed to open the archive file for a pack as a random access file ('" + this.getLocation() + "'): " + e.getMessage(), e);
+        }
+    }
+
+    /**
+     * Sets {@link #zipFile} as an opened {@link ZipFile} for this pack's {@link #packFile}.
+     * <br>
+     * This does nothing if a {@link #zipFile} is already open.
+     */
+    private void openZipFile() throws PackException {
+        if (this.zipFile != null) {
+            return;
+        }
+        try {
+            this.zipFile = new ZipFile(this.packFile);
+        } catch (Exception e) {
+            throw new PackException("Failed to open the archive file for a pack as a zip file ('" + this.getLocation() + "'): " + e.getMessage(), e);
+        }
+    }
+
+    @Override
+    public void closeHandlesAndClearCache() {
+        if (this.files != null) {
+            for (FileInArchiveFilePack file : this.files) {
+                if (file instanceof RegularFileInPack regularFile) {
+                    regularFile.clearCachedBytes();
+                }
+            }
+            this.files = null;
+        }
+        this.topLevelFiles = null;
+        if (this.randomAccessPackFile != null) {
+            try {
+                this.randomAccessPackFile.close();
+            } catch (Exception e) {
+                LOGGER.warn("An exception occurred while closing the random access file handle for an archive pack:", e);
+            }
+            this.randomAccessPackFile = null;
+        }
+        if (this.zipFile != null) {
+            try {
+                this.zipFile.close();
+            } catch (Exception e) {
+                LOGGER.warn("An exception occurred while closing the zip file handle for an archive pack:", e);
+            }
+            this.zipFile = null;
+        }
+    }
+
+}
diff --git a/src/main/java/org/fiddlemc/fiddle/pack/read/filesprovider/archive/DirectoryInArchiveFilePack.java b/src/main/java/org/fiddlemc/fiddle/pack/read/filesprovider/archive/DirectoryInArchiveFilePack.java
new file mode 100644
index 0000000000000000000000000000000000000000..f00f7e4ed37f90f3c36aefab15c31536fcd887e8
--- /dev/null
+++ b/src/main/java/org/fiddlemc/fiddle/pack/read/filesprovider/archive/DirectoryInArchiveFilePack.java
@@ -0,0 +1,61 @@
+// Fiddle - read packs - pack files - archive file packs
+
+package org.fiddlemc.fiddle.pack.read.filesprovider.archive;
+
+import net.sf.sevenzipjbinding.simple.ISimpleInArchiveItem;
+import org.fiddlemc.fiddle.pack.read.filesprovider.DirectoryInPack;
+import org.fiddlemc.fiddle.pack.read.filesprovider.FileInPack;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.List;
+import java.util.stream.Stream;
+import java.util.zip.ZipEntry;
+
+class DirectoryInArchiveFilePack implements DirectoryInPack, FileInArchiveFilePack {
+
+    private final ArchiveFileFiddlePackFilesProvider filesProvider;
+    private final @Nullable ISimpleInArchiveItem item;
+    private final @Nullable ZipEntry entry;
+    private final List<FileInArchiveFilePack> topLevelFiles;
+
+    private DirectoryInArchiveFilePack(ArchiveFileFiddlePackFilesProvider filesProvider, @Nullable ISimpleInArchiveItem item, @Nullable ZipEntry entry, List<FileInArchiveFilePack> topLevelFiles) {
+        this.filesProvider = filesProvider;
+        this.item = item;
+        this.entry = entry;
+        this.topLevelFiles = FileInPack.filterOutSystemFilesAndDirectories(topLevelFiles.stream()).toList();
+    }
+
+    DirectoryInArchiveFilePack(ArchiveFileFiddlePackFilesProvider filesProvider, ISimpleInArchiveItem item, List<FileInArchiveFilePack> topLevelFiles) {
+        this(filesProvider, item, null, topLevelFiles);
+    }
+
+    DirectoryInArchiveFilePack(ArchiveFileFiddlePackFilesProvider filesProvider, ZipEntry entry, List<FileInArchiveFilePack> topLevelFiles) {
+        this(filesProvider, null, entry, topLevelFiles);
+    }
+
+    @Override
+    public ArchiveFileFiddlePackFilesProvider getFilesProvider() {
+        return this.filesProvider;
+    }
+
+    @Override
+    public @Nullable ISimpleInArchiveItem getItem() {
+        return this.item;
+    }
+
+    @Override
+    public @Nullable ZipEntry getEntry() {
+        return this.entry;
+    }
+
+    @Override
+    public Stream<FileInArchiveFilePack> getTopLevelFilesStream() {
+        return this.topLevelFiles.stream();
+    }
+
+    @Override
+    public List<FileInArchiveFilePack> getTopLevelFiles() {
+        return this.topLevelFiles;
+    }
+
+}
diff --git a/src/main/java/org/fiddlemc/fiddle/pack/read/filesprovider/archive/FileInArchivePack.java b/src/main/java/org/fiddlemc/fiddle/pack/read/filesprovider/archive/FileInArchivePack.java
new file mode 100644
index 0000000000000000000000000000000000000000..c592612d54a0b1b2ef8ae48d467efe8b8db1df2d
--- /dev/null
+++ b/src/main/java/org/fiddlemc/fiddle/pack/read/filesprovider/archive/FileInArchivePack.java
@@ -0,0 +1,44 @@
+// Fiddle - read packs - pack files - archive file packs
+
+package org.fiddlemc.fiddle.pack.read.filesprovider.archive;
+
+import net.sf.sevenzipjbinding.SevenZipException;
+import net.sf.sevenzipjbinding.simple.ISimpleInArchiveItem;
+import org.fiddlemc.fiddle.pack.read.filesprovider.FiddlePackFilesProvider;
+import org.fiddlemc.fiddle.pack.read.filesprovider.FileInPack;
+import org.fiddlemc.fiddle.pack.exception.PackException;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.zip.ZipEntry;
+
+interface FileInArchiveFilePack extends FileInPack {
+
+    ArchiveFileFiddlePackFilesProvider getFilesProvider();
+
+    /**
+     * @return The archive item, if 7-Zip-JBinding is used,
+     * or null otherwise.
+     */
+    @Nullable ISimpleInArchiveItem getItem();
+
+    /**
+     * @return The zip entry, if 7-Zip-JBinding is not used,
+     * or null otherwise.
+     */
+    @Nullable ZipEntry getEntry();
+
+    default String getPathInArchive() throws PackException {
+        try {
+            var item = this.getItem();
+            return item != null ? item.getPath() : this.getEntry().getName();
+        } catch (SevenZipException e) {
+            throw new PackException("Failed to get the name of a file in a pack archive ('" + this.getFilesProvider().getLocation() + "'): " + e.getMessage(), e);
+        }
+    }
+
+    @Override
+    default String getName() throws PackException {
+        return FiddlePackFilesProvider.getNameFromPath(this.getPathInArchive());
+    }
+
+}
diff --git a/src/main/java/org/fiddlemc/fiddle/pack/read/filesprovider/archive/RegularFileInArchivePack.java b/src/main/java/org/fiddlemc/fiddle/pack/read/filesprovider/archive/RegularFileInArchivePack.java
new file mode 100644
index 0000000000000000000000000000000000000000..5a791721c650be435cc32ef945043622393a594f
--- /dev/null
+++ b/src/main/java/org/fiddlemc/fiddle/pack/read/filesprovider/archive/RegularFileInArchivePack.java
@@ -0,0 +1,106 @@
+// Fiddle - read packs - pack files - archive file packs
+
+package org.fiddlemc.fiddle.pack.read.filesprovider.archive;
+
+import it.unimi.dsi.fastutil.bytes.ByteArrayList;
+import it.unimi.dsi.fastutil.bytes.ByteList;
+import net.sf.sevenzipjbinding.ExtractOperationResult;
+import net.sf.sevenzipjbinding.SevenZipException;
+import net.sf.sevenzipjbinding.simple.ISimpleInArchiveItem;
+import org.fiddlemc.fiddle.pack.read.filesprovider.CachingRegularFileInPack;
+import org.fiddlemc.fiddle.pack.exception.PackException;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.zip.ZipEntry;
+import java.util.zip.ZipFile;
+
+class RegularFileInArchiveFilePack extends CachingRegularFileInPack implements FileInArchiveFilePack {
+
+    private final ArchiveFileFiddlePackFilesProvider filesProvider;
+    private final @Nullable ISimpleInArchiveItem item;
+    private final @Nullable ZipFile zipFile;
+    private final @Nullable ZipEntry entry;
+
+    RegularFileInArchiveFilePack(ArchiveFileFiddlePackFilesProvider filesProvider, @Nullable ISimpleInArchiveItem item, @Nullable ZipFile zipFile, @Nullable ZipEntry entry) {
+        this.filesProvider = filesProvider;
+        this.item = item;
+        this.zipFile = zipFile;
+        this.entry = entry;
+    }
+
+    RegularFileInArchiveFilePack(ArchiveFileFiddlePackFilesProvider filesProvider, ISimpleInArchiveItem item) {
+        this(filesProvider, item, null, null);
+    }
+
+    RegularFileInArchiveFilePack(ArchiveFileFiddlePackFilesProvider filesProvider, ZipFile zipFile, ZipEntry entry) {
+        this(filesProvider, null, zipFile, entry);
+    }
+
+    @Override
+    public ArchiveFileFiddlePackFilesProvider getFilesProvider() {
+        return this.filesProvider;
+    }
+
+    @Override
+    public @Nullable ISimpleInArchiveItem getItem() {
+        return this.item;
+    }
+
+    @Override
+    public @Nullable ZipEntry getEntry() {
+        return this.entry;
+    }
+
+    @Override
+    protected byte[] readBytes() throws PackException {
+        // Get the size
+        Long size;
+        try {
+            size = this.item != null ? this.item.getSize() : this.entry.getSize();
+        } catch (SevenZipException e) {
+            throw new PackException("An exception occurred while getting the size of a file ('" + this.getPathInArchive() + "') in a pack archive ('" + this.filesProvider.getLocation() + "'): " + e.getMessage(), e);
+        }
+        // Verify the size is within limits
+        if (size != null && size > Integer.MAX_VALUE - 8) {
+            throw new PackException("A file ('" + this.getPathInArchive() + "') in a pack archive ('" + this.filesProvider.getLocation() + "' is too large: " + size + " bytes");
+        }
+        // Read the bytes
+        byte[] bytes;
+        try {
+            if (this.item != null) {
+                final byte @Nullable [] readBytes;
+                final int[] bytesIndex = {0};
+                final @Nullable ByteList readByteList;
+                if (size != null && size >= 0) {
+                    readBytes = new byte[size.intValue()];
+                    readByteList = null;
+                } else {
+                    readBytes = null;
+                    readByteList = new ByteArrayList(2048);
+                }
+                ExtractOperationResult result = this.item.extractSlow(data -> {
+                    if (readBytes != null) {
+                        System.arraycopy(data, 0, readBytes, bytesIndex[0], data.length);
+                        bytesIndex[0] += data.length;
+                    } else {
+                        for (byte value : data) {
+                            readByteList.add(value);
+                        }
+                    }
+                    return data.length;
+                });
+                if (result != ExtractOperationResult.OK) {
+                    throw new PackException("Reading bytes from a file ('" + this.getPathInArchive() + "') in a pack archive ('" + this.filesProvider.getLocation() + "' failed: " + result);
+                }
+                bytes = readBytes != null ? readBytes : readByteList.toArray(new byte[0]);
+            } else {
+                var inputStream = this.zipFile.getInputStream(this.entry);
+                bytes = inputStream.readAllBytes();
+            }
+        } catch (Exception e) {
+            throw new PackException("An exception occurred while reading bytes from a file ('" + this.getPathInArchive() + "') in a pack archive ('" + this.filesProvider.getLocation() + "': " + e.getMessage(), e);
+        }
+        return bytes;
+    }
+
+}
