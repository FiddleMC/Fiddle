From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Sun, 4 Jun 2023 11:31:53 +0200
Subject: [PATCH] Modify Bukkit enums - Remove hard-coded values - Is block, is
 edible, is record, is solid, is air, is flammable, is burnable, is fuel, is
 occluding, has gravity, is item, is interactable, block hardness, block blast
 resistance, block slipperiness, item crafting remaining item, item equipment
 slot

License: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)
Fiddle - https://fiddlemc.org

diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
index b4ce020c8f8a67369a3f779752dbd24a00172d0e..55b4a9ca9704ce43a6e1babba6a3f773da5ac2b3 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
@@ -25,6 +25,7 @@ import java.util.logging.Level;
 import java.util.logging.Logger;
 import net.minecraft.SharedConstants;
 import net.minecraft.advancements.critereon.DeserializationContext;
+import net.minecraft.core.BlockPos;
 import net.minecraft.core.registries.BuiltInRegistries;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.NbtOps;
@@ -37,10 +38,21 @@ import net.minecraft.server.ServerAdvancementManager;
 import net.minecraft.util.GsonHelper;
 import net.minecraft.util.datafix.DataFixers;
 import net.minecraft.util.datafix.fixes.References;
+import net.minecraft.world.InteractionHand;
+import net.minecraft.world.entity.Mob;
+import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.Item;
+import net.minecraft.world.item.RecordItem;
+import net.minecraft.world.level.EmptyBlockGetter;
 import net.minecraft.world.level.block.Block;
+import net.minecraft.world.level.block.Blocks;
+import net.minecraft.world.level.block.FallingBlock;
+import net.minecraft.world.level.block.FireBlock;
+import net.minecraft.world.level.block.entity.AbstractFurnaceBlockEntity;
+import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.storage.LevelResource;
+import net.minecraft.world.phys.BlockHitResult;
 import org.bukkit.Bukkit;
 import org.bukkit.FeatureFlag;
 import org.bukkit.Fluid;
@@ -67,6 +79,8 @@ import org.bukkit.inventory.ItemStack;
 import org.bukkit.material.MaterialData;
 import org.bukkit.plugin.InvalidPluginException;
 import org.bukkit.plugin.PluginDescriptionFile;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 
 @SuppressWarnings("deprecation")
 public final class CraftMagicNumbers implements UnsafeValues {
@@ -654,4 +668,154 @@ public final class CraftMagicNumbers implements UnsafeValues {
         public static final int TAG_INT_ARRAY = 11;
         public static final int TAG_ANY_NUMBER = 99;
     }
+
+    // Fiddle start - remove hard-coded Bukkit values - Material - is block
+    @Override
+    public boolean isBlock(Material material) {
+        if (material.isAir()) {
+            return true;
+        }
+        // Based on org.bukkit.PerMaterialTest#isBlock
+        return getBlock(material) != null;
+    }
+    // Fiddle end - remove hard-coded Bukkit values - Material - is block
+
+    // Fiddle start - remove hard-coded Bukkit values - Material - is edible
+    @Override
+    public boolean isEdible(Material material) {
+        // Based on org.bukkit.PerMaterialTest#isEdible
+        return !material.isBlock() && getItem(material).isEdible();
+    }
+    // Fiddle end - remove hard-coded Bukkit values - Material - is edible
+
+    // Fiddle start - remove hard-coded Bukkit values - Material - is record
+    @Override
+    public boolean isRecord(Material material) {
+        // Based on org.bukkit.PerMaterialTest#isRecord
+        return getItem(material) instanceof RecordItem;
+    }
+    // Fiddle end - remove hard-coded Bukkit values - Material - is record
+
+    // Fiddle start - remove hard-coded Bukkit values - Material - is solid
+    @Override
+    public boolean isSolid(Material material) {
+        // Based on org.bukkit.PerMaterialTest#isSolid
+        return material != Material.AIR && material.isBlock() && getBlock(material).defaultBlockState().blocksMotion();
+    }
+    // Fiddle end - remove hard-coded Bukkit values - Material - is solid
+
+    // Fiddle start - remove hard-coded Bukkit values - Material - is air
+    @Override
+    public boolean isAir(Material material) {
+        // Based on org.bukkit.PerMaterialTest#testAir
+        return material.isBlock() && getBlock(material).defaultBlockState().isAir();
+    }
+    // Fiddle end - remove hard-coded Bukkit values - Material - is air
+
+    // Fiddle start - remove hard-coded Bukkit values - Material - is flammable
+    @Override
+    public boolean isFlammable(Material material) {
+        // Based on org.bukkit.PerMaterialTest#isFlammable
+        return material != Material.AIR && material.isBlock() && getBlock(material).defaultBlockState().ignitedByLava();
+    }
+    // Fiddle end - remove hard-coded Bukkit values - Material - is flammable
+
+    // Fiddle start - remove hard-coded Bukkit values - Material - is burnable
+    @Override
+    public boolean isBurnable(Material material) {
+        // Based on org.bukkit.PerMaterialTest#isBurnable
+        return material.isBlock() && ((FireBlock) Blocks.FIRE).igniteOdds.getOrDefault(CraftMagicNumbers.getBlock(material), 0) > 0;
+    }
+    // Fiddle end - remove hard-coded Bukkit values - Material - is burnable
+
+    // Fiddle start - remove hard-coded Bukkit values - Material - is fuel
+    @Override
+    public boolean isFuel(Material material) {
+        // Based on org.bukkit.PerMaterialTest#isFuel
+        return material.isItem() && AbstractFurnaceBlockEntity.isFuel(new net.minecraft.world.item.ItemStack(getItem(material)));
+    }
+    // Fiddle end - remove hard-coded Bukkit values - Material - is fuel
+
+    // Fiddle start - remove hard-coded Bukkit values - Material - is occluding
+    @Override
+    public boolean isOccluding(Material material) {
+        // Based on org.bukkit.PerMaterialTest#isOccluding
+        return material.isBlock() && getBlock(material).defaultBlockState().isRedstoneConductor(EmptyBlockGetter.INSTANCE, BlockPos.ZERO);
+    }
+    // Fiddle end - remove hard-coded Bukkit values - Material - is occluding
+
+    // Fiddle start - remove hard-coded Bukkit values - Material - has gravity
+    @Override
+    public boolean hasGravity(Material material) {
+        // Based on org.bukkit.PerMaterialTest#hasGravity
+        return material.isBlock() && getBlock(material) instanceof FallingBlock;
+    }
+    // Fiddle end - remove hard-coded Bukkit values - Material - has gravity
+
+    // Fiddle start - remove hard-coded Bukkit values - Material - is item
+    @Override
+    public boolean isItem(Material material) {
+        // Based on org.bukkit.PerMaterialTest#testItem
+        return material == Material.AIR || getItem(material) != null;
+    }
+    // Fiddle end - remove hard-coded Bukkit values - Material - is item
+
+    // Fiddle start - remove hard-coded Bukkit values - Material - is interactable
+    @Override
+    public boolean isInteractable(Material material) {
+        // Based on org.bukkit.PerMaterialTest#testInteractable
+        if (material.isBlock()) {
+            try {
+                return !getBlock(material).getClass()
+                    .getMethod("use", BlockState.class, net.minecraft.world.level.Level.class, BlockPos.class, Player.class, InteractionHand.class, BlockHitResult.class)
+                    .getDeclaringClass().equals(BlockBehaviour.class);
+            } catch (NoSuchMethodException e) {
+                return false;
+            }
+        }
+        return false;
+    }
+    // Fiddle end - remove hard-coded Bukkit values - Material - is interactable
+
+    // Fiddle start - remove hard-coded Bukkit values - Material - block hardness
+    @Override
+    public float getBlockHardness(Material blockMaterial) {
+        // Based on org.bukkit.PerMaterialTest#testBlockHardness
+        return getBlock(blockMaterial).defaultBlockState().destroySpeed;
+    }
+    // Fiddle end - remove hard-coded Bukkit values - Material - block hardness
+
+    // Fiddle start - remove hard-coded Bukkit values - Material - block blast resistance
+    @Override
+    public float getBlockBlastResistance(Material blockMaterial) {
+        // Based on org.bukkit.PerMaterialTest#testBlastResistance
+        return getBlock(blockMaterial).getExplosionResistance();
+    }
+    // Fiddle end - remove hard-coded Bukkit values - Material - block blast resistance
+
+    // Fiddle start - remove hard-coded Bukkit values - Material - block slipperiness
+    @Override
+    public float getBlockSlipperiness(Material blockMaterial) {
+        // Based on org.bukkit.PerMaterialTest#testSlipperiness
+        return getBlock(blockMaterial).getFriction();
+    }
+    // Fiddle end - remove hard-coded Bukkit values - Material - block slipperiness
+
+    // Fiddle start - remove hard-coded Bukkit values - Material - item crafting remaining item
+    @Override
+    public @Nullable Material getItemCraftingRemainingItem(Material itemMaterial) {
+        // Based on org.bukkit.PerMaterialTest#testCraftingRemainingItem
+        @Nullable Item expectedItem = getItem(itemMaterial).getCraftingRemainingItem();
+        return expectedItem == null ? null : getMaterial(expectedItem);
+    }
+    // Fiddle end - remove hard-coded Bukkit values - Material - item crafting remaining item
+
+    // Fiddle start - remove hard-coded Bukkit values - Material - item equipment slot
+    @Override
+    public @NotNull EquipmentSlot getItemEquipmentSlot(Material itemMaterial) {
+        // Based on org.bukkit.PerMaterialTest#testEquipmentSlot
+        return CraftEquipmentSlot.getSlot(Mob.getEquipmentSlotForItem(CraftItemStack.asNMSCopy(new ItemStack(itemMaterial))));
+    }
+    // Fiddle end - remove hard-coded Bukkit values - Material - item equipment slot
+
 }
