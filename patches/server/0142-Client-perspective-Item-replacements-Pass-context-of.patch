From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Sat, 22 Jul 2023 21:48:49 +0200
Subject: [PATCH] Client perspective - Item replacements - Pass context of
 items in item frames

License: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)
Fiddle - https://fiddlemc.org

diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetEntityDataPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetEntityDataPacket.java
index debb34a8f99c5b1356a3f742ae34a002c375f1e8..7cc4a5805b1e4f2df555b8ed4280123fea86e7c0 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetEntityDataPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetEntityDataPacket.java
@@ -10,11 +10,15 @@ import net.minecraft.network.syncher.SynchedEntityData;
 public class ClientboundSetEntityDataPacket extends org.fiddlemc.fiddle.packet.PacketWithExplicitTargetClientConnection<ClientGamePacketListener> {
     private final int id;
     private final List<SynchedEntityData.DataValue<?>> packedItems;
+    // Fiddle start - client perspective - item replacements - pass context of items in item frames
+    private final @org.jetbrains.annotations.Nullable org.fiddlemc.fiddle.packet.item.ItemStackInPacketContext itemStackContext;
 
-    public ClientboundSetEntityDataPacket(int id, List<SynchedEntityData.DataValue<?>> packedItems) {
+    public ClientboundSetEntityDataPacket(int id, List<SynchedEntityData.DataValue<?>> packedItems, @org.jetbrains.annotations.NotNull org.fiddlemc.fiddle.packet.item.ItemStackInPacketContext itemStackContext) {
+        // Fiddle end - client perspective - item replacements - pass context of items in item frames
         super();
         this.id = id;
         this.packedItems = packedItems;
+        this.itemStackContext = itemStackContext; // Fiddle - client perspective - item replacements - pass context of items in item frames
     }
 
     public int id() {
@@ -29,12 +33,12 @@ public class ClientboundSetEntityDataPacket extends org.fiddlemc.fiddle.packet.P
     public static final int EOF_MARKER = 255;
 
     public ClientboundSetEntityDataPacket(FriendlyByteBuf buf) {
-        this(buf.readVarInt(), unpack(buf));
+        this(buf.readVarInt(), unpack(buf), null); // Fiddle - client perspective - item replacements - pass context of items in item frames
     }
 
-    private static void pack(List<SynchedEntityData.DataValue<?>> trackedValues, FriendlyByteBuf buf) {
+    private static void pack(List<SynchedEntityData.DataValue<?>> trackedValues, FriendlyByteBuf buf, @org.jetbrains.annotations.Nullable org.fiddlemc.fiddle.packet.item.ItemStackInPacketContext itemStackContext) { // Fiddle - client perspective - item replacements - pass context of items in item frames
         for(SynchedEntityData.DataValue<?> dataValue : trackedValues) {
-            dataValue.write(buf);
+            dataValue.write(buf, itemStackContext); // Fiddle - client perspective - item replacements - pass context of items in item frames
         }
 
         buf.writeByte(255);
@@ -54,7 +58,7 @@ public class ClientboundSetEntityDataPacket extends org.fiddlemc.fiddle.packet.P
     @Override
     public void write(FriendlyByteBuf buf) {
         buf.writeVarInt(this.id);
-        pack(this.packedItems, buf);
+        pack(this.packedItems, buf, this.itemStackContext); // Fiddle - client perspective - item replacements - pass context of items in item frames
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/network/syncher/EntityDataSerializers.java b/src/main/java/net/minecraft/network/syncher/EntityDataSerializers.java
index 06498788c169133bd563c5a87192b71802c4d4df..133fafa48e305c5ac990d05e5c7ec430d9707370 100644
--- a/src/main/java/net/minecraft/network/syncher/EntityDataSerializers.java
+++ b/src/main/java/net/minecraft/network/syncher/EntityDataSerializers.java
@@ -39,10 +39,20 @@ public class EntityDataSerializers {
     public static final EntityDataSerializer<String> STRING = EntityDataSerializer.simple(FriendlyByteBuf::writeUtf, FriendlyByteBuf::readUtf);
     public static final EntityDataSerializer<Component> COMPONENT = EntityDataSerializer.simple(FriendlyByteBuf::writeComponent, FriendlyByteBuf::readComponentTrusted);
     public static final EntityDataSerializer<Optional<Component>> OPTIONAL_COMPONENT = EntityDataSerializer.optional(FriendlyByteBuf::writeComponent, FriendlyByteBuf::readComponentTrusted);
-    public static final EntityDataSerializer<ItemStack> ITEM_STACK = new EntityDataSerializer<ItemStack>() {
+    // Fiddle start - client perspective - item replacements - pass context of items in item frames
+    public static abstract class ItemStackEntityDataSerializer implements EntityDataSerializer<ItemStack> {
+
+        public void write(FriendlyByteBuf buf, ItemStack value, org.fiddlemc.fiddle.packet.item.ItemStackInPacketContext itemStackInPacketContext) {
+            var sanitizedItemStack = net.minecraft.world.entity.LivingEntity.sanitizeItemStack(value, true);
+            buf.writeItem(sanitizedItemStack, itemStackInPacketContext); // Paper start - prevent oversized data
+        }
+
+    }
+    public static final EntityDataSerializer<ItemStack> ITEM_STACK = new ItemStackEntityDataSerializer() {
+        // Fiddle end - client perspective - item replacements - pass context of items in item frames
         @Override
         public void write(FriendlyByteBuf buf, ItemStack value) {
-            buf.writeItem(net.minecraft.world.entity.LivingEntity.sanitizeItemStack(value, true)); // Paper - prevent oversized data
+            throw new UnsupportedOperationException(); // Fiddle - client perspective - item replacements - pass context of items in item frames
         }
 
         @Override
diff --git a/src/main/java/net/minecraft/network/syncher/SynchedEntityData.java b/src/main/java/net/minecraft/network/syncher/SynchedEntityData.java
index a043c382c37058032548a5192e17f5f816abe5a6..8ab2c370ebe5f9dc432c5ea86610ea74cf27744f 100644
--- a/src/main/java/net/minecraft/network/syncher/SynchedEntityData.java
+++ b/src/main/java/net/minecraft/network/syncher/SynchedEntityData.java
@@ -279,7 +279,7 @@ public class SynchedEntityData {
 
             if (list != null) {
                 if (to.getBukkitEntity().canSee(this.entity.getBukkitEntity())) { // Paper
-                to.connection.send(new ClientboundSetEntityDataPacket(this.entity.getId(), list));
+                to.connection.send(new ClientboundSetEntityDataPacket(this.entity.getId(), list, this.entity.getItemStackInPacketContext())); // Fiddle - client perspective - item replacements - pass context of items in item frames
                 } // Paper
             }
         }
@@ -329,7 +329,7 @@ public class SynchedEntityData {
             values.add(synchedValue.value());
         }
 
-        to.connection.send(new ClientboundSetEntityDataPacket(this.entity.getId(), values));
+        to.connection.send(new ClientboundSetEntityDataPacket(this.entity.getId(), values, this.entity.getItemStackInPacketContext())); // Fiddle - client perspective - item replacements - pass context of items in item frames
     }
     // Paper end
 
@@ -383,7 +383,7 @@ public class SynchedEntityData {
             return new SynchedEntityData.DataValue<>(data.getId(), datawatcherserializer, datawatcherserializer.copy(value));
         }
 
-        public void write(FriendlyByteBuf buf) {
+        public void write(FriendlyByteBuf buf, @Nullable org.fiddlemc.fiddle.packet.item.ItemStackInPacketContext itemStackInPacketContext) { // Fiddle - client perspective - item replacements - pass context of items in item frames
             int i = EntityDataSerializers.getSerializedId(this.serializer);
 
             if (i < 0) {
@@ -391,7 +391,13 @@ public class SynchedEntityData {
             } else {
                 buf.writeByte(this.id);
                 buf.writeVarInt(i);
-                this.serializer.write(buf, this.value);
+                // Fiddle start - client perspective - item replacements - pass context of items in item frames
+                if (this.serializer instanceof EntityDataSerializers.ItemStackEntityDataSerializer itemStackSerializer) {
+                    itemStackSerializer.write(buf, (net.minecraft.world.item.ItemStack) this.value, Objects.requireNonNull(itemStackInPacketContext));
+                } else {
+                    this.serializer.write(buf, this.value);
+                }
+                // Fiddle end - client perspective - item replacements - pass context of items in item frames
             }
         }
 
diff --git a/src/main/java/net/minecraft/server/level/ServerEntity.java b/src/main/java/net/minecraft/server/level/ServerEntity.java
index 35674f92a67f93382103c2766df4b678ba5c862f..250d529ed8043b69e7eebbf9c73bcc92239454ab 100644
--- a/src/main/java/net/minecraft/server/level/ServerEntity.java
+++ b/src/main/java/net/minecraft/server/level/ServerEntity.java
@@ -297,7 +297,7 @@ public class ServerEntity {
         this.yHeadRotp = Mth.floor(this.entity.getYHeadRot() * 256.0F / 360.0F);
         sender.accept(packet);
         if (this.trackedDataValues != null) {
-            sender.accept(new ClientboundSetEntityDataPacket(this.entity.getId(), this.trackedDataValues));
+            sender.accept(new ClientboundSetEntityDataPacket(this.entity.getId(), this.trackedDataValues, this.entity.getItemStackInPacketContext())); // Fiddle - client perspective - item replacements - pass context of items in item frames
         }
 
         boolean flag = this.trackDelta;
@@ -374,7 +374,7 @@ public class ServerEntity {
 
         if (list != null) {
             this.trackedDataValues = datawatcher.getNonDefaultValues();
-            this.broadcastAndSend(new ClientboundSetEntityDataPacket(this.entity.getId(), list));
+            this.broadcastAndSend(new ClientboundSetEntityDataPacket(this.entity.getId(), list, this.entity.getItemStackInPacketContext())); // Fiddle - client perspective - item replacements - pass context of items in item frames
         }
 
         if (this.entity instanceof LivingEntity) {
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 26ee8f19a3f7d722060170c4e2c5c1aa8c03d28d..6574f0eaaa255bbb88ed147d0843c97c612344fb 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -4922,4 +4922,11 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource, S
         return ((net.minecraft.server.level.ServerChunkCache) level.getChunkSource()).isPositionTicking(this);
     }
     // Paper end
+
+    // Fiddle start - client perspective - item replacements - pass context of items in item frames
+    public org.fiddlemc.fiddle.packet.item.ItemStackInPacketContext getItemStackInPacketContext() {
+        return org.fiddlemc.fiddle.packet.item.ItemStackInPacketContext.DEFAULT;
+    }
+    // Fiddle end - client perspective - item replacements - pass context of items in item frames
+
 }
diff --git a/src/main/java/net/minecraft/world/entity/decoration/ItemFrame.java b/src/main/java/net/minecraft/world/entity/decoration/ItemFrame.java
index 69912c5b300b67394dce3876d2d96872033cf156..6184b01f036534a8927e1195a14313b329c092b8 100644
--- a/src/main/java/net/minecraft/world/entity/decoration/ItemFrame.java
+++ b/src/main/java/net/minecraft/world/entity/decoration/ItemFrame.java
@@ -544,4 +544,12 @@ public class ItemFrame extends HangingEntity {
 
         return (float) Mth.wrapDegrees(180 + enumdirection.get2DDataValue() * 90 + this.getRotation() * 45 + i);
     }
+
+    // Fiddle start - client perspective - item replacements - pass context of items in item frames
+    @Override
+    public org.fiddlemc.fiddle.packet.item.ItemStackInPacketContext getItemStackInPacketContext() {
+        return org.fiddlemc.fiddle.packet.item.ItemStackInPacketContext.IN_ITEM_FRAME;
+    }
+    // Fiddle end - client perspective - item replacements - pass context of items in item frames
+
 }
