From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Mon, 15 May 2023 20:48:34 +0200
Subject: [PATCH] Read packs - Parse pack meta from JSON

License: Fiddle Public License Agreement 1.0 (included in license/FPL-1.0.txt)
Fiddle - https://fiddlemc.org

diff --git a/src/main/java/org/fiddlemc/fiddle/pack/FiddlePackMeta.java b/src/main/java/org/fiddlemc/fiddle/pack/FiddlePackMeta.java
index ff299425ded226ac3610b2aa1017a8ea35b1f660..37dfeea15e81bcf373e9ccabf83ab98d17678929 100644
--- a/src/main/java/org/fiddlemc/fiddle/pack/FiddlePackMeta.java
+++ b/src/main/java/org/fiddlemc/fiddle/pack/FiddlePackMeta.java
@@ -3,6 +3,10 @@
 package org.fiddlemc.fiddle.pack;
 
 import com.google.gson.JsonElement;
+import it.unimi.dsi.fastutil.ints.IntArraySet;
+import it.unimi.dsi.fastutil.ints.IntSet;
+import org.fiddlemc.fiddle.pack.read.PackParseException;
+import org.fiddlemc.fiddle.pack.read.json.NamedJsonElement;
 import org.jetbrains.annotations.Nullable;
 
 import java.util.Objects;
@@ -15,6 +19,43 @@ import java.util.UUID;
  */
 public class FiddlePackMeta {
 
+    // Fiddle start - read packs - parse meta from JSON
+    private static final int maxFormat = 1;
+    private static final IntSet supportedResourcePackFormats = new IntArraySet(new int[]{13});
+    private static final IntSet supportedDataPackFormats = new IntArraySet(new int[]{12});
+
+    private static final int displayNameMaxLength = 255;
+    private static final int technicalNameMaxLength = 191;
+    private static final int versionMaxLength = 191;
+    private static final int descriptionMaxLength = 262143;
+    private static final int authorMaxLength = 511;
+    private static final int creditsNameMaxLength = 511;
+    private static final int creditsRoleMaxLength = 4095;
+    private static final int websiteMaxLength = 4095;
+    private static final int resourcePackMetaDescriptionMaxLength = 262143;
+
+    private static final String packJsonKey = "pack";
+    private static final String formatJsonKey = "format";
+    private static final String uuidJsonKey = "uuid";
+    private static final String displayNameJsonKey = "display_name";
+    private static final String technicalNameJsonKey = "technical_name";
+    private static final String versionJsonKey = "version";
+    private static final String descriptionJsonKey = "description";
+    private static final String authorsJsonKey = "authors";
+    private static final String creditsJsonKey = "credits";
+    private static final String creditsNameJsonKey = "name";
+    private static final String creditsRoleJsonKey = "role";
+    private static final String websiteJsonKey = "website";
+    private static final String resourcePackMetaJsonKey = "resource_pack_meta";
+    private static final String resourcePackMetaPackJsonKey = "pack";
+    private static final String resourcePackMetaFormatJsonKey = "pack_format";
+    private static final String resourcePackMetaDescriptionJsonKey = "description";
+    private static final String dataPackMetaJsonKey = "data_pack_meta";
+    private static final String dataPackMetaPackJsonKey = "pack";
+    private static final String dataPackMetaFormatJsonKey = "pack_format";
+    private static final String dataPackMetaDescriptionJsonKey = "description";
+    // Fiddle end - read packs - parse meta from JSON
+
     @SuppressWarnings({"FieldCanBeLocal", "unused"})
     private final int givenFormat;
     public final UUID uuid;
@@ -102,4 +143,87 @@ public class FiddlePackMeta {
 
     }
 
+    // Fiddle start - read packs - parse meta from JSON
+    private static void enforceSupportedSubFormat(String subName, int format, IntSet supportedFormats) throws PackParseException {
+        if (supportedFormats.contains(format)) {
+            return;
+        }
+        if (format < 1) {
+            throw new PackParseException("Invalid " + subName + " format: " + format);
+        }
+        @SuppressWarnings("OptionalGetWithoutIsPresent")
+        var minSupportedFormat = supportedFormats.intStream().min().getAsInt();
+        if (format < minSupportedFormat) {
+            throw new PackParseException("The " + subName + " format (" + format + ") is older than the minimum that Fiddle has ever been able to read (" + minSupportedFormat + "). Please request the author of the pack to update the contained " + subName + " and raise the format number.");
+        }
+        @SuppressWarnings("OptionalGetWithoutIsPresent")
+        var maxSupportedFormat = supportedFormats.intStream().max().getAsInt();
+        if (format > maxSupportedFormat) {
+            throw new PackParseException("The " + subName + " format (" + format + ") is newer than the maximum this version of Fiddle can read (" + maxSupportedFormat + "). To load this pack, try updating to the latest version of Fiddle.");
+        }
+        throw new PackParseException("The " + subName + " format (" + format + ") is not supported because it is only used in a Minecraft snapshot version.");
+    }
+
+    public static FiddlePackMeta fromJson(JsonElement json) throws PackParseException {
+
+        var packJson = NamedJsonElement.get(json).getAsJsonObject().getAsJsonObject(packJsonKey);
+
+        int format = packJson.getAsInt(formatJsonKey);
+        if (format < 1) {
+            throw new PackParseException("Invalid Fiddle pack format: " + format);
+        } else if (format > maxFormat) {
+            throw new PackParseException("The Fiddle pack format (" + format + ") is newer than the maximum this version of Fiddle can read (" + maxFormat + "). To load this pack, try updating to the latest version of Fiddle.");
+        }
+
+        var uuid = packJson.getAsUUID(uuidJsonKey);
+
+        var displayName = Objects.requireNonNull(packJson.getAsString(displayNameJsonKey, true, NamedJsonElement.BlankStringParseResult.THROW_EXCEPTION, displayNameMaxLength));
+
+        var technicalName = packJson.getAsString(technicalNameJsonKey, true, NamedJsonElement.BlankStringParseResult.THROW_EXCEPTION, technicalNameMaxLength);
+
+        var version = packJson.getAsStringIfPresent(versionJsonKey, false, NamedJsonElement.BlankStringParseResult.RETURN_NULL, versionMaxLength);
+
+        var description = packJson.getAsStringIfPresent(descriptionJsonKey, true, NamedJsonElement.BlankStringParseResult.RETURN_NULL, descriptionMaxLength);
+
+        var authorsList = packJson.getAsNotNullMappedJsonArrayIfPresent(authorsJsonKey, authorJson -> authorJson.getAsString(true, NamedJsonElement.BlankStringParseResult.RETURN_NULL, authorMaxLength));
+        var authors = authorsList == null ? new String[0] : authorsList.toArray(new String[0]);
+
+        var creditsList = packJson.getAsMappedJsonArrayIfPresent(creditsJsonKey, creditJson -> {
+            var creditJsonObject = creditJson.getAsJsonObject();
+            return new Credit(
+                Objects.requireNonNull(creditJsonObject.getAsString(creditsNameJsonKey, true, NamedJsonElement.BlankStringParseResult.THROW_EXCEPTION, creditsNameMaxLength)),
+                creditJsonObject.getAsStringIfPresent(creditsRoleJsonKey, true, NamedJsonElement.BlankStringParseResult.RETURN_NULL, creditsRoleMaxLength)
+            );
+        });
+        var credits = creditsList == null ? new Credit[0] : creditsList.toArray(new Credit[0]);
+
+        var website = packJson.getAsStringIfPresent(websiteJsonKey, true, NamedJsonElement.BlankStringParseResult.RETURN_NULL, websiteMaxLength);
+
+        var resourcePackMetaJson = packJson.getAsJsonObject(resourcePackMetaJsonKey);
+        var resourcePackMetaPackJson = resourcePackMetaJson.getAsJsonObject(resourcePackMetaPackJsonKey);
+        int resourcePackFormat = resourcePackMetaPackJson.getAsInt(resourcePackMetaFormatJsonKey);
+        enforceSupportedSubFormat("resource pack", resourcePackFormat, supportedResourcePackFormats);
+        var resourcePackDescription = resourcePackMetaPackJson.getAsStringIfPresent(resourcePackMetaDescriptionJsonKey, false, NamedJsonElement.BlankStringParseResult.RETURN_STRING, resourcePackMetaDescriptionMaxLength);
+        var resourcePackMeta = new ResourcePackMeta(resourcePackFormat, resourcePackDescription);
+
+        var dataPackMetaJson = packJson.getAsJsonObjectIfPresent(dataPackMetaJsonKey);
+        DataPackMeta dataPackMeta;
+        if (dataPackMetaJson != null) {
+            var dataPackMetaPackJson = dataPackMetaJson.getAsJsonObject(dataPackMetaPackJsonKey);
+            int dataPackFormat = dataPackMetaPackJson.getAsInt(dataPackMetaFormatJsonKey);
+            enforceSupportedSubFormat("data pack", dataPackFormat, supportedDataPackFormats);
+            var dataPackDescription = dataPackMetaPackJson.getOrNull(dataPackMetaDescriptionJsonKey);
+            if (dataPackDescription != null && dataPackDescription.isJsonNull()) {
+                throw new PackParseException("The value " + (dataPackDescription.name() == null ? "" : "for '" + dataPackDescription.name() + "' ") + "is null, but it must be non-null");
+            }
+            dataPackMeta = new DataPackMeta(dataPackFormat, dataPackDescription == null ? null : dataPackDescription.unnamed());
+        } else {
+            dataPackMeta = null;
+        }
+
+        return new FiddlePackMeta(format, uuid, displayName, technicalName, version, description, authors, credits, website, resourcePackMeta, dataPackMeta);
+
+    }
+    // Fiddle end - read packs - parse meta from JSON
+
 }
