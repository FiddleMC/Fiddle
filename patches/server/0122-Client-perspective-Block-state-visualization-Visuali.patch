From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Fri, 5 Jan 2024 18:05:08 +0100
Subject: [PATCH] Client perspective - Block state visualization -
 Visualization setup bypass for visualization changes

* Adds a flag to `ClientboundBlockUpdatePacket` to mark packets meant to send visualization changes to the client (as opposed to a change of the block type itself)
* Adds a convenience method to `ServerPlayer` to send such packets

Does not implement any sending of such packets: this will be done by the processes that maintain visualizations and require doing this.
Does not implement this bypass of the visualization setup: it will be implemented as part of the implementation that calls the setup.

License: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)
Fiddle - https://fiddlemc.org

diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundBlockUpdatePacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundBlockUpdatePacket.java
index 7b4947aa2cdd7f359184689bf348560bde1016dd..b1ad8bea989510bedfdf6674362336e1fcdfc66a 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundBlockUpdatePacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundBlockUpdatePacket.java
@@ -11,6 +11,19 @@ public class ClientboundBlockUpdatePacket implements Packet<ClientGamePacketList
     private final BlockPos pos;
     public final BlockState blockState;
 
+    // Fiddle start - client perspective - block state visualization - ability to send visualization changes
+    /**
+     * A flag for whether this packet is a desired visualization change of a block that has stayed the same,
+     * rather than to indicate an actual block change.
+     * <p>
+     *     This is initially false, and set to true only in
+     *     {@link net.minecraft.server.level.ServerPlayer#sendVisualizationChangeBlockUpdate}.
+     *     It should not be set from anywhere else: the convenience method above should be used instead.
+     * </p>
+     */
+    public boolean isVisualizationChange = false;
+    // Fiddle end - client perspective - block state visualization - ability to send visualization changes
+
     public ClientboundBlockUpdatePacket(BlockPos pos, BlockState state) {
         this.pos = pos;
         this.blockState = state;
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index fd299b1dd454514e6132f8bb9ab4a0d013069bd4..1735dcd8df026a646d44d1e526ff503fa8eb82f2 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -2716,4 +2716,29 @@ public class ServerPlayer extends Player {
     }
     // Fiddle end - client perspective - deep replacements - send updates
 
+    // Fiddle start - client perspective - block state visualization - ability to send visualization changes
+    /**
+     * Sends an update of the {@link BlockState} to this player's client, at the given
+     * {@linkplain BlockPos block coordinates}.
+     * <p>
+     *     This method is solely intended to send block updates to the player that are done to change
+     *     the observed visualization of a block on the client.
+     * </p>
+     * <p>
+     *     As such, this update will not be further subjected to any modification, such as anti-x-ray,
+     *     and will bypass the
+     *     {@linkplain org.fiddlemc.fiddle.packet.block.BlockStateVisualizationSetupper block state visualization setup}
+     *     that regular block update go through.
+     * </p>
+     *
+     * @param state The resulting {@link BlockState} to send to this player's client.
+     */
+    public void sendVisualizationChangeBlockUpdate(@org.jetbrains.annotations.NotNull BlockPos position, @org.jetbrains.annotations.NotNull BlockState state) {
+        // Based on org.bukkit.craftbukkit.entity.CraftPlayer#sendBlockChange
+        ClientboundBlockUpdatePacket packet = new ClientboundBlockUpdatePacket(position, state);
+        packet.isVisualizationChange = true;
+        this.connection.send(packet);
+    }
+    // Fiddle end - client perspective - block state visualization - ability to send visualization changes
+
 }
diff --git a/src/main/java/org/fiddlemc/fiddle/packet/block/BlockStateVisualizationSetupper.java b/src/main/java/org/fiddlemc/fiddle/packet/block/BlockStateVisualizationSetupper.java
index c6462ca14bc888a964ba6a3a684e8cc18de1e30e..a91a2e74d39e4e82180ab491c32f9b15ea1ba48d 100644
--- a/src/main/java/org/fiddlemc/fiddle/packet/block/BlockStateVisualizationSetupper.java
+++ b/src/main/java/org/fiddlemc/fiddle/packet/block/BlockStateVisualizationSetupper.java
@@ -235,7 +235,9 @@ public interface BlockStateVisualizationSetupper {
      *     When needed to be able to dynamically update the visualization based on changing circumstances,
      *     the implementation of this method must perform a setup that makes sure that some process listening for
      *     a change in those circumstances sends a block change to the player without invoking any visualization setup
-     *     again.
+     *     again: by sending {@link ClientboundBlockUpdatePacket} with the
+     *     {@link ClientboundBlockUpdatePacket#isVisualizationChange} flag set to true,
+     *     which can be done with {@link ServerPlayer#sendVisualizationChangeBlockUpdate}.
      *     <br>
      *     Additionally, the implementation of this method must make sure to properly clean up any listeners
      *     for a change in circumstances that may already exist for this particular client and block location
