From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Thu, 11 May 2023 18:35:26 +0200
Subject: [PATCH] Load packs - Data packs - Fiddle repository source

License: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)
Fiddle - https://fiddlemc.org

diff --git a/src/main/java/org/fiddlemc/fiddle/pack/data/FiddleRepositorySource.java b/src/main/java/org/fiddlemc/fiddle/pack/data/FiddleRepositorySource.java
new file mode 100644
index 0000000000000000000000000000000000000000..0ac53e400c471867fe5679c23511522490a7b46d
--- /dev/null
+++ b/src/main/java/org/fiddlemc/fiddle/pack/data/FiddleRepositorySource.java
@@ -0,0 +1,51 @@
+// Fiddle - load packs - data packs - repository source
+
+package org.fiddlemc.fiddle.pack.data;
+
+import net.minecraft.server.packs.repository.Pack;
+import net.minecraft.server.packs.repository.RepositorySource;
+import com.mojang.logging.LogUtils;
+import org.fiddlemc.fiddle.pack.FiddlePack;
+import org.fiddlemc.fiddle.pack.FiddlePacks;
+import org.fiddlemc.fiddle.pack.files.FiddlePackFilesProvider;
+import org.fiddlemc.fiddle.pack.reader.PackParseException;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+import org.slf4j.Logger;
+
+import java.util.function.Consumer;
+
+/**
+ * A {@link RepositorySource} that provides the data packs from Fiddle packs.
+ */
+public class FiddleRepositorySource implements RepositorySource {
+
+    private static final String dataFolderName = "data";
+
+    private static final Logger LOGGER = LogUtils.getLogger();
+
+    @Override
+    public void loadPacks(@NotNull Consumer<Pack> profileAdder) {
+        for (FiddlePack pack : FiddlePacks.getPacks()) {
+            FiddlePackFilesProvider filesProvider = pack.filesProvider();
+            // Check that there is a data folder
+            @Nullable FiddlePackFilesProvider.FileInPack dataFolder;
+            try {
+                dataFolder = filesProvider.getTopLevelFile(dataFolderName);
+            } catch (PackParseException e) {
+                LOGGER.warn("Failed to check for a directory named '" + dataFolderName + "' in a pack ('" + pack + "'): " + e.getMessage(), e);
+                continue;
+            }
+            if (dataFolder instanceof FiddlePackFilesProvider.DirectoryInPack dataFolderAsDirectory) {
+                // Check that the data folder is non-empty (i.e. it contains some actual file)
+                if (dataFolderAsDirectory.containsAnyNestedRegularFile()) {
+                    System.out.println("Pack " + pack + " seems to have data");
+                    continue;
+                }
+            }
+            System.out.println("Pack " + pack + " seems to have NO data");
+        }
+        // TODO at some point the packs need to be closed via closeHandlesAndClearCacheUnlessInStartupLoadPhase
+    }
+
+}
