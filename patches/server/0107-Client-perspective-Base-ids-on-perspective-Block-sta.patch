From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Wed, 3 Jan 2024 21:04:16 +0100
Subject: [PATCH] Client perspective - Base ids on perspective - Block state -
 Provide

Provides functionality to base `BlockState` ids (the ids they are identified by in packets sent to clients) on the target client's perspective.
For clients that can understand the server-side block state ids directly, the id is taken from the regular registry (`Block.BLOCK_STATE_REGISTRY`), and for those who do not, the ids are taken from the vanilla-only registry (`Block.VANILLA_ONLY_BLOCK_STATE_REGISTRY`).

Does not add any usages of this functionality, those are added in the "Client perspective - Base ids on perspective - Block state - Apply to effect data value", "Base ids on perspective - Block state - Apply to level event data value" and "Client perspective - Base ids on perspective - Block state - Apply to block update packets" patches.

License: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)
Fiddle - https://fiddlemc.org

diff --git a/src/main/java/org/fiddlemc/fiddle/packet/ClientPerspective.java b/src/main/java/org/fiddlemc/fiddle/packet/ClientPerspective.java
index 9509fc70120390c17f0f4379ce96b9e6f57b716a..5fae2b39501b0908e25b558e2dce17f486a0b93a 100644
--- a/src/main/java/org/fiddlemc/fiddle/packet/ClientPerspective.java
+++ b/src/main/java/org/fiddlemc/fiddle/packet/ClientPerspective.java
@@ -133,6 +133,44 @@ public class ClientPerspective {
     }
     // Fiddle end - client perspective - base ids on perspective - provide - item
 
+    // Fiddle start - client perspective - base ids on perspective - provide - block state
+    /**
+     * The {@link net.minecraft.core.IdMap} that
+     * {@linkplain net.minecraft.core.IdMap#getId provides} the ids for
+     * {@linkplain net.minecraft.world.level.block.state.BlockState block states}
+     * that a client with this perspective interprets correctly.
+     */
+    public net.minecraft.core.IdMap<net.minecraft.world.level.block.state.BlockState> getPacketBlockStateIdMap() {
+        return understandsServerSideItemsAndBlocks ? net.minecraft.world.level.block.Block.BLOCK_STATE_REGISTRY : net.minecraft.world.level.block.Block.VANILLA_ONLY_BLOCK_STATE_REGISTRY;
+    }
+
+    /**
+     * The id provided by this perspective's {@link #getPacketBlockStateIdMap()},
+     * for the given {@link net.minecraft.world.level.block.state.BlockState}.
+     * A null value will be interpreted as the
+     * {@linkplain net.minecraft.world.level.block.Block#defaultBlockState()} of
+     * {@link net.minecraft.world.level.block.Blocks#AIR}.
+     * <p>
+     *     This is based on {@link #getPacketBlockStateIdMap()}, but uses the cached id for optimization instead.
+     * </p>
+     */
+    public int getPacketBlockStateId(@org.jetbrains.annotations.Nullable net.minecraft.world.level.block.state.BlockState state) {
+        var stateToQuery = state == null ? net.minecraft.world.level.block.Blocks.AIR.defaultBlockState() : state;
+        return understandsServerSideItemsAndBlocks ? stateToQuery.indexInBlockStateRegistry : stateToQuery.indexInVanillaOnlyBlockStateRegistry;
+    }
+
+    /**
+     * @return The single {@link #getPacketBlockStateId} value for the given
+     * {@link net.minecraft.world.level.block.state.BlockState}, if it is the same
+     * for all possible perspectives, or -1 otherwise.
+     */
+    public static int getSinglePacketBlockStateId(@org.jetbrains.annotations.Nullable net.minecraft.world.level.block.state.BlockState state) {
+        var stateToQuery = state == null ? net.minecraft.world.level.block.Blocks.AIR.defaultBlockState() : state;
+        int potentialSingleIndex = stateToQuery.indexInBlockStateRegistry;
+        return potentialSingleIndex == stateToQuery.indexInVanillaOnlyBlockStateRegistry ? potentialSingleIndex : -1;
+    }
+    // Fiddle end - client perspective - base ids on perspective - provide - block state
+
     @Override
     public int hashCode() {
         return this.category.ordinal();
