From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Tue, 6 Jun 2023 12:12:58 +0200
Subject: [PATCH] Modify Bukkit enums - Remove hard-coded values - Modify
 classes

License: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)
Fiddle - https://fiddlemc.org

diff --git a/build.gradle.kts b/build.gradle.kts
index 10f617e1998a6ae6a5be8fe212e170b770cd031c..b0dc3e2db1f9834a4b6b7ba6d9873826436d91b7 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -79,6 +79,7 @@ tasks.jar {
         val gitBranch = git("rev-parse", "--abbrev-ref", "HEAD").getText().trim() // Paper
         attributes(
             "Main-Class" to "org.bukkit.craftbukkit.Main",
+            "Add-Opens" to "java.base/java.lang", // Fiddle - remove hard-coded Bukkit values - modify classes - add module opens to server jar
             "Implementation-Title" to "CraftBukkit",
             "Implementation-Version" to "git-Fiddle-$implementationVersion", // Fiddle - branding changes
             "Implementation-Vendor" to date, // Paper
@@ -176,6 +177,7 @@ fun TaskContainer.registerRunTask(
     val memoryGb = providers.gradleProperty("paper.runMemoryGb").getOrElse("2")
     minHeapSize = "${memoryGb}G"
     maxHeapSize = "${memoryGb}G"
+    jvmArgs("--add-opens=java.base/java.lang=ALL-UNNAMED") // Fiddle - remove hard-coded Bukkit values - modify classes - add module opens to development runs
 
     doFirst {
         workingDir.mkdirs()
diff --git a/src/main/java/net/minecraft/server/Main.java b/src/main/java/net/minecraft/server/Main.java
index 0031765eb9f50c46f450b02dce456555ca2d513e..46b22270cc2e8758033b893720d911c997342632 100644
--- a/src/main/java/net/minecraft/server/Main.java
+++ b/src/main/java/net/minecraft/server/Main.java
@@ -149,6 +149,42 @@ public class Main {
             Path path1 = Paths.get("server.properties");
             DedicatedServerSettings dedicatedserversettings = new DedicatedServerSettings(optionset); // CraftBukkit - CLI argument support
 
+            // Fiddle start - remove hard-coded Bukkit values - modify classes
+            String[] bukkitEnumClassesToLoad = {
+                "org.bukkit.Material"
+            };
+            ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader();
+            // Confirm classes to be loaded are not loaded yet
+            try {
+                java.lang.reflect.Method findLoadedClassMethod = ClassLoader.class.getDeclaredMethod("findLoadedClass", String.class);
+                findLoadedClassMethod.setAccessible(true);
+                for (String bukkitEnumClassToLoad : bukkitEnumClassesToLoad) {
+                    if (findLoadedClassMethod.invoke(systemClassLoader, bukkitEnumClassToLoad) != null) {
+                        LOGGER.error("A Bukkit enum class (" + bukkitEnumClassToLoad + ") was already loaded before additional values could be added. This may be caused by a plugin using the class before the server started, or an instrumentation agent or class loader runtime flag forcibly loading the class.");
+                        return;
+                    }
+                }
+            } catch (Exception e) {
+                LOGGER.error("Failed to check if Bukkit enum classes were already loaded: please add \"--add-opens=java.base/java.lang=ALL-UNNAMED\" to your server command line, for example \"java -jar server.jar --add-opens=java.base/java.lang=ALL-UNNAMED\"", e);
+                return;
+            }
+            // Modify each class and add it to the class path
+            for (String bukkitEnumClassToLoad : bukkitEnumClassesToLoad) {
+                // Load the source
+//                bukkitEnumClassToLoad.replace('/', '.')
+//                String source = classLoader.getResourceAsStream("enumsrc/" +  + ".java") {
+//                    if (is == null) return null;
+//                    try (InputStreamReader isr = new InputStreamReader(is);
+//                         BufferedReader reader = new BufferedReader(isr)) {
+//                        return reader.lines().collect(Collectors.joining(System.lineSeparator()));
+//                    }
+//                }
+            }
+            // TODO modify .java files
+            // TODO compile .java files
+            // TODO add compiled files to class path and make sure they override any existing
+            // Fiddle end - remove hard-coded Bukkit values - modify classes
+
             dedicatedserversettings.forceSave();
             // Paper start - load config files for access below if needed
             org.bukkit.configuration.file.YamlConfiguration bukkitConfiguration = io.papermc.paper.configuration.PaperConfigurations.loadLegacyConfigFile((File) optionset.valueOf("bukkit-settings"));
