From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Sun, 28 Jan 2024 16:54:15 +0100
Subject: [PATCH] Fiddle branding changes - Version fetcher

Version lookups (such as done by `/version`) will check for updates to the Fiddle repository instead of Paper.

License: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)
Fiddle - https://fiddlemc.org

This patch is based on the following patch:
"Gale branding changes"
By: Martijn Muijsers <martijnmuijsers@live.nl>
As part of: Gale (https://github.com/GaleMC/Gale)
Licensed (except for image files) under: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)

* Gale description *

Gale - https://galemc.org

diff --git a/src/main/java/com/destroystokyo/paper/PaperVersionFetcher.java b/src/main/java/com/destroystokyo/paper/PaperVersionFetcher.java
index 9d687da5bdf398bb3f6c84cdf1249a7213d09f2e..31327c13c1bee7465e6e6125726fac73b7717b1a 100644
--- a/src/main/java/com/destroystokyo/paper/PaperVersionFetcher.java
+++ b/src/main/java/com/destroystokyo/paper/PaperVersionFetcher.java
@@ -17,12 +17,35 @@ import java.net.HttpURLConnection;
 import java.net.URL;
 import java.util.stream.StreamSupport;
 
-public class PaperVersionFetcher implements VersionFetcher {
+// Fiddle start - branding changes - version fetcher
+/**
+ * An abstract version fetcher, derived from {@link OriginalPaperVersionFetcher}.
+ * This class was then made to be a superclass of both {@link OriginalPaperVersionFetcher}
+ * and {@link org.fiddlemc.fiddle.version.FiddleVersionFetcher}.
+ */
+public abstract class PaperVersionFetcher implements VersionFetcher {
+    // Fiddle end - branding changes - version fetcher
     private static final java.util.regex.Pattern VER_PATTERN = java.util.regex.Pattern.compile("^([0-9\\.]*)\\-.*R"); // R is an anchor, will always give '-R' at end
-    private static final String GITHUB_BRANCH_NAME = "master";
-    private static final String DOWNLOAD_PAGE = "https://papermc.io/downloads/paper";
     private static @Nullable String mcVer;
 
+    // Fiddle start - branding changes - version fetcher
+    protected final String gitHubBranchName;
+    protected final String downloadPage;
+    protected final String projectDisplayName;
+    protected final String organizationDisplayName;
+    protected final String gitHubOrganizationName;
+    protected final String gitHubRepoName;
+
+    protected PaperVersionFetcher(String githubBranchName, String downloadPage, String projectDisplayName, String organizationDisplayName, String gitHubOrganizationName, String gitHubRepoName) {
+        this.gitHubBranchName = githubBranchName;
+        this.downloadPage = downloadPage;
+        this.projectDisplayName = projectDisplayName;
+        this.organizationDisplayName = organizationDisplayName;
+        this.gitHubOrganizationName = gitHubOrganizationName;
+        this.gitHubRepoName = gitHubRepoName;
+    }
+    // Fiddle end - branding changes - version fetcher
+
     @Override
     public long getCacheTime() {
         return 720000;
@@ -31,21 +54,23 @@ public class PaperVersionFetcher implements VersionFetcher {
     @Nonnull
     @Override
     public Component getVersionMessage(@Nonnull String serverVersion) {
-        String[] parts = serverVersion.substring("git-Paper-".length()).split("[-\\s]");
-        final Component updateMessage = getUpdateStatusMessage("PaperMC/Paper", GITHUB_BRANCH_NAME, parts[0]);
+        // Fiddle start - branding changes - version fetcher
+        String[] parts = serverVersion.substring(("git-" + this.projectDisplayName + "-").length()).split("[-\\s]");
+        final Component updateMessage = getUpdateStatusMessage(this.gitHubOrganizationName + "/" + this.gitHubRepoName, this.gitHubBranchName, parts[0]);
+        // Fiddle end - branding changes - version fetcher
         final Component history = getHistory();
 
         return history != null ? TextComponent.ofChildren(updateMessage, Component.newline(), history) : updateMessage;
     }
 
-    private static @Nullable String getMinecraftVersion() {
+    protected @Nullable String getMinecraftVersion() { // Fiddle - branding changes - version fetcher
         if (mcVer == null) {
             java.util.regex.Matcher matcher = VER_PATTERN.matcher(org.bukkit.Bukkit.getBukkitVersion());
             if (matcher.find()) {
                 String result = matcher.group();
                 mcVer = result.substring(0, result.length() - 2); // strip 'R' anchor and trailing '-'
             } else {
-                org.bukkit.Bukkit.getLogger().warning("Unable to match version to pattern! Report to PaperMC!");
+                org.bukkit.Bukkit.getLogger().warning("Unable to match version to pattern! Report to " + this.organizationDisplayName + "!"); // Fiddle - branding changes - version fetcher
                 org.bukkit.Bukkit.getLogger().warning("Pattern: " + VER_PATTERN.toString());
                 org.bukkit.Bukkit.getLogger().warning("Version: " + org.bukkit.Bukkit.getBukkitVersion());
             }
@@ -54,12 +79,32 @@ public class PaperVersionFetcher implements VersionFetcher {
         return mcVer;
     }
 
-    private static Component getUpdateStatusMessage(@Nonnull String repo, @Nonnull String branch, @Nonnull String versionInfo) {
+    // Fiddle start - branding changes - version fetcher
+    protected abstract boolean canFetchDistanceFromSiteApi();
+
+    protected abstract int fetchDistanceFromSiteApi(int jenkinsBuild);
+    // Fiddle end - branding changes - version fetcher
+
+    private Component getUpdateStatusMessage(@Nonnull String repo, @Nonnull String branch, @Nonnull String versionInfo) {
+        // Fiddle end - branding changes - version fetcher
         int distance;
+        // Fiddle start - branding changes - version fetcher
+        distance = -1;
+        boolean readFromSiteApi = false;
+        if (this.canFetchDistanceFromSiteApi()) {
+        // Fiddle end - branding changes - version fetcher
         try {
             int jenkinsBuild = Integer.parseInt(versionInfo);
-            distance = fetchDistanceFromSiteApi(jenkinsBuild, getMinecraftVersion());
+            // Fiddle start - branding changes - version fetcher
+            distance = this.fetchDistanceFromSiteApi(jenkinsBuild);
+            readFromSiteApi = true;
+            // Fiddle end - branding changes - version fetcher
         } catch (NumberFormatException ignored) {
+            // Fiddle start - branding changes - version fetcher
+        }
+        }
+        if (!readFromSiteApi) {
+            // Fiddle end - branding changes - version fetcher
             versionInfo = versionInfo.replace("\"", "");
             distance = fetchDistanceFromGitHub(repo, branch, versionInfo);
         }
@@ -75,12 +120,34 @@ public class PaperVersionFetcher implements VersionFetcher {
                 return Component.text("You are " + distance + " version(s) behind", NamedTextColor.YELLOW)
                         .append(Component.newline())
                         .append(Component.text("Download the new version at: ")
-                                .append(Component.text(DOWNLOAD_PAGE, NamedTextColor.GOLD)
+                                .append(Component.text(this.downloadPage, NamedTextColor.GOLD) // Fiddle - branding changes - version fetcher
                                         .hoverEvent(Component.text("Click to open", NamedTextColor.WHITE))
-                                        .clickEvent(ClickEvent.openUrl(DOWNLOAD_PAGE))));
+                                        .clickEvent(ClickEvent.openUrl(this.downloadPage)))); // Fiddle - branding changes - version fetcher
         }
     }
 
+    // Fiddle start - branding changes - version fetcher
+    /**
+     * The original version fetcher for Paper. Most of the original content of this class has been moved to
+     * {@link PaperVersionFetcher}.
+     */
+    public static final class OriginalPaperVersionFetcher extends PaperVersionFetcher {
+
+        public OriginalPaperVersionFetcher() {
+            super("master", "https://papermc.io/downloads/paper", "Paper", "PaperMC", "PaperMC", "Paper");
+        }
+
+        @Override
+        protected boolean canFetchDistanceFromSiteApi() {
+            return true;
+        }
+
+        @Override
+        protected int fetchDistanceFromSiteApi(int jenkinsBuild) {
+            return fetchDistanceFromSiteApi(jenkinsBuild, this.getMinecraftVersion());
+        }
+        // Fiddle end - branding changes - version fetcher
+
     private static int fetchDistanceFromSiteApi(int jenkinsBuild, @Nullable String siteApiVersion) {
         if (siteApiVersion == null) { return -1; }
         try {
@@ -105,6 +172,8 @@ public class PaperVersionFetcher implements VersionFetcher {
         }
     }
 
+    } // Fiddle - branding changes - version fetcher
+
     // Contributed by Techcable <Techcable@outlook.com> in GH-65
     private static int fetchDistanceFromGitHub(@Nonnull String repo, @Nonnull String branch, @Nonnull String hash) {
         try {
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
index 83cef5ec27c31f133a23cd27349f722799c786ea..90a3f82a2491379318db6382ed8b8f80524dbc0a 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
@@ -470,7 +470,7 @@ public final class CraftMagicNumbers implements UnsafeValues {
 
     @Override
     public com.destroystokyo.paper.util.VersionFetcher getVersionFetcher() {
-        return new com.destroystokyo.paper.PaperVersionFetcher();
+        return new org.fiddlemc.fiddle.version.FiddleVersionFetcher(); // Fiddle - branding changes - version fetcher
     }
 
     @Override
diff --git a/src/main/java/org/fiddlemc/fiddle/version/FiddleVersionFetcher.java b/src/main/java/org/fiddlemc/fiddle/version/FiddleVersionFetcher.java
new file mode 100644
index 0000000000000000000000000000000000000000..a14512b688dc4e35f33bf8c97eec870a079d99c2
--- /dev/null
+++ b/src/main/java/org/fiddlemc/fiddle/version/FiddleVersionFetcher.java
@@ -0,0 +1,23 @@
+// Fiddle - branding changes - version fetcher
+
+package org.fiddlemc.fiddle.version;
+
+import com.destroystokyo.paper.PaperVersionFetcher;
+
+public final class FiddleVersionFetcher extends PaperVersionFetcher {
+
+    public FiddleVersionFetcher() {
+        super("master", "https://github.com/FiddleMC/Fiddle", "Fiddle", "FiddleMC", "FiddleMC", "Fiddle");
+    }
+
+    @Override
+    protected boolean canFetchDistanceFromSiteApi() {
+        return false;
+    }
+
+    @Override
+    protected int fetchDistanceFromSiteApi(int jenkinsBuild) {
+        return -1;
+    }
+
+}
