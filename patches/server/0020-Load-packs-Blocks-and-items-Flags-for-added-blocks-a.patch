From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Thu, 13 Jul 2023 18:52:18 +0200
Subject: [PATCH] Load packs - Blocks and items - Flags for added blocks and
 items

License: Fiddle Public License Agreement 1.0 (included in license/FPL-1.0.txt)
Fiddle - https://fiddlemc.org

diff --git a/src/main/java/net/minecraft/world/item/Item.java b/src/main/java/net/minecraft/world/item/Item.java
index 716bf66e15021fe989193213ad220fe0a9f541b8..ca46c812adbba87263a3fc82a05325fb7d179a6e 100644
--- a/src/main/java/net/minecraft/world/item/Item.java
+++ b/src/main/java/net/minecraft/world/item/Item.java
@@ -98,6 +98,14 @@ public class Item implements FeatureElement, ItemLike {
     private int indexInItemRegistry = -1;
     // Fiddle end - cache registry indices as fields - item
 
+    // Fiddle start - load packs - blocks - flag for added items
+    /**
+     * Whether this item was added by Fiddle.
+     * This will be false until set with {@link #setIsAddedByFiddle}.
+     */
+    private boolean isAddedByFiddle = false;
+    // Fiddle end - load packs - blocks - flag for added items
+
     public static int getId(Item item) {
         return item == null ? 0 : item.getIndexInItemRegistry(); // Fiddle - cache registry indices as fields - use instead of lookup - item
     }
@@ -421,6 +429,19 @@ public class Item implements FeatureElement, ItemLike {
     }
     // Fiddle end - cache registry indices as fields - item
 
+    // Fiddle start - load packs - blocks - flag for added items
+    public boolean isAddedByFiddle() {
+        return this.isAddedByFiddle;
+    }
+
+    public void setIsAddedByFiddle() {
+        if (this.keyInItemRegistry != null) {
+            throw new IllegalStateException("Items must be marked as added by Fiddle before they are registered");
+        }
+        this.isAddedByFiddle = true;
+    }
+    // Fiddle end - load packs - blocks - flag for added items
+
     public static class Properties {
         int maxStackSize = 64;
         int maxDamage;
diff --git a/src/main/java/net/minecraft/world/level/block/Block.java b/src/main/java/net/minecraft/world/level/block/Block.java
index 1e47b5cceb1d15beef07872e19b668a88384cdbe..a7532a1acd5407d51d5e8d995419d075c5a36e33 100644
--- a/src/main/java/net/minecraft/world/level/block/Block.java
+++ b/src/main/java/net/minecraft/world/level/block/Block.java
@@ -137,6 +137,14 @@ public class Block extends BlockBehaviour implements ItemLike {
     private int indexInBlockRegistry = -1;
     // Fiddle end - cache registry indices as fields - block
 
+    // Fiddle start - load packs - blocks - flag for added blocks
+    /**
+     * Whether this block was added by Fiddle.
+     * This will be false until set with {@link #setIsAddedByFiddle}.
+     */
+    private boolean isAddedByFiddle = false;
+    // Fiddle end - load packs - blocks - flag for added blocks
+
     private static final int CACHE_SIZE = 2048;
     private static final ThreadLocal<Object2ByteLinkedOpenHashMap<Block.BlockStatePairKey>> OCCLUSION_CACHE = ThreadLocal.withInitial(() -> {
         Object2ByteLinkedOpenHashMap<Block.BlockStatePairKey> object2bytelinkedopenhashmap = new Object2ByteLinkedOpenHashMap<Block.BlockStatePairKey>(2048, 0.25F) {
@@ -622,6 +630,19 @@ public class Block extends BlockBehaviour implements ItemLike {
     }
     // Fiddle end - cache registry indices as fields - block
 
+    // Fiddle start - load packs - blocks - flag for added blocks
+    public boolean isAddedByFiddle() {
+        return this.isAddedByFiddle;
+    }
+
+    public void setIsAddedByFiddle() {
+        if (this.keyInBlockRegistry != null) {
+            throw new IllegalStateException("Blocks must be marked as added by Fiddle before they are registered");
+        }
+        this.isAddedByFiddle = true;
+    }
+    // Fiddle end - load packs - blocks - flag for added blocks
+
     // Spigot start
     public static float range(float min, float value, float max) {
         if (value < min) {
