From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Wed, 23 Nov 2022 21:05:47 +0100
Subject: [PATCH] Configuration - Fiddle configuration files

Adds Fiddle configuration files, analogous to Paper:
* `config/fiddle-global.yml`
* `config/fiddle-world-defaults.yml`
* a `fiddle-world.yml` in each world folder

After this patch, the configuration files do not contain any settings yet; those will be added by subsequent patches.

License: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)
Fiddle - https://fiddlemc.org

This patch is based on the following patch:
"Gale configuration"
By: Martijn Muijsers <martijnmuijsers@live.nl>
As part of: Gale (https://github.com/GaleMC/Gale)
Licensed under: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)

* Gale description *

License: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)
Gale - https://galemc.org

This patch is based on the following patch:
"Paper config files"
By: Jake Potrebic <jake.m.potrebic@gmail.com>
As part of: Paper (https://github.com/PaperMC/Paper)
Licensed under: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)

diff --git a/src/main/java/io/papermc/paper/configuration/Configurations.java b/src/main/java/io/papermc/paper/configuration/Configurations.java
index c01b4393439838976965823298f12e4762e72eff..c6afbe8d889a7c2d7c33aa2eb2a913985ee95c50 100644
--- a/src/main/java/io/papermc/paper/configuration/Configurations.java
+++ b/src/main/java/io/papermc/paper/configuration/Configurations.java
@@ -42,7 +42,10 @@ public abstract class Configurations<G, W> {
     protected final String defaultWorldConfigFileName;
     protected final String worldConfigFileName;
 
+    public final String brand; // Fiddle - Fiddle configuration
+
     public Configurations(
+        final String brand, // Fiddle - Fiddle configuration
         final Path globalFolder,
         final Class<G> globalConfigType,
         final Class<W> worldConfigClass,
@@ -50,6 +53,7 @@ public abstract class Configurations<G, W> {
         final String defaultWorldConfigFileName,
         final String worldConfigFileName
     ) {
+        this.brand = brand; // Fiddle - Fiddle configuration
         this.globalFolder = globalFolder;
         this.globalConfigClass = globalConfigType;
         this.worldConfigClass = worldConfigClass;
@@ -93,7 +97,7 @@ public abstract class Configurations<G, W> {
         };
     }
 
-    static <T> CheckedFunction<ConfigurationNode, T, SerializationException> reloader(Class<T> type, T instance) {
+    public static <T> CheckedFunction<ConfigurationNode, T, SerializationException> reloader(Class<T> type, T instance) { // Fiddle - Fiddle configuration
         return node -> {
             ObjectMapper.Factory factory = (ObjectMapper.Factory) Objects.requireNonNull(node.options().serializers().get(type));
             ObjectMapper.Mutable<T> mutable = (ObjectMapper.Mutable<T>) factory.get(type);
@@ -139,10 +143,10 @@ public abstract class Configurations<G, W> {
     protected void verifyGlobalConfigVersion(final ConfigurationNode globalNode) {
         final ConfigurationNode version = globalNode.node(Configuration.VERSION_FIELD);
         if (version.virtual()) {
-            LOGGER.warn("The global config file didn't have a version set, assuming latest");
+            LOGGER.warn("The " + this.brand + " global config file didn't have a version set, assuming latest"); // Fiddle - Fiddle configuration
             version.raw(this.globalConfigVersion());
         } else if (version.getInt() > this.globalConfigVersion()) {
-            LOGGER.error("Loading a newer configuration than is supported ({} > {})! You may have to backup & delete your global config file to start the server.", version.getInt(), this.globalConfigVersion());
+            LOGGER.error("Loading a newer " + this.brand + " global configuration than is supported ({} > {})! You may have to backup & delete your " + this.brand + " global config file to start the server.", version.getInt(), this.globalConfigVersion()); // Fiddle - Fiddle configuration
         }
     }
 
@@ -243,17 +247,17 @@ public abstract class Configurations<G, W> {
         final String worldName = contextMap.require(WORLD_NAME);
         if (version.virtual()) {
             if (worldName.equals(WORLD_DEFAULTS)) {
-                LOGGER.warn("The world defaults config file didn't have a version set, assuming latest");
+                LOGGER.warn("The " + this.brand + " world defaults config file didn't have a version set, assuming latest"); // Fiddle - Fiddle configuration
             } else {
-                LOGGER.warn("The world config file for " + worldName + " didn't have a version set, assuming latest");
+                LOGGER.warn("The " + this.brand + " world config file for " + worldName + " didn't have a version set, assuming latest"); // Fiddle - Fiddle configuration
             }
             version.raw(this.worldConfigVersion());
         } else if (version.getInt() > this.worldConfigVersion()) {
-            String msg = "Loading a newer configuration than is supported ({} > {})! ";
+            String msg = "Loading a newer " + this.brand + " world configuration than is supported ({} > {})! "; // Fiddle - Fiddle configuration
             if (worldName.equals(WORLD_DEFAULTS)) {
-                msg += "You may have to backup & delete the world defaults config file to start the server.";
+                msg += "You may have to backup & delete the " + this.brand + " world defaults config file to start the server."; // Fiddle - Fiddle configuration
             } else {
-                msg += "You may have to backup & delete the " + worldName + " config file to start the server.";
+                msg += "You may have to backup & delete the " + this.brand + " world config file for the world '" + worldName + "' to start the server."; // Fiddle - Fiddle configuration
             }
             LOGGER.error(msg, version.getInt(), this.worldConfigVersion());
         }
@@ -352,4 +356,21 @@ public abstract class Configurations<G, W> {
             return "ContextKey{" + this.name + "}";
         }
     }
+
+    // Fiddle start - Fiddle configuration
+    public static final String legacyWorldsSectionKey = "__________WORLDS__________";
+    public static final String legacyWorldDefaultsSectionKey = "__defaults__";
+
+    @Deprecated
+    public org.bukkit.configuration.file.YamlConfiguration createLegacyObject(final net.minecraft.server.MinecraftServer server) {
+        var global = org.bukkit.configuration.file.YamlConfiguration.loadConfiguration(this.globalFolder.resolve(this.globalConfigFileName).toFile());
+        var worlds = global.createSection(legacyWorldsSectionKey);
+        worlds.set(legacyWorldDefaultsSectionKey, org.bukkit.configuration.file.YamlConfiguration.loadConfiguration(this.globalFolder.resolve(this.defaultWorldConfigFileName).toFile()));
+        for (ServerLevel level : server.getAllLevels()) {
+            worlds.set(level.getWorld().getName(), org.bukkit.configuration.file.YamlConfiguration.loadConfiguration(getWorldConfigFile(level).toFile()));
+        }
+        return global;
+    }
+    // Fiddle end - Fiddle configuration
+
 }
diff --git a/src/main/java/io/papermc/paper/configuration/PaperConfigurations.java b/src/main/java/io/papermc/paper/configuration/PaperConfigurations.java
index fa1c0aee8c3a4d0868482cf5c703bbfd08e09874..40da4b76ce46b8c72cfc6e492c1224a55e4b7ba9 100644
--- a/src/main/java/io/papermc/paper/configuration/PaperConfigurations.java
+++ b/src/main/java/io/papermc/paper/configuration/PaperConfigurations.java
@@ -72,16 +72,29 @@ import org.spongepowered.configurate.yaml.YamlConfigurationLoader;
 import static com.google.common.base.Preconditions.checkState;
 import static io.leangen.geantyref.GenericTypeReflector.erase;
 
+// Fiddle start - Fiddle configuration
+/**
+ * An abstract configurations, derived from {@link OriginalPaperConfigurations}.
+ * This class was then made to be a superclass of both {@link OriginalPaperConfigurations}
+ * and {@link org.fiddlemc.fiddle.configuration.FiddleConfigurations}.
+ */
+// Fiddle end - Fiddle configuration
 @SuppressWarnings("Convert2Diamond")
-public class PaperConfigurations extends Configurations<GlobalConfiguration, WorldConfiguration> {
+// Fiddle start - Fiddle configuration
+public abstract class PaperConfigurations<GlobalConfiguration, WorldConfiguration> extends Configurations<GlobalConfiguration, WorldConfiguration> {
 
-    private static final Logger LOGGER = LogUtils.getClassLogger();
+    protected final Logger LOGGER = org.slf4j.LoggerFactory.getLogger(this.getClass());
+    private static class OriginalStaticValues1 {
+    // Fiddle end - Fiddle configuration
     static final String GLOBAL_CONFIG_FILE_NAME = "paper-global.yml";
     static final String WORLD_DEFAULTS_CONFIG_FILE_NAME = "paper-world-defaults.yml";
     static final String WORLD_CONFIG_FILE_NAME = "paper-world.yml";
+    } // Fiddle - Fiddle configuration
+
     public static final String CONFIG_DIR = "config";
     private static final String BACKUP_DIR ="legacy-backup";
 
+    private static class OriginalStaticValues2 extends OriginalStaticValues1 { // Fiddle - Fiddle configuration
     private static final String GLOBAL_HEADER = String.format("""
             This is the global configuration file for Paper.
             As you can see, there's a lot to configure. Some options may impact gameplay, so use
@@ -117,12 +130,16 @@ public class PaperConfigurations extends Configurations<GlobalConfiguration, Wor
         This file may start empty but can be filled with settings to override ones in the %s/%s
         
         World: %s (%s)""",
-        PaperConfigurations.CONFIG_DIR,
-        PaperConfigurations.WORLD_DEFAULTS_CONFIG_FILE_NAME,
+        // Fiddle start - Fiddle configuration
+        CONFIG_DIR,
+        WORLD_DEFAULTS_CONFIG_FILE_NAME,
+        // Fiddle end - Fiddle configuration
         map.require(WORLD_NAME),
         map.require(WORLD_KEY)
     );
 
+    } // Fiddle start - Fiddle configuration
+
     private static final String MOVED_NOTICE = """
         The global and world default configuration files have moved to %s
         and the world-specific configuration file has been moved inside
@@ -131,6 +148,15 @@ public class PaperConfigurations extends Configurations<GlobalConfiguration, Wor
         See https://docs.papermc.io/paper/configuration for more information.
         """;
 
+    // Fiddle start - Fiddle configuration
+    private final String GLOBAL_CONFIG_FILE_NAME;
+    private final String WORLD_DEFAULTS_CONFIG_FILE_NAME;
+    private final String WORLD_CONFIG_FILE_NAME;
+    private final String GLOBAL_HEADER;
+    private final String WORLD_DEFAULTS_HEADER;
+    private final Function<ContextMap, String> WORLD_HEADER;
+    // Fiddle end - Fiddle configuration
+
     @VisibleForTesting
     public static final Supplier<SpigotWorldConfig> SPIGOT_WORLD_DEFAULTS = Suppliers.memoize(() -> new SpigotWorldConfig(RandomStringUtils.randomAlphabetic(255)) {
         @Override // override to ensure "verbose" is false
@@ -141,18 +167,57 @@ public class PaperConfigurations extends Configurations<GlobalConfiguration, Wor
     public static final ContextKey<Supplier<SpigotWorldConfig>> SPIGOT_WORLD_CONFIG_CONTEXT_KEY = new ContextKey<>(new TypeToken<Supplier<SpigotWorldConfig>>() {}, "spigot world config");
 
 
-    public PaperConfigurations(final Path globalFolder) {
-        super(globalFolder, GlobalConfiguration.class, WorldConfiguration.class, GLOBAL_CONFIG_FILE_NAME, WORLD_DEFAULTS_CONFIG_FILE_NAME, WORLD_CONFIG_FILE_NAME);
+    // Fiddle start - Fiddle configuration
+    public PaperConfigurations(
+        final Path globalFolder,
+        String GLOBAL_CONFIG_FILE_NAME,
+        String WORLD_DEFAULTS_CONFIG_FILE_NAME,
+        String WORLD_CONFIG_FILE_NAME,
+        String GLOBAL_HEADER,
+        String WORLD_DEFAULTS_HEADER,
+        Function<ContextMap, String> WORLD_HEADER,
+        List<Transformations.DefaultsAware> DEFAULT_AWARE_TRANSFORMATIONS,
+        String brand,
+        Class<GlobalConfiguration> globalConfigurationClass,
+        Class<WorldConfiguration> worldConfigurationClass
+    ) {
+        // Fiddle end - Fiddle configuration
+        super(brand, globalFolder, globalConfigurationClass, worldConfigurationClass, GLOBAL_CONFIG_FILE_NAME, WORLD_DEFAULTS_CONFIG_FILE_NAME, WORLD_CONFIG_FILE_NAME);
+        // Fiddle start - Fiddle configuration
+        this.GLOBAL_CONFIG_FILE_NAME = GLOBAL_CONFIG_FILE_NAME;
+        this.WORLD_DEFAULTS_CONFIG_FILE_NAME = WORLD_DEFAULTS_CONFIG_FILE_NAME;
+        this.WORLD_CONFIG_FILE_NAME = WORLD_CONFIG_FILE_NAME;
+        this.GLOBAL_HEADER = GLOBAL_HEADER;
+        this.WORLD_DEFAULTS_HEADER = WORLD_DEFAULTS_HEADER;
+        this.WORLD_HEADER = WORLD_HEADER;
+        this.DEFAULT_AWARE_TRANSFORMATIONS = DEFAULT_AWARE_TRANSFORMATIONS;
+        // Fiddle end - Fiddle configuration
     }
 
     @Override
     protected int globalConfigVersion() {
-        return GlobalConfiguration.CURRENT_VERSION;
+        // Fiddle start - Fiddle configuration
+        try {
+            var versionField = this.globalConfigClass.getDeclaredField("CURRENT_VERSION");
+            versionField.trySetAccessible();
+            return (int) versionField.get(null);
+        } catch (Exception e) {
+            throw new RuntimeException(e);
+        }
+        // Fiddle end - Fiddle configuration
     }
 
     @Override
     protected int worldConfigVersion() {
-        return WorldConfiguration.CURRENT_VERSION;
+        // Fiddle start - Fiddle configuration
+        try {
+            var versionField = this.worldConfigClass.getDeclaredField("CURRENT_VERSION");
+            versionField.trySetAccessible();
+            return (int) versionField.get(null);
+        } catch (Exception e) {
+            throw new RuntimeException(e);
+        }
+        // Fiddle end - Fiddle configuration
     }
 
     @Override
@@ -181,10 +246,16 @@ public class PaperConfigurations extends Configurations<GlobalConfiguration, Wor
     @Override
     protected YamlConfigurationLoader.Builder createGlobalLoaderBuilder() {
         return super.createGlobalLoaderBuilder()
-            .defaultOptions(PaperConfigurations::defaultGlobalOptions);
+            .defaultOptions(this::defaultGlobalOptions); // Fiddle - Fiddle configuration
+    }
+
+    // Fiddle start - Fiddle configuration
+    private ConfigurationOptions defaultGlobalOptions(ConfigurationOptions options) {
+        return defaultGlobalOptions(options, this.GLOBAL_HEADER);
     }
 
-    private static ConfigurationOptions defaultGlobalOptions(ConfigurationOptions options) {
+    private static ConfigurationOptions defaultGlobalOptions(ConfigurationOptions options, String GLOBAL_HEADER) {
+        // Fiddle end - Fiddle configuration
         return options
             .header(GLOBAL_HEADER)
             .serializers(builder -> builder
@@ -196,7 +267,15 @@ public class PaperConfigurations extends Configurations<GlobalConfiguration, Wor
     @Override
     public GlobalConfiguration initializeGlobalConfiguration(final RegistryAccess registryAccess) throws ConfigurateException {
         GlobalConfiguration configuration = super.initializeGlobalConfiguration(registryAccess);
-        GlobalConfiguration.set(configuration);
+        // Fiddle start - Fiddle configuration
+        try {
+            var setMethod = java.util.Arrays.stream(configuration.getClass().getDeclaredMethods()).filter(method -> java.lang.reflect.Modifier.isStatic(method.getModifiers()) && method.getName().equals("set")).findFirst().get();
+            setMethod.trySetAccessible();
+            setMethod.invoke(null, configuration);
+        } catch (Exception e) {
+            throw new RuntimeException(e);
+        }
+        // Fiddle end - Fiddle configuration
         return configuration;
     }
 
@@ -211,11 +290,17 @@ public class PaperConfigurations extends Configurations<GlobalConfiguration, Wor
         return super.createWorldObjectMapperFactoryBuilder(contextMap)
             .addNodeResolver(new RequiresSpigotInitialization.Factory(contextMap.require(SPIGOT_WORLD_CONFIG_CONTEXT_KEY).get()))
             .addNodeResolver(new NestedSetting.Factory())
-            .addDiscoverer(InnerClassFieldDiscoverer.worldConfig(createWorldConfigInstance(contextMap)));
+            .addDiscoverer(this.createInnerClassFieldDiscoverer(contextMap)); // Fiddle - Fiddle configuration
     }
 
-    private static WorldConfiguration createWorldConfigInstance(ContextMap contextMap) {
-        return new WorldConfiguration(
+    // Fiddle start - Fiddle configuration
+    protected org.spongepowered.configurate.objectmapping.FieldDiscoverer<?> createInnerClassFieldDiscoverer(ContextMap contextMap) {
+        return InnerClassFieldDiscoverer.worldConfig(createWorldConfigInstance(contextMap));
+    }
+
+    private static io.papermc.paper.configuration.WorldConfiguration createWorldConfigInstance(ContextMap contextMap) {
+        return new io.papermc.paper.configuration.WorldConfiguration(
+            // Fiddle end - Fiddle configuration
             contextMap.require(PaperConfigurations.SPIGOT_WORLD_CONFIG_CONTEXT_KEY).get(),
             contextMap.require(Configurations.WORLD_KEY)
         );
@@ -251,12 +336,21 @@ public class PaperConfigurations extends Configurations<GlobalConfiguration, Wor
 
     @Override
     protected void applyWorldConfigTransformations(final ContextMap contextMap, final ConfigurationNode node) throws ConfigurateException {
+        if (this.getRemovedWorldPaths().length > 0) { // Fiddle - Fiddle configuration
         ConfigurationTransformation.Builder builder = ConfigurationTransformation.builder();
-        for (NodePath path : RemovedConfigurations.REMOVED_WORLD_PATHS) {
+        for (NodePath path : this.getRemovedWorldPaths()) { // Fiddle - Fiddle configuration
             builder.addAction(path, TransformAction.remove());
         }
+        // Fiddle - Fiddle configuration - diff on change in case other transforms are added here
         builder.build().apply(node);
+        // Fiddle start - Fiddle configuration
+        }
 
+        this.applyVersionedWorldConfigTransformations(node);
+    }
+
+    protected void applyVersionedWorldConfigTransformations(final ConfigurationNode node) throws ConfigurateException {
+        // Fiddle end - Fiddle configuration
         final ConfigurationTransformation.VersionedBuilder versionedBuilder = Transformations.versionedBuilder();
         V29_ZeroWorldHeight.apply(versionedBuilder);
         V30_RenameFilterNbtFromSpawnEgg.apply(versionedBuilder);
@@ -266,19 +360,33 @@ public class PaperConfigurations extends Configurations<GlobalConfiguration, Wor
 
     @Override
     protected void applyGlobalConfigTransformations(ConfigurationNode node) throws ConfigurateException {
+        if (this.getRemovedGlobalPaths().length > 0) { // Fiddle - Fiddle configuration
         ConfigurationTransformation.Builder builder = ConfigurationTransformation.builder();
-        for (NodePath path : RemovedConfigurations.REMOVED_GLOBAL_PATHS) {
+        for (NodePath path : this.getRemovedGlobalPaths()) { // Fiddle - Fiddle configuration
             builder.addAction(path, TransformAction.remove());
         }
         builder.build().apply(node);
+        // Fiddle start - Fiddle configuration
+        }
 
+        this.applyVersionedGlobalConfigTransformations(node);
+    }
+
+    protected void applyVersionedGlobalConfigTransformations(final ConfigurationNode node) throws ConfigurateException {
+        // Fiddle end - Fiddle configuration
         final ConfigurationTransformation.VersionedBuilder versionedBuilder = Transformations.versionedBuilder();
         V29_LogIPs.apply(versionedBuilder);
         // ADD FUTURE VERSIONED TRANSFORMS TO versionedBuilder HERE
         versionedBuilder.build().apply(node);
     }
 
+    private static class OriginalDefaultAwareTransformations { // Fiddle - Fiddle configuration
     private static final List<Transformations.DefaultsAware> DEFAULT_AWARE_TRANSFORMATIONS = List.of(FeatureSeedsGeneration::apply);
+    // Fiddle start - Fiddle configuration
+    }
+
+    private final List<Transformations.DefaultsAware> DEFAULT_AWARE_TRANSFORMATIONS;
+    // Fiddle end - Fiddle configuration
 
     @Override
     protected void applyDefaultsAwareWorldConfigTransformations(final ContextMap contextMap, final ConfigurationNode worldNode, final ConfigurationNode defaultsNode) throws ConfigurateException {
@@ -301,7 +409,7 @@ public class PaperConfigurations extends Configurations<GlobalConfiguration, Wor
         try {
             return super.createWorldConfig(contextMap);
         } catch (IOException exception) {
-            throw new RuntimeException("Could not create world config for " + levelName, exception);
+            throw new RuntimeException("Could not create " + brand + " world config for " + levelName, exception); // Fiddle - Fiddle configuration
         }
     }
 
@@ -312,17 +420,17 @@ public class PaperConfigurations extends Configurations<GlobalConfiguration, Wor
 
     public void reloadConfigs(MinecraftServer server) {
         try {
-            this.initializeGlobalConfiguration(reloader(this.globalConfigClass, GlobalConfiguration.get()));
+            this.initializeGlobalConfiguration(reloader(this.globalConfigClass, this.getGlobalConfig())); // Fiddle - Fiddle configuration
             this.initializeWorldDefaultsConfiguration(server.registryAccess());
             for (ServerLevel level : server.getAllLevels()) {
-                this.createWorldConfig(createWorldContextMap(level), reloader(this.worldConfigClass, level.paperConfig()));
+                this.createWorldConfig(createWorldContextMap(level), reloader(this.worldConfigClass, this.getConfigForLevel(level))); // Fiddle - Fiddle configuration
             }
         } catch (Exception ex) {
-            throw new RuntimeException("Could not reload paper configuration files", ex);
+            throw new RuntimeException("Could not reload " + brand + " configuration files", ex); // Fiddle - Fiddle configuration
         }
     }
 
-    private static ContextMap createWorldContextMap(ServerLevel level) {
+    public static ContextMap createWorldContextMap(ServerLevel level) { // Fiddle - Fiddle configuration - private -> public
         return createWorldContextMap(level.convertable.levelDirectory.path(), level.serverLevelData.getLevelName(), level.dimension().location(), level.spigotConfig, level.registryAccess());
     }
 
@@ -336,7 +444,7 @@ public class PaperConfigurations extends Configurations<GlobalConfiguration, Wor
             .build();
     }
 
-    public static PaperConfigurations setup(final Path legacyConfig, final Path configDir, final Path worldFolder, final File spigotConfig) throws Exception {
+    public static PaperConfigurations.OriginalPaperConfigurations setup(final Path legacyConfig, final Path configDir, final Path worldFolder, final File spigotConfig) throws Exception { // Fiddle - Fiddle configuration
         final Path legacy = Files.isSymbolicLink(legacyConfig) ? Files.readSymbolicLink(legacyConfig) : legacyConfig;
         if (needsConverting(legacyConfig)) {
             final String legacyFileName = legacyConfig.getFileName().toString();
@@ -370,13 +478,18 @@ public class PaperConfigurations extends Configurations<GlobalConfiguration, Wor
         }
         try {
             createDirectoriesSymlinkAware(configDir);
-            return new PaperConfigurations(configDir);
+            return new PaperConfigurations.OriginalPaperConfigurations(configDir); // Fiddle - Fiddle configuration
         } catch (final IOException ex) {
             throw new RuntimeException("Could not setup PaperConfigurations", ex);
         }
     }
 
     private static void convert(final Path legacyConfig, final Path configDir, final Path worldFolder, final File spigotConfig) throws Exception {
+        // Fiddle start - Fiddle configuration
+        var GLOBAL_CONFIG_FILE_NAME = OriginalStaticValues1.GLOBAL_CONFIG_FILE_NAME;
+        var WORLD_DEFAULTS_CONFIG_FILE_NAME = OriginalStaticValues1.WORLD_DEFAULTS_CONFIG_FILE_NAME;
+        var WORLD_CONFIG_FILE_NAME = OriginalStaticValues1.WORLD_CONFIG_FILE_NAME;
+        // Fiddle end - Fiddle configuration
         createDirectoriesSymlinkAware(configDir);
 
         final YamlConfigurationLoader legacyLoader = ConfigurationLoaders.naturallySortedWithoutHeader(legacyConfig);
@@ -424,17 +537,6 @@ public class PaperConfigurations extends Configurations<GlobalConfiguration, Wor
         return Files.exists(legacyConfig) && Files.isRegularFile(legacyConfig);
     }
 
-    @Deprecated
-    public YamlConfiguration createLegacyObject(final MinecraftServer server) {
-        YamlConfiguration global = YamlConfiguration.loadConfiguration(this.globalFolder.resolve(this.globalConfigFileName).toFile());
-        ConfigurationSection worlds = global.createSection("__________WORLDS__________");
-        worlds.set("__defaults__", YamlConfiguration.loadConfiguration(this.globalFolder.resolve(this.defaultWorldConfigFileName).toFile()));
-        for (ServerLevel level : server.getAllLevels()) {
-            worlds.set(level.getWorld().getName(), YamlConfiguration.loadConfiguration(getWorldConfigFile(level).toFile()));
-        }
-        return global;
-    }
-
     @Deprecated
     public static YamlConfiguration loadLegacyConfigFile(File configFile) throws Exception {
         YamlConfiguration config = new YamlConfiguration();
@@ -451,15 +553,72 @@ public class PaperConfigurations extends Configurations<GlobalConfiguration, Wor
     @VisibleForTesting
     static ConfigurationNode createForTesting() {
         ObjectMapper.Factory factory = defaultGlobalFactoryBuilder(ObjectMapper.factoryBuilder()).build();
-        ConfigurationOptions options = defaultGlobalOptions(defaultOptions(ConfigurationOptions.defaults()))
+        ConfigurationOptions options = defaultGlobalOptions(defaultOptions(ConfigurationOptions.defaults()), OriginalStaticValues1.GLOBAL_CONFIG_FILE_NAME) // Fiddle - Fiddle configuration
             .serializers(builder -> builder.register(type -> ConfigurationPart.class.isAssignableFrom(erase(type)), factory.asTypeSerializer()));
         return BasicConfigurationNode.root(options);
     }
 
     // Symlinks are not correctly checked in createDirectories
-    static void createDirectoriesSymlinkAware(Path path) throws IOException {
+    public static void createDirectoriesSymlinkAware(Path path) throws IOException { // Fiddle - Fiddle configuration
         if (!Files.isDirectory(path)) {
             Files.createDirectories(path);
         }
     }
+
+    // Fiddle start - Fiddle configuration
+    public abstract NodePath[] getRemovedWorldPaths();
+
+    public abstract NodePath[] getRemovedGlobalPaths();
+
+    public GlobalConfiguration getGlobalConfig() {
+        try {
+            var getMethod = java.util.Arrays.stream(globalConfigClass.getDeclaredMethods()).filter(method -> java.lang.reflect.Modifier.isStatic(method.getModifiers()) && method.getName().equals("get")).findFirst().get();
+            getMethod.trySetAccessible();
+            return (GlobalConfiguration) getMethod.invoke(null);
+        } catch (Exception e) {
+            throw new RuntimeException(e);
+        }
+    }
+
+    public abstract WorldConfiguration getConfigForLevel(ServerLevel level);
+
+    /**
+     * The original configurations for Paper.
+     */
+    public static final class OriginalPaperConfigurations extends PaperConfigurations<io.papermc.paper.configuration.GlobalConfiguration, io.papermc.paper.configuration.WorldConfiguration> {
+
+        public OriginalPaperConfigurations(Path globalFolder) {
+            super(
+                globalFolder,
+                OriginalStaticValues1.GLOBAL_CONFIG_FILE_NAME,
+                OriginalStaticValues1.WORLD_DEFAULTS_CONFIG_FILE_NAME,
+                OriginalStaticValues1.WORLD_CONFIG_FILE_NAME,
+                OriginalStaticValues2.GLOBAL_HEADER,
+                OriginalStaticValues2.WORLD_DEFAULTS_HEADER,
+                OriginalStaticValues2.WORLD_HEADER,
+                OriginalDefaultAwareTransformations.DEFAULT_AWARE_TRANSFORMATIONS,
+                "Paper",
+                io.papermc.paper.configuration.GlobalConfiguration.class,
+                io.papermc.paper.configuration.WorldConfiguration.class
+            );
+        }
+
+        @Override
+        public NodePath[] getRemovedWorldPaths() {
+            return RemovedConfigurations.REMOVED_WORLD_PATHS;
+        }
+
+        @Override
+        public NodePath[] getRemovedGlobalPaths() {
+            return RemovedConfigurations.REMOVED_GLOBAL_PATHS;
+        }
+
+        @Override
+        public io.papermc.paper.configuration.WorldConfiguration getConfigForLevel(ServerLevel level) {
+            return level.paperConfig();
+        }
+
+    }
+    // Fiddle end - Fiddle configuration
+
 }
diff --git a/src/main/java/io/papermc/paper/configuration/mapping/InnerClassFieldDiscoverer.java b/src/main/java/io/papermc/paper/configuration/mapping/InnerClassFieldDiscoverer.java
index 8f23276796037d048eb114952891a01a40971b3e..f48e783fe810ac57510f8e9dcfeaa02ceffa0ccf 100644
--- a/src/main/java/io/papermc/paper/configuration/mapping/InnerClassFieldDiscoverer.java
+++ b/src/main/java/io/papermc/paper/configuration/mapping/InnerClassFieldDiscoverer.java
@@ -48,6 +48,19 @@ public final class InnerClassFieldDiscoverer implements FieldDiscoverer<Map<Fiel
         return new InnerClassFieldDiscoverer(overrides);
     }
 
+    // Fiddle start - Fiddle configuration
+    public static FieldDiscoverer<?> fiddleWorldConfig(Configurations.ContextMap contextMap) {
+        final Map<Class<?>, Object> overrides = Map.of(
+            org.fiddlemc.fiddle.configuration.FiddleWorldConfiguration.class,
+            new org.fiddlemc.fiddle.configuration.FiddleWorldConfiguration(
+                contextMap.require(PaperConfigurations.SPIGOT_WORLD_CONFIG_CONTEXT_KEY).get(),
+                contextMap.require(Configurations.WORLD_KEY)
+            )
+        );
+        return new InnerClassFieldDiscoverer(overrides);
+    }
+    // Fiddle end - Fiddle configuration
+
     public static FieldDiscoverer<?> globalConfig() {
         return new InnerClassFieldDiscoverer(Collections.emptyMap());
     }
diff --git a/src/main/java/net/minecraft/server/Main.java b/src/main/java/net/minecraft/server/Main.java
index 7573c12a77797146c51ef2dfe4b2a636df45e21a..fc6f1c7bff66c55bc9704b73fd7c432a43a4bb22 100644
--- a/src/main/java/net/minecraft/server/Main.java
+++ b/src/main/java/net/minecraft/server/Main.java
@@ -128,6 +128,11 @@ public class Main {
                 JvmProfiler.INSTANCE.start(Environment.SERVER);
             }
 
+            // Fiddle start - Fiddle configuration - load Fiddle global configuration before bootstrap
+            var fiddleConfigurations = org.fiddlemc.fiddle.configuration.FiddleConfigurations.get(optionset);
+            fiddleConfigurations.initializeGlobalConfiguration(null);
+            // Fiddle end - Fiddle configuration - load Fiddle global configuration before bootstrap
+
             io.papermc.paper.plugin.PluginInitializerManager.load(optionset); // Paper
             Bootstrap.bootStrap();
             Bootstrap.validate();
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 4ba114a9301c3d35be6a97730421fee5b0e8a9c9..fd6284fa42ba9d388fa5ac92d501f4eb28eb5ec9 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -305,7 +305,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     private static final int SAMPLE_INTERVAL = 20; // Paper
     public final double[] recentTps = new double[ 3 ];
     // Spigot end
-    public final io.papermc.paper.configuration.PaperConfigurations paperConfigurations;
+    public final io.papermc.paper.configuration.PaperConfigurations.OriginalPaperConfigurations paperConfigurations; // Fiddle - Fiddle configuration
     public static long currentTickLong = 0L; // Paper
 
     public volatile Thread shutdownThread; // Paper
diff --git a/src/main/java/net/minecraft/server/Services.java b/src/main/java/net/minecraft/server/Services.java
index a5450eeeab5a6b0ab273810063806d11107d6b26..62be1f708f4c4d282536da159f648c1668b292d7 100644
--- a/src/main/java/net/minecraft/server/Services.java
+++ b/src/main/java/net/minecraft/server/Services.java
@@ -11,14 +11,14 @@ import net.minecraft.server.players.GameProfileCache;
 import net.minecraft.util.SignatureValidator;
 
 // Paper start
-public record Services(MinecraftSessionService sessionService, ServicesKeySet servicesKeySet, GameProfileRepository profileRepository, GameProfileCache profileCache, @javax.annotation.Nullable io.papermc.paper.configuration.PaperConfigurations paperConfigurations) {
+public record Services(MinecraftSessionService sessionService, ServicesKeySet servicesKeySet, GameProfileRepository profileRepository, GameProfileCache profileCache, @javax.annotation.Nullable io.papermc.paper.configuration.PaperConfigurations.OriginalPaperConfigurations paperConfigurations) { // Fiddle - Fiddle configuration
 
     public Services(MinecraftSessionService sessionService, ServicesKeySet servicesKeySet, GameProfileRepository profileRepository, GameProfileCache profileCache) {
         this(sessionService, servicesKeySet, profileRepository, profileCache, null);
     }
 
     @Override
-    public io.papermc.paper.configuration.PaperConfigurations paperConfigurations() {
+    public io.papermc.paper.configuration.PaperConfigurations.OriginalPaperConfigurations paperConfigurations() { // Fiddle - Fiddle configuration
         return java.util.Objects.requireNonNull(this.paperConfigurations);
     }
     // Paper end
@@ -30,8 +30,8 @@ public record Services(MinecraftSessionService sessionService, ServicesKeySet se
         GameProfileCache gameProfileCache = new GameProfileCache(gameProfileRepository, userCacheFile); // Paper
         // Paper start
         final java.nio.file.Path legacyConfigPath = ((File) optionSet.valueOf("paper-settings")).toPath();
-        final java.nio.file.Path configDirPath = ((File) optionSet.valueOf("paper-settings-directory")).toPath();
-        io.papermc.paper.configuration.PaperConfigurations paperConfigurations = io.papermc.paper.configuration.PaperConfigurations.setup(legacyConfigPath, configDirPath, rootDirectory.toPath(), (File) optionSet.valueOf("spigot-settings"));
+        final java.nio.file.Path configDirPath = getConfigDirPath(optionSet); // Fiddle - Fiddle configuration - load Fiddle global configuration before bootstrap
+        var paperConfigurations = io.papermc.paper.configuration.PaperConfigurations.setup(legacyConfigPath, configDirPath, rootDirectory.toPath(), (File) optionSet.valueOf("spigot-settings")); // Fiddle - Fiddle configuration
         return new Services(minecraftSessionService, authenticationService.getServicesKeySet(), gameProfileRepository, gameProfileCache, paperConfigurations);
         // Paper end
     }
@@ -44,4 +44,11 @@ public record Services(MinecraftSessionService sessionService, ServicesKeySet se
     public boolean canValidateProfileKeys() {
         return !this.servicesKeySet.keys(ServicesKeyType.PROFILE_KEY).isEmpty();
     }
+
+    // Fiddle start - Fiddle configuration - load Fiddle global configuration before bootstrap
+    public static java.nio.file.Path getConfigDirPath(joptsimple.OptionSet optionSet) {
+        return ((File) optionSet.valueOf("paper-settings-directory")).toPath();
+    }
+    // Fiddle end - Fiddle configuration - load Fiddle global configuration before bootstrap
+
 }
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index 58536aabf607015939a1326f80207c0a06eed8ff..04d5891abf7eef4d973d74c59d8826e860b4f020 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -208,6 +208,9 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         io.papermc.paper.util.ObfHelper.INSTANCE.getClass(); // Paper - load mappings for stacktrace deobf and etc.
         paperConfigurations.initializeGlobalConfiguration(this.registryAccess());
         paperConfigurations.initializeWorldDefaultsConfiguration(this.registryAccess());
+        // Fiddle start - Fiddle configuration
+        org.fiddlemc.fiddle.configuration.FiddleConfigurations.get(this.options).initializeWorldDefaultsConfiguration(this.registryAccess());
+        // Fiddle end - Fiddle configuration
         // Paper start - moved up to right after PlayerList creation but before file load/save
         if (this.convertOldUsers()) {
             this.getProfileCache().save(false); // Paper
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index b78a9628a88f2a495ef6de74446a02a14d41a1f6..cc7f2d52fbaac1b9ce792c1a3ff45f697030405b 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -693,7 +693,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
         // Holder holder = worlddimension.type(); // CraftBukkit - decompile error
 
         // Objects.requireNonNull(minecraftserver); // CraftBukkit - decompile error
-        super(iworlddataserver, resourcekey, minecraftserver.registryAccess(), worlddimension.type(), minecraftserver::getProfiler, false, flag, i, minecraftserver.getMaxChainedNeighborUpdates(), gen, biomeProvider, env, spigotConfig -> minecraftserver.paperConfigurations.createWorldConfig(io.papermc.paper.configuration.PaperConfigurations.createWorldContextMap(convertable_conversionsession.levelDirectory.path(), iworlddataserver.getLevelName(), resourcekey.location(), spigotConfig, minecraftserver.registryAccess())), executor); // Paper - Async-Anti-Xray - Pass executor
+        super(iworlddataserver, resourcekey, minecraftserver.registryAccess(), worlddimension.type(), minecraftserver::getProfiler, false, flag, i, minecraftserver.getMaxChainedNeighborUpdates(), gen, biomeProvider, env, spigotConfig -> minecraftserver.paperConfigurations.createWorldConfig(io.papermc.paper.configuration.PaperConfigurations.createWorldContextMap(convertable_conversionsession.levelDirectory.path(), iworlddataserver.getLevelName(), resourcekey.location(), spigotConfig, minecraftserver.registryAccess())), spigotConfig -> org.fiddlemc.fiddle.configuration.FiddleConfigurations.get(null).createWorldConfig(io.papermc.paper.configuration.PaperConfigurations.createWorldContextMap(convertable_conversionsession.levelDirectory.path(), iworlddataserver.getLevelName(), resourcekey.location(), spigotConfig, minecraftserver.registryAccess())), executor); // Paper - Async-Anti-Xray - Pass executor // Fiddle - Fiddle configuration
         this.pvpMode = minecraftserver.isPvpAllowed();
         this.convertable = convertable_conversionsession;
         this.uuid = WorldUUID.getUUID(convertable_conversionsession.levelDirectory.path().toFile());
diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index 0b56e5f7f18fc4286992af22d402205b771165a3..85a7f8e4c1150a911639e07eb0b1ea3fde3070f2 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -177,6 +177,12 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
         return this.paperConfig;
     }
     // Paper end
+    // Fiddle start - Fiddle configuration
+    private final org.fiddlemc.fiddle.configuration.FiddleWorldConfiguration fiddleConfig;
+    public org.fiddlemc.fiddle.configuration.FiddleWorldConfiguration fiddleConfig() {
+        return this.fiddleConfig;
+    }
+    // Fiddle end - Fiddle configuration
 
     public final com.destroystokyo.paper.antixray.ChunkPacketBlockController chunkPacketBlockController; // Paper - Anti-Xray
     public final co.aikar.timings.WorldTimingsHandler timings; // Paper
@@ -213,9 +219,10 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
 
     public abstract ResourceKey<LevelStem> getTypeKey();
 
-    protected Level(WritableLevelData worlddatamutable, ResourceKey<Level> resourcekey, RegistryAccess iregistrycustom, Holder<DimensionType> holder, Supplier<ProfilerFiller> supplier, boolean flag, boolean flag1, long i, int j, org.bukkit.generator.ChunkGenerator gen, org.bukkit.generator.BiomeProvider biomeProvider, org.bukkit.World.Environment env, java.util.function.Function<org.spigotmc.SpigotWorldConfig, io.papermc.paper.configuration.WorldConfiguration> paperWorldConfigCreator, java.util.concurrent.Executor executor) { // Paper - Async-Anti-Xray - Pass executor
+    protected Level(WritableLevelData worlddatamutable, ResourceKey<Level> resourcekey, RegistryAccess iregistrycustom, Holder<DimensionType> holder, Supplier<ProfilerFiller> supplier, boolean flag, boolean flag1, long i, int j, org.bukkit.generator.ChunkGenerator gen, org.bukkit.generator.BiomeProvider biomeProvider, org.bukkit.World.Environment env, java.util.function.Function<org.spigotmc.SpigotWorldConfig, io.papermc.paper.configuration.WorldConfiguration> paperWorldConfigCreator, java.util.function.Function<org.spigotmc.SpigotWorldConfig, org.fiddlemc.fiddle.configuration.FiddleWorldConfiguration> fiddleWorldConfigCreator, java.util.concurrent.Executor executor) { // Paper - Async-Anti-Xray - Pass executor // Fiddle - Fiddle configuration
         this.spigotConfig = new org.spigotmc.SpigotWorldConfig(((net.minecraft.world.level.storage.PrimaryLevelData) worlddatamutable).getLevelName()); // Spigot
         this.paperConfig = paperWorldConfigCreator.apply(this.spigotConfig); // Paper
+        this.fiddleConfig = fiddleWorldConfigCreator.apply(this.spigotConfig); // Fiddle - Fiddle configuration
         this.generator = gen;
         this.world = new CraftWorld((ServerLevel) this, gen, biomeProvider, env);
 
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 805000249535dba4534daf1b0d7842d281e203d6..913162d2461cab3d21b3c2ac8497b2f89ee53490 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -1036,6 +1036,7 @@ public final class CraftServer implements Server {
 
         org.spigotmc.SpigotConfig.init((File) this.console.options.valueOf("spigot-settings")); // Spigot
         this.console.paperConfigurations.reloadConfigs(this.console);
+        org.fiddlemc.fiddle.configuration.FiddleConfigurations.get(null).reloadConfigs(this.console); // Fiddle - Fiddle configuration
         for (ServerLevel world : this.console.getAllLevels()) {
             // world.serverLevelData.setDifficulty(config.difficulty); // Paper - per level difficulty
             world.setSpawnSettings(world.serverLevelData.getDifficulty() != Difficulty.PEACEFUL && config.spawnMonsters, config.spawnAnimals); // Paper - per level difficulty (from MinecraftServer#setDifficulty(ServerLevel, Difficulty, boolean))
diff --git a/src/main/java/org/fiddlemc/fiddle/configuration/FiddleConfigurations.java b/src/main/java/org/fiddlemc/fiddle/configuration/FiddleConfigurations.java
new file mode 100644
index 0000000000000000000000000000000000000000..1579e257e6a9b81f924aad97cae85895b44f3ef7
--- /dev/null
+++ b/src/main/java/org/fiddlemc/fiddle/configuration/FiddleConfigurations.java
@@ -0,0 +1,142 @@
+// Fiddle - Fiddle configuration
+
+package org.fiddlemc.fiddle.configuration;
+
+import io.papermc.paper.configuration.*;
+import io.papermc.paper.configuration.mapping.InnerClassFieldDiscoverer;
+import joptsimple.OptionSet;
+import net.minecraft.server.Services;
+import net.minecraft.server.level.ServerLevel;
+import org.jetbrains.annotations.Nullable;
+import org.spongepowered.configurate.ConfigurateException;
+import org.spongepowered.configurate.ConfigurationNode;
+import org.spongepowered.configurate.NodePath;
+
+import java.io.IOException;
+import java.nio.file.Path;
+import java.util.Collections;
+import java.util.function.Function;
+
+public class FiddleConfigurations extends PaperConfigurations<FiddleGlobalConfiguration, FiddleWorldConfiguration> {
+
+    static final String GLOBAL_CONFIG_FILE_NAME = "fiddle-global.yml"; // paper -> fiddle
+    static final String WORLD_DEFAULTS_CONFIG_FILE_NAME = "fiddle-world-defaults.yml"; // paper -> fiddle
+    static final String WORLD_CONFIG_FILE_NAME = "fiddle-world.yml"; // paper -> fiddle
+
+    private static final String GLOBAL_HEADER = String.format("""
+            This is the global configuration file for Fiddle.
+            Some options may impact gameplay, so use with caution,
+            and make sure you know what each option does before configuring.
+
+            If you need help with the configuration or have any questions related to Fiddle,
+            join us in our Discord, or check the GitHub Wiki pages.
+
+            The world configuration options are inside
+            their respective world folder. The files are named %s
+
+            Wiki: https://github.com/FiddleMC/Fiddle/wiki
+            Discord: https://discord.gg/EduvcVmKS7""", WORLD_CONFIG_FILE_NAME);
+
+    private static final String WORLD_DEFAULTS_HEADER = """
+            This is the world defaults configuration file for Fiddle.
+            Some options may impact gameplay, so use with caution,
+            and make sure you know what each option does before configuring.
+
+            If you need help with the configuration or have any questions related to Fiddle,
+            join us in our Discord, or check the GitHub Wiki pages.
+
+            Configuration options here apply to all worlds, unless you specify overrides inside
+            the world-specific config file inside each world folder.
+
+            Wiki: https://github.com/FiddleMC/Fiddle/wiki
+            Discord: https://discord.gg/EduvcVmKS7""";
+
+    private static final Function<ContextMap, String> WORLD_HEADER = map -> String.format("""
+        This is a world configuration file for Fiddle.
+        This file may start empty but can be filled with settings to override ones in the %s/%s
+        
+        World: %s (%s)""",
+        CONFIG_DIR,
+        WORLD_DEFAULTS_CONFIG_FILE_NAME,
+        map.require(WORLD_NAME),
+        map.require(WORLD_KEY)
+    );
+
+    public FiddleConfigurations(final Path globalFolder) {
+        super(
+            globalFolder,
+            GLOBAL_CONFIG_FILE_NAME,
+            WORLD_DEFAULTS_CONFIG_FILE_NAME,
+            WORLD_CONFIG_FILE_NAME,
+            GLOBAL_HEADER,
+            WORLD_DEFAULTS_HEADER,
+            WORLD_HEADER,
+            Collections.emptyList(),
+            "Fiddle",
+            FiddleGlobalConfiguration.class,
+            FiddleWorldConfiguration.class
+        );
+    }
+
+    @Override
+    protected void applyVersionedWorldConfigTransformations(ConfigurationNode node) throws ConfigurateException {
+        // ADD FUTURE TRANSFORMS HERE
+    }
+
+    @Override
+    protected void applyVersionedGlobalConfigTransformations(ConfigurationNode node) throws ConfigurateException {
+        // ADD FUTURE TRANSFORMS HERE
+    }
+
+    public static FiddleConfigurations setup(final Path configDir) throws Exception {
+        try {
+            PaperConfigurations.createDirectoriesSymlinkAware(configDir);
+            return new FiddleConfigurations(configDir);
+        } catch (final IOException ex) {
+            throw new RuntimeException("Could not setup FiddleConfigurations", ex);
+        }
+    }
+
+    @Override
+    public NodePath[] getRemovedWorldPaths() {
+        return FiddleRemovedConfigurations.REMOVED_WORLD_PATHS;
+    }
+
+    @Override
+    public NodePath[] getRemovedGlobalPaths() {
+        return FiddleRemovedConfigurations.REMOVED_GLOBAL_PATHS;
+    }
+
+    @Override
+    public FiddleWorldConfiguration getConfigForLevel(ServerLevel level) {
+        return level.fiddleConfig();
+    }
+
+    @Override
+    protected org.spongepowered.configurate.objectmapping.FieldDiscoverer<?> createInnerClassFieldDiscoverer(ContextMap contextMap) {
+        return InnerClassFieldDiscoverer.fiddleWorldConfig(contextMap);
+    }
+
+    private static FiddleConfigurations INSTANCE;
+
+    // Fiddle start - Fiddle configuration - load Fiddle global configuration before bootstrap
+    /**
+     * @param optionSet The {@link OptionSet}, which must be non-null if the {@link #INSTANCE} needs to be created.
+     */
+    public static FiddleConfigurations get(@Nullable OptionSet optionSet) {
+        if (INSTANCE == null) {
+            if (optionSet == null) {
+                throw new IllegalStateException();
+            }
+            final java.nio.file.Path configDirPath = Services.getConfigDirPath(optionSet);
+            try {
+                INSTANCE = setup(configDirPath);
+            } catch (Exception e) {
+                throw new RuntimeException(e);
+            }
+        }
+        return INSTANCE;
+    }
+    // Fiddle end - Fiddle configuration - load Fiddle global configuration before bootstrap
+
+}
diff --git a/src/main/java/org/fiddlemc/fiddle/configuration/FiddleGlobalConfiguration.java b/src/main/java/org/fiddlemc/fiddle/configuration/FiddleGlobalConfiguration.java
new file mode 100644
index 0000000000000000000000000000000000000000..37236de96aaf38ffed201cbae052fbc5a7b94224
--- /dev/null
+++ b/src/main/java/org/fiddlemc/fiddle/configuration/FiddleGlobalConfiguration.java
@@ -0,0 +1,33 @@
+// Fiddle - Fiddle configuration - global configuration
+
+package org.fiddlemc.fiddle.configuration;
+
+import com.mojang.logging.LogUtils;
+import io.papermc.paper.configuration.Configuration;
+import io.papermc.paper.configuration.ConfigurationPart;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+import org.slf4j.Logger;
+import org.spongepowered.configurate.objectmapping.meta.*;
+import org.spongepowered.configurate.objectmapping.*;
+
+import java.util.*;
+
+@SuppressWarnings({"CanBeFinal", "FieldCanBeLocal", "FieldMayBeFinal", "NotNullFieldNotInitialized", "InnerClassMayBeStatic"})
+public class FiddleGlobalConfiguration extends ConfigurationPart {
+
+    private static final Logger LOGGER = LogUtils.getClassLogger();
+
+    static final int CURRENT_VERSION = 1;
+    private static FiddleGlobalConfiguration instance;
+    public static FiddleGlobalConfiguration get() {
+        return instance;
+    }
+    static void set(FiddleGlobalConfiguration instance) {
+        FiddleGlobalConfiguration.instance = instance;
+    }
+
+    @Setting(Configuration.VERSION_FIELD)
+    public int version = CURRENT_VERSION;
+
+}
diff --git a/src/main/java/org/fiddlemc/fiddle/configuration/FiddleRemovedConfigurations.java b/src/main/java/org/fiddlemc/fiddle/configuration/FiddleRemovedConfigurations.java
new file mode 100644
index 0000000000000000000000000000000000000000..76adbd0b8bfe9cd5f6dd389263fc6ca7f5f7f748
--- /dev/null
+++ b/src/main/java/org/fiddlemc/fiddle/configuration/FiddleRemovedConfigurations.java
@@ -0,0 +1,13 @@
+// Fiddle - Fiddle configuration
+
+package org.fiddlemc.fiddle.configuration;
+
+import org.spongepowered.configurate.NodePath;
+
+interface FiddleRemovedConfigurations {
+
+    NodePath[] REMOVED_WORLD_PATHS = {};
+
+    NodePath[] REMOVED_GLOBAL_PATHS = {};
+
+}
diff --git a/src/main/java/org/fiddlemc/fiddle/configuration/FiddleWorldConfiguration.java b/src/main/java/org/fiddlemc/fiddle/configuration/FiddleWorldConfiguration.java
new file mode 100644
index 0000000000000000000000000000000000000000..fbcccc1d76dd3ad0c0dc6c0ee35cfdf4c8442e64
--- /dev/null
+++ b/src/main/java/org/fiddlemc/fiddle/configuration/FiddleWorldConfiguration.java
@@ -0,0 +1,35 @@
+// Fiddle - Fiddle configuration - world configuration
+
+package org.fiddlemc.fiddle.configuration;
+
+import com.mojang.logging.LogUtils;
+import io.papermc.paper.configuration.Configuration;
+import io.papermc.paper.configuration.ConfigurationPart;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+import org.slf4j.Logger;
+import org.spongepowered.configurate.objectmapping.meta.*;
+import org.spongepowered.configurate.objectmapping.*;
+
+import java.util.*;
+
+@SuppressWarnings({"FieldCanBeLocal", "FieldMayBeFinal", "NotNullFieldNotInitialized", "InnerClassMayBeStatic"})
+public class FiddleWorldConfiguration extends ConfigurationPart {
+    private static final Logger LOGGER = LogUtils.getLogger();
+    public static final int CURRENT_VERSION = 1;
+
+    private transient final org.spigotmc.SpigotWorldConfig spigotConfig;
+    private transient final net.minecraft.resources.ResourceLocation worldKey;
+    public FiddleWorldConfiguration(org.spigotmc.SpigotWorldConfig spigotConfig, net.minecraft.resources.ResourceLocation worldKey) {
+        this.spigotConfig = spigotConfig;
+        this.worldKey = worldKey;
+    }
+
+    public boolean isDefault() {
+        return this.worldKey.equals(io.papermc.paper.configuration.PaperConfigurations.WORLD_DEFAULTS_KEY);
+    }
+
+    @Setting(Configuration.VERSION_FIELD)
+    public int version = CURRENT_VERSION;
+
+}
