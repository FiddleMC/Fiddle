From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Mon, 10 Jul 2023 22:05:08 +0200
Subject: [PATCH] Modifiable Bukkit enums - Remove hard-coded properties -
 Material - Most properties

Modifies most Material switch-based properties so that they are no longer hard-coded.
Determining the values of the properties instead relies on an internal implementation
that matches the already existing checks in org.bukkit.PerMaterialTest.

The property values are also cached after being computed, for performant access.

The following properties are modified:
* isBlock()
* isEdible()
* isRecord()
* isSolid()
* isAir()
* isFlammable()
* isBurnable()
* isFuel()
* isOccluding()
* hasGravity()
* isItem()
* isInteractable()
* getHardness()
* getBlastResistance()
* getSlipperiness()
* getCraftingRemainingItem()
* getEquipmentSlot()

License: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)
Fiddle - https://fiddlemc.org

diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
index 132303b2b833ad2a36e541a098612d6bec789877..4c182ca08e73a661f1949fef3f773aa413067b85 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
@@ -25,6 +25,7 @@ import java.util.logging.Level;
 import java.util.logging.Logger;
 import net.minecraft.SharedConstants;
 import net.minecraft.advancements.critereon.DeserializationContext;
+import net.minecraft.core.BlockPos;
 import net.minecraft.core.registries.BuiltInRegistries;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.NbtOps;
@@ -37,10 +38,18 @@ import net.minecraft.server.ServerAdvancementManager;
 import net.minecraft.util.GsonHelper;
 import net.minecraft.util.datafix.DataFixers;
 import net.minecraft.util.datafix.fixes.References;
+import net.minecraft.world.InteractionHand;
+import net.minecraft.world.entity.Mob;
+import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.Item;
-import net.minecraft.world.level.block.Block;
+import net.minecraft.world.item.RecordItem;
+import net.minecraft.world.level.EmptyBlockGetter;
+import net.minecraft.world.level.block.*;
+import net.minecraft.world.level.block.entity.AbstractFurnaceBlockEntity;
+import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.storage.LevelResource;
+import net.minecraft.world.phys.BlockHitResult;
 import org.bukkit.Bukkit;
 import org.bukkit.FeatureFlag;
 import org.bukkit.Fluid;
@@ -67,6 +76,12 @@ import org.bukkit.inventory.ItemStack;
 import org.bukkit.material.MaterialData;
 import org.bukkit.plugin.InvalidPluginException;
 import org.bukkit.plugin.PluginDescriptionFile;
+import org.fiddlemc.fiddle.material.CachedMaterialBooleanProperty;
+import org.fiddlemc.fiddle.material.CachedMaterialFloatProperty;
+import org.fiddlemc.fiddle.material.CachedMaterialProperty;
+import org.fiddlemc.fiddle.material.MaterialDefaultImplementations;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 
 @SuppressWarnings("deprecation")
 public final class CraftMagicNumbers implements UnsafeValues {
@@ -74,6 +89,125 @@ public final class CraftMagicNumbers implements UnsafeValues {
 
     private CraftMagicNumbers() {}
 
+    // Fiddle start - modifiable Bukkit enums - Material - remove hard-coded properties - most properties
+    private final CachedMaterialBooleanProperty isBlockCache = new CachedMaterialBooleanProperty(material -> {
+        if (material.isLegacy()) {
+            return MaterialDefaultImplementations.isBlockLegacy(material);
+        }
+        // Based on org.bukkit.PerMaterialTest#isBlock
+        return /*otherMaterial.isAir() || */getBlock(material) != null; // Removed isAir() check due to circular reference
+    });
+    private final CachedMaterialBooleanProperty isEdibleCache = new CachedMaterialBooleanProperty(material -> {
+        // Based on org.bukkit.PerMaterialTest#isEdible
+        return !material.isBlock() && getItem(material).isEdible();
+    });
+    private final CachedMaterialBooleanProperty isRecordCache = new CachedMaterialBooleanProperty(material -> {
+        // Based on org.bukkit.PerMaterialTest#isRecord
+        return getItem(material) instanceof RecordItem;
+    });
+    private final CachedMaterialBooleanProperty isSolidCache = new CachedMaterialBooleanProperty(material -> {
+        // Based on org.bukkit.PerMaterialTest#isSolid
+        return material != Material.AIR && material.isBlock() && getBlock(material).defaultBlockState().blocksMotion();
+    });
+    private final CachedMaterialBooleanProperty isAirCache = new CachedMaterialBooleanProperty(material -> {
+        // Based on org.bukkit.PerMaterialTest#testAir
+       return material.isBlock() && getBlock(material).defaultBlockState().isAir();
+    });
+    private final CachedMaterialBooleanProperty isFlammableCache = new CachedMaterialBooleanProperty(material -> {
+        // Based on org.bukkit.PerMaterialTest#isFlammable
+        return material != Material.AIR && material.isBlock() && getBlock(material).defaultBlockState().ignitedByLava();
+    });
+    private final CachedMaterialBooleanProperty isBurnableCache = new CachedMaterialBooleanProperty(material -> {
+        // Based on org.bukkit.PerMaterialTest#isBurnable
+        return material.isBlock() && ((FireBlock) Blocks.FIRE).igniteOdds.getOrDefault(CraftMagicNumbers.getBlock(material), 0) > 0;
+    });
+    private final CachedMaterialBooleanProperty isFuelCache = new CachedMaterialBooleanProperty(material -> {
+        // Fix for LEGACY_LONG_GRASS, which translates to modern DEAD_BUSH, which is fuel (instead of GRASS, which is not fuel) for data byte 0
+        if (material == Material.LEGACY_LONG_GRASS) {
+            return false;
+        }
+        // Based on org.bukkit.PerMaterialTest#isFuel
+        return material.isItem() && AbstractFurnaceBlockEntity.isFuel(new net.minecraft.world.item.ItemStack(getItem(material)));
+    });
+    private final CachedMaterialBooleanProperty isOccludingCache = new CachedMaterialBooleanProperty(material -> {
+        // Fix for LEGACY_DOUBLE_STEP, LEGACY_WOOD_DOUBLE_STEP, LEGACY_DOUBLE_STONE_SLAB2 and LEGACY_PURPUR_DOUBLE_SLAB, which translate to various modern slabs, which are not necessarily occluding (only their double states would be)
+        if (material == Material.LEGACY_DOUBLE_STEP || material == Material.LEGACY_WOOD_DOUBLE_STEP || material == Material.LEGACY_DOUBLE_STONE_SLAB2 || material == Material.LEGACY_PURPUR_DOUBLE_SLAB) {
+            return true;
+        }
+        // Based on org.bukkit.PerMaterialTest#isOccluding
+        return material.isBlock() && getBlock(material).defaultBlockState().isRedstoneConductor(EmptyBlockGetter.INSTANCE, BlockPos.ZERO);
+    });
+    private final CachedMaterialBooleanProperty hasGravityCache = new CachedMaterialBooleanProperty(material -> {
+        // Based on org.bukkit.PerMaterialTest#hasGravity
+        if (!material.isBlock()) {
+            return false;
+        }
+        var block = getBlock(material);
+        return block instanceof Fallable || block instanceof ScaffoldingBlock;
+    });
+    private final CachedMaterialBooleanProperty isItemCache = new CachedMaterialBooleanProperty(material -> {
+        if (material.isLegacy()) {
+            return MaterialDefaultImplementations.isItemLegacy(material);
+        }
+        // Based on org.bukkit.PerMaterialTest#testItem
+        return material == Material.AIR || getItem(material) != null;
+    });
+    private final CachedMaterialBooleanProperty isInteractableCache = new CachedMaterialBooleanProperty(material -> {
+        // Based on org.bukkit.PerMaterialTest#testInteractable
+        if (!material.isBlock()) {
+            return false;
+        }
+        try {
+            return !getBlock(material).getClass()
+                .getMethod("use", BlockState.class, net.minecraft.world.level.Level.class, BlockPos.class, Player.class, InteractionHand.class, BlockHitResult.class)
+                .getDeclaringClass().equals(BlockBehaviour.class);
+        } catch (NoSuchMethodException ignored) {}
+        return false;
+    });
+    private final CachedMaterialFloatProperty hardnessCache = new CachedMaterialFloatProperty(material -> {
+        if (!material.isBlock()) {
+            return 0;
+        }
+        // Based on org.bukkit.PerMaterialTest#testBlockHardness
+        return getBlock(material).defaultBlockState().destroySpeed;
+    });
+    private final CachedMaterialFloatProperty blastResistanceCache = new CachedMaterialFloatProperty(material -> {
+        if (!material.isBlock()) {
+            return 0;
+        }
+        // Based on org.bukkit.PerMaterialTest#testBlastResistance
+        return getBlock(material).getExplosionResistance();
+    });
+    private final CachedMaterialFloatProperty slipperinessCache = new CachedMaterialFloatProperty(material -> {
+        if (!material.isBlock()) {
+            return 0;
+        }
+        // Based on org.bukkit.PerMaterialTest#testSlipperiness
+        return getBlock(material).getFriction();
+    });
+    private final CachedMaterialProperty<Material> craftingRemainingItemCache = new CachedMaterialProperty<>(
+        Material[]::new,
+        material -> {
+            if (!material.isItem()) {
+                return null;
+            }
+            // Based on org.bukkit.PerMaterialTest#testCraftingRemainingItem
+            @Nullable Item expectedItem = getItem(material).getCraftingRemainingItem();
+            return expectedItem == null ? null : getMaterial(expectedItem);
+        }
+    );
+    private final CachedMaterialProperty<EquipmentSlot> equipmentSlotCache = new CachedMaterialProperty<>(
+        EquipmentSlot[]::new,
+        material -> {
+            if (!material.isItem()) {
+                return null;
+            }
+            // Based on org.bukkit.PerMaterialTest#testEquipmentSlot
+            return CraftEquipmentSlot.getSlot(Mob.getEquipmentSlotForItem(CraftItemStack.asNMSCopy(new ItemStack(material))));
+        }
+    );
+    // Fiddle end - modifiable Bukkit enums - Material - remove hard-coded properties - most properties
+
     // Paper start
     @Override
     public net.kyori.adventure.text.flattener.ComponentFlattener componentFlattener() {
@@ -654,4 +788,97 @@ public final class CraftMagicNumbers implements UnsafeValues {
         public static final int TAG_INT_ARRAY = 11;
         public static final int TAG_ANY_NUMBER = 99;
     }
+
+    // Fiddle start - modifiable Bukkit enums - Material - remove hard-coded properties - most properties
+    @Override
+    public boolean isBlock(Material material) {
+        return this.isBlockCache.get(material);
+    }
+
+    @Override
+    public boolean isEdible(Material material) {
+        return this.isEdibleCache.get(material);
+    }
+
+    @Override
+    public boolean isRecord(Material material) {
+        return this.isRecordCache.get(material);
+    }
+
+    @Override
+    public boolean isSolid(Material material) {
+        return this.isSolidCache.get(material);
+    }
+
+    @Override
+    public boolean isAir(Material material) {
+        return this.isAirCache.get(material);
+    }
+
+    @Override
+    public boolean isFlammable(Material material) {
+        return this.isFlammableCache.get(material);
+    }
+
+    @Override
+    public boolean isBurnable(Material material) {
+        return this.isBurnableCache.get(material);
+    }
+
+    @Override
+    public boolean isFuel(Material material) {
+        return this.isFuelCache.get(material);
+    }
+
+    @Override
+    public boolean isOccluding(Material material) {
+        return this.isOccludingCache.get(material);
+    }
+
+    @Override
+    public boolean hasGravity(Material material) {
+        return this.hasGravityCache.get(material);
+    }
+
+    @Override
+    public boolean isItem(Material material) {
+        return this.isItemCache.get(material);
+    }
+
+    @Override
+    public boolean isInteractable(Material material) {
+        return this.isInteractableCache.get(material);
+    }
+
+    @Override
+    public float getHardness(Material material) {
+        Preconditions.checkArgument(material.isBlock(), "The Material is not a block!");
+        return this.hardnessCache.get(material);
+    }
+
+    @Override
+    public float getBlastResistance(Material material) {
+        Preconditions.checkArgument(material.isBlock(), "The Material is not a block!");
+        return this.blastResistanceCache.get(material);
+    }
+
+    @Override
+    public float getSlipperiness(Material material) {
+        Preconditions.checkArgument(material.isBlock(), "The Material is not a block!");
+        return this.slipperinessCache.get(material);
+    }
+
+    @Override
+    public @Nullable Material getCraftingRemainingItem(Material material) {
+        Preconditions.checkArgument(material.isItem(), "The Material is not an item!");
+        return this.craftingRemainingItemCache.get(material);
+    }
+
+    @Override
+    public @NotNull EquipmentSlot getEquipmentSlot(Material material) {
+        Preconditions.checkArgument(material.isItem(), "The Material is not an item!");
+        return this.equipmentSlotCache.get(material);
+    }
+    // Fiddle end - modifiable Bukkit enums - Material - remove hard-coded properties - most properties
+
 }
diff --git a/src/test/java/org/fiddlemc/fiddle/material/legacy/PerLegacyMaterialTest.java b/src/test/java/org/fiddlemc/fiddle/material/legacy/PerLegacyMaterialTest.java
index 223b30b950d014106b640b3c00f51e531fb107bc..9c6c3a84527c77eda301f5b27f843c045f1dfbbd 100644
--- a/src/test/java/org/fiddlemc/fiddle/material/legacy/PerLegacyMaterialTest.java
+++ b/src/test/java/org/fiddlemc/fiddle/material/legacy/PerLegacyMaterialTest.java
@@ -35,4 +35,83 @@ public class PerLegacyMaterialTest extends AbstractTestingBase {
         }
     }
 
+    // Fiddle start - modifiable Bukkit enums - Material - remove hard-coded properties - most properties
+    @Test
+    public void isBlock() {
+        for (Material material : getMaterials()) {
+            assertEquals("isBlock equals legacy isBlock for " + material, material.isBlockLegacy(), material.isBlock());
+        }
+    }
+
+    @Test
+    public void isEdible() {
+        for (Material material : getMaterials()) {
+            assertEquals("isEdible equals legacy isEdible for " + material, material.isEdibleLegacy(), material.isEdible());
+        }
+    }
+
+    @Test
+    public void isRecord() {
+        for (Material material : getMaterials()) {
+            assertEquals("isRecord equals legacy iisRecord for " + material, material.isRecordLegacy(), material.isRecord());
+        }
+    }
+
+    @Test
+    public void isSolid() {
+        for (Material material : getMaterials()) {
+            assertEquals("isSolid equals legacy isSolid for " + material, material.isSolidLegacy(), material.isSolid());
+        }
+    }
+
+    @Test
+    public void isAir() {
+        for (Material material : getMaterials()) {
+            assertEquals("isAir equals legacy isAir for " + material, material.isAirLegacy(), material.isAir());
+        }
+    }
+
+    @Test
+    public void isFlammable() {
+        for (Material material : getMaterials()) {
+            assertEquals("isFlammable equals legacy isFlammable for " + material, material.isFlammableLegacy(), material.isFlammable());
+        }
+    }
+
+    @Test
+    public void isBurnable() {
+        for (Material material : getMaterials()) {
+            assertEquals("isBurnable equals legacy isBurnable for " + material, material.isBurnableLegacy(), material.isBurnable());
+        }
+    }
+
+    @Test
+    public void isFuel() {
+        for (Material material : getMaterials()) {
+            assertEquals("isFuel equals legacy isFuel for " + material, material.isFuelLegacy(), material.isFuel());
+        }
+    }
+
+    @Test
+    public void isOccluding() {
+        for (Material material : getMaterials()) {
+            assertEquals("isOccluding equals legacy isOccluding for " + material, material.isOccludingLegacy(), material.isOccluding());
+        }
+    }
+
+    @Test
+    public void hasGravity() {
+        for (Material material : getMaterials()) {
+            assertEquals("hasGravity equals legacy hasGravity for " + material, material.hasGravityLegacy(), material.hasGravity());
+        }
+    }
+
+    @Test
+    public void isItem() {
+        for (Material material : getMaterials()) {
+            assertEquals("isItem equals legacy isItem for " + material, material.isItemLegacy(), material.isItem());
+        }
+    }
+    // Fiddle end - modifiable Bukkit enums - Material - remove hard-coded properties - most properties
+
 }
