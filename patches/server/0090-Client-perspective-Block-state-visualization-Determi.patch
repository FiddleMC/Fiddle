From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Sun, 16 Jul 2023 19:24:28 +0200
Subject: [PATCH] Client perspective - Block state visualization - Determine
 and store visualizations

License: Fiddle Public License Agreement 1.0 (included in license/FPL-1.0.txt)
Fiddle - https://fiddlemc.org

diff --git a/src/main/java/net/minecraft/server/Main.java b/src/main/java/net/minecraft/server/Main.java
index f5a2c2dede0ce27db7e514f7c20264fa7256f4ce..e40e392cbe91fbf58b4068c8f94600de83ec114c 100644
--- a/src/main/java/net/minecraft/server/Main.java
+++ b/src/main/java/net/minecraft/server/Main.java
@@ -1,8 +1,6 @@
 package net.minecraft.server;
 
 import com.google.common.collect.Streams;
-import com.mojang.authlib.GameProfile;
-import com.mojang.authlib.yggdrasil.YggdrasilAuthenticationService;
 import com.mojang.datafixers.DataFixer;
 import com.mojang.datafixers.util.Pair;
 import com.mojang.logging.LogUtils;
@@ -22,9 +20,6 @@ import java.util.*;
 import java.util.function.BooleanSupplier;
 import io.papermc.paper.world.ThreadedWorldUpgrader;
 import joptsimple.OptionSet;
-import joptsimple.OptionSpec;
-import joptsimple.util.PathConverter;
-import joptsimple.util.PathProperties;
 import net.bytebuddy.ByteBuddy;
 import net.bytebuddy.description.modifier.Ownership;
 import net.bytebuddy.description.modifier.Visibility;
@@ -63,6 +58,7 @@ import net.minecraft.world.flag.FeatureFlags;
 import net.minecraft.world.level.GameRules;
 import net.minecraft.world.level.LevelSettings;
 import net.minecraft.world.level.WorldDataConfiguration;
+import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.dimension.LevelStem;
 import net.minecraft.world.level.levelgen.WorldDimensions;
 import net.minecraft.world.level.levelgen.WorldOptions;
@@ -73,6 +69,8 @@ import net.minecraft.world.level.storage.LevelSummary;
 import net.minecraft.world.level.storage.PrimaryLevelData;
 import net.minecraft.world.level.storage.WorldData;
 import org.bukkit.Material;
+import org.fiddlemc.fiddle.packet.ClientPerspectiveCategory;
+import org.fiddlemc.fiddle.packet.block.OnePerCategoryBlockStateVisualizationSetupProvider;
 import org.fiddlemc.fiddle.packet.locale.ServerSideTranslations;
 import org.fiddlemc.fiddle.server.FiddleFeatureSupport;
 import org.fiddlemc.fiddle.configuration.FiddleConfigurations;
@@ -93,8 +91,6 @@ import java.io.InputStreamReader;
 import java.util.concurrent.atomic.AtomicReference;
 import java.util.function.Predicate;
 
-import net.minecraft.SharedConstants;
-
 import org.bukkit.configuration.file.YamlConfiguration;
 // CraftBukkit end
 
@@ -249,6 +245,19 @@ public class Main {
             ServerSideTranslations.registerVanillaTranslationReplacement("en_us", "block.minecraft.bookshelf", "Oak Bookshelf");
             // Fiddle end - client perspective - localization - register server-side translations
 
+            // Fiddle start - client perspective - block state visualization - determine and store visualizations
+            // TODO This doesn't do anything interesting yet: should be replaced with an actual mechanism that bases this on the resource pack assets
+            for (var block : BuiltInRegistries.BLOCK) {
+                if (block.isAddedByFiddle()) {
+                    for (var blockState : block.getStateDefinition().getPossibleStates()) {
+                        blockState.visualizationProviders = new OnePerCategoryBlockStateVisualizationSetupProvider(
+                            category -> category == ClientPerspectiveCategory.JAVA_WITH_FIDDLE_CLIENT_MOD ? blockState : Blocks.STONE.defaultBlockState()
+                        );
+                    }
+                }
+            }
+            // Fiddle end - client perspective - block state visualization - determine and store visualizations
+
             // Fiddle start - modifiable Bukkit enums - inject runtime versions - common utilities
             ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader();
             class InjectRuntimeClassVersionHelper {
