From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Tue, 2 Jan 2024 20:54:01 +0100
Subject: [PATCH] Modded registries - Create class for block, item and block
 state registries

Creates subclasses of `Registry`:
* `BlockRegistry`
* `ItemRegistry`
* `BlockStateRegistry`
These are specifically for the following respective registries:
* `BuiltInRegistries.BLOCK`
* `BuiltInRegistries.ITEM`
* `Block.BLOCK_STATE_REGISTRY`

Does not add any behavior to those registry classes: this is added in subsequent patches.

License: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)
Fiddle - https://fiddlemc.org

diff --git a/src/main/java/net/minecraft/core/registries/BuiltInRegistries.java b/src/main/java/net/minecraft/core/registries/BuiltInRegistries.java
index 3a5827ee8faa73695e66bb2f6d95db67b1416957..41dab11cd3322773c765f91707697600c1cdebb9 100644
--- a/src/main/java/net/minecraft/core/registries/BuiltInRegistries.java
+++ b/src/main/java/net/minecraft/core/registries/BuiltInRegistries.java
@@ -133,7 +133,7 @@ public class BuiltInRegistries {
     });
     public static final DefaultedRegistry<Block> BLOCK = registerDefaultedWithIntrusiveHolders(Registries.BLOCK, "air", (registry) -> {
         return Blocks.AIR;
-    });
+    }, org.fiddlemc.fiddle.registry.BlockRegistry::new); // Fiddle - modded registries - class for block registry
     public static final Registry<Enchantment> ENCHANTMENT = registerSimpleWithIntrusiveHolders(Registries.ENCHANTMENT, (registry) -> {
         return Enchantments.BLOCK_FORTUNE;
     });
@@ -142,7 +142,7 @@ public class BuiltInRegistries {
     });
     public static final DefaultedRegistry<Item> ITEM = registerDefaultedWithIntrusiveHolders(Registries.ITEM, "air", (registry) -> {
         return Items.AIR;
-    });
+    }, org.fiddlemc.fiddle.registry.ItemRegistry::new); // Fiddle - modded registries - class for item registry
     public static final DefaultedRegistry<Potion> POTION = registerDefaultedWithIntrusiveHolders(Registries.POTION, "empty", (registry) -> {
         return Potions.EMPTY;
     });
diff --git a/src/main/java/net/minecraft/world/level/block/Block.java b/src/main/java/net/minecraft/world/level/block/Block.java
index 1cf54034251c5f9cb7e936a0ffd25a38f8b01c06..512906b5d977bddd0a218d70479279d7eeeb18e4 100644
--- a/src/main/java/net/minecraft/world/level/block/Block.java
+++ b/src/main/java/net/minecraft/world/level/block/Block.java
@@ -68,7 +68,7 @@ public class Block extends BlockBehaviour implements ItemLike {
     public static final MapCodec<Block> CODEC = simpleCodec(Block::new);
     private static final Logger LOGGER = LogUtils.getLogger();
     private final Holder.Reference<Block> builtInRegistryHolder;
-    public static final IdMapper<BlockState> BLOCK_STATE_REGISTRY = new IdMapper<>();
+    public static final IdMapper<BlockState> BLOCK_STATE_REGISTRY = new org.fiddlemc.fiddle.registry.BlockStateRegistry(); // Fiddle - modded registries - class for block state registry
     private static final LoadingCache<VoxelShape, Boolean> SHAPE_FULL_BLOCK_CACHE = CacheBuilder.newBuilder().maximumSize(512L).weakKeys().build(new CacheLoader<VoxelShape, Boolean>() {
         public Boolean load(VoxelShape voxelshape) {
             return !Shapes.joinIsNotEmpty(Shapes.block(), voxelshape, BooleanOp.NOT_SAME);
diff --git a/src/main/java/org/fiddlemc/fiddle/registry/BlockRegistry.java b/src/main/java/org/fiddlemc/fiddle/registry/BlockRegistry.java
new file mode 100644
index 0000000000000000000000000000000000000000..c2d1ea888d0adcdd62f001b5771687189711482b
--- /dev/null
+++ b/src/main/java/org/fiddlemc/fiddle/registry/BlockRegistry.java
@@ -0,0 +1,33 @@
+// Fiddle - modded registries - class for block registry
+
+package org.fiddlemc.fiddle.registry;
+
+import com.mojang.serialization.Lifecycle;
+import net.minecraft.core.DefaultedMappedRegistry;
+import net.minecraft.core.Holder;
+import net.minecraft.core.Registry;
+import net.minecraft.core.registries.BuiltInRegistries;
+import net.minecraft.resources.ResourceKey;
+import net.minecraft.world.level.block.Block;
+
+/**
+ * An implementation of {@link Registry} specially for {@link BuiltInRegistries#BLOCK}.
+ */
+public final class BlockRegistry extends DefaultedMappedRegistry<Block> {
+
+    public BlockRegistry(String defaultId, ResourceKey<? extends Registry<Block>> key, Lifecycle lifecycle, boolean intrusive) {
+        super(defaultId, key, lifecycle, intrusive);
+    }
+
+    @Override
+    public Holder.Reference<Block> register(ResourceKey<Block> key, Block entry, Lifecycle lifecycle) {
+
+        // Register the entry
+        var reference = super.register(key, entry, lifecycle);
+
+        // Return the reference
+        return reference;
+
+    }
+
+}
diff --git a/src/main/java/org/fiddlemc/fiddle/registry/BlockStateRegistry.java b/src/main/java/org/fiddlemc/fiddle/registry/BlockStateRegistry.java
new file mode 100644
index 0000000000000000000000000000000000000000..f2da8a76f0a70292df2a10cf17a00eb8f326019c
--- /dev/null
+++ b/src/main/java/org/fiddlemc/fiddle/registry/BlockStateRegistry.java
@@ -0,0 +1,26 @@
+// Fiddle - modded registries - class for block state registry
+
+package org.fiddlemc.fiddle.registry;
+
+import net.minecraft.core.IdMapper;
+import net.minecraft.world.level.block.Block;
+import net.minecraft.world.level.block.state.BlockState;
+
+/**
+ * An implementation of {@link IdMapper} specially for {@link Block#BLOCK_STATE_REGISTRY}.
+ */
+public final class BlockStateRegistry extends IdMapper<BlockState> {
+
+    public BlockStateRegistry() {
+        super();
+    }
+
+    @Override
+    public void add(BlockState value) {
+
+        // Add the value
+        super.add(value);
+
+    }
+
+}
diff --git a/src/main/java/org/fiddlemc/fiddle/registry/ItemRegistry.java b/src/main/java/org/fiddlemc/fiddle/registry/ItemRegistry.java
new file mode 100644
index 0000000000000000000000000000000000000000..b8dfbb9de0ef985ded97354bc59f2f222c127714
--- /dev/null
+++ b/src/main/java/org/fiddlemc/fiddle/registry/ItemRegistry.java
@@ -0,0 +1,33 @@
+// Fiddle - modded registries - class for item registry
+
+package org.fiddlemc.fiddle.registry;
+
+import com.mojang.serialization.Lifecycle;
+import net.minecraft.core.DefaultedMappedRegistry;
+import net.minecraft.core.Holder;
+import net.minecraft.core.Registry;
+import net.minecraft.core.registries.BuiltInRegistries;
+import net.minecraft.resources.ResourceKey;
+import net.minecraft.world.item.Item;
+
+/**
+ * An implementation of {@link Registry} specially for {@link BuiltInRegistries#ITEM}.
+ */
+public final class ItemRegistry extends DefaultedMappedRegistry<Item> {
+
+    public ItemRegistry(String defaultId, ResourceKey<? extends Registry<Item>> key, Lifecycle lifecycle, boolean intrusive) {
+        super(defaultId, key, lifecycle, intrusive);
+    }
+
+    @Override
+    public Holder.Reference<Item> register(ResourceKey<Item> key, Item entry, Lifecycle lifecycle) {
+
+        // Register the entry
+        var reference = super.register(key, entry, lifecycle);
+
+        // Return the reference
+        return reference;
+
+    }
+
+}
