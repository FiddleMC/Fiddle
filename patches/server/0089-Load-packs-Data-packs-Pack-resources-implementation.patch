From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Wed, 17 May 2023 18:51:57 +0200
Subject: [PATCH] Load packs - Data packs - Pack resources implementation

License: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)
Fiddle - https://fiddlemc.org

diff --git a/src/main/java/net/minecraft/server/packs/FilePackResources.java b/src/main/java/net/minecraft/server/packs/FilePackResources.java
index 5fc30259ea094ba4115cf0053e9bf79ae01a0487..ebba022e0f629eb05f448862677f2deb19c24ae0 100644
--- a/src/main/java/net/minecraft/server/packs/FilePackResources.java
+++ b/src/main/java/net/minecraft/server/packs/FilePackResources.java
@@ -33,7 +33,7 @@ public class FilePackResources extends AbstractPackResources {
         this.prefix = overlay;
     }
 
-    private static String getPathFromLocation(PackType type, ResourceLocation id) {
+    public static String getPathFromLocation(PackType type, ResourceLocation id) { // Fiddle - load packs - data packs - pack resources - private -> public
         return String.format(Locale.ROOT, "%s/%s/%s", type.getDirectory(), id.getNamespace(), id.getPath());
     }
 
diff --git a/src/main/java/org/fiddlemc/fiddle/pack/FiddlePackMeta.java b/src/main/java/org/fiddlemc/fiddle/pack/FiddlePackMeta.java
index c6e897377a80133df3039394a66e3fcc30886675..29e03b22f44306c5d8b91283c69941848ea79b7e 100644
--- a/src/main/java/org/fiddlemc/fiddle/pack/FiddlePackMeta.java
+++ b/src/main/java/org/fiddlemc/fiddle/pack/FiddlePackMeta.java
@@ -94,10 +94,14 @@ public class FiddlePackMeta {
         @SuppressWarnings({"FieldCanBeLocal", "unused"})
         private final int givenFormat;
         public final @Nullable JsonElement description;
+        // Fiddle start - load packs - data packs - pack resources - meta
+        public final com.google.gson.JsonObject originalJson;
 
-        public DataPackMeta(int givenFormat, @Nullable JsonElement description) {
+        public DataPackMeta(int givenFormat, @Nullable JsonElement description, com.google.gson.JsonObject originalJson) {
+            // Fiddle end - load packs - data packs - pack resources - meta
             this.givenFormat = givenFormat;
             this.description = description;
+            this.originalJson = originalJson; // Fiddle - load packs - data packs - pack resources - meta
         }
 
     }
diff --git a/src/main/java/org/fiddlemc/fiddle/pack/load/data/FiddlePackResources.java b/src/main/java/org/fiddlemc/fiddle/pack/load/data/FiddlePackResources.java
new file mode 100644
index 0000000000000000000000000000000000000000..afb649d174430dd064bd4da06b945b1d82893ef5
--- /dev/null
+++ b/src/main/java/org/fiddlemc/fiddle/pack/load/data/FiddlePackResources.java
@@ -0,0 +1,199 @@
+// Fiddle - load packs - data packs - pack resources
+
+package org.fiddlemc.fiddle.pack.load.data;
+
+import com.google.gson.JsonObject;
+import com.google.gson.JsonPrimitive;
+import com.mojang.logging.LogUtils;
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.server.packs.FilePackResources;
+import net.minecraft.server.packs.PackResources;
+import net.minecraft.server.packs.PackType;
+import net.minecraft.server.packs.metadata.MetadataSectionSerializer;
+import net.minecraft.server.packs.resources.IoSupplier;
+import org.fiddlemc.fiddle.pack.FiddlePack;
+import org.fiddlemc.fiddle.pack.FiddlePackMeta;
+import org.fiddlemc.fiddle.pack.read.filesprovider.DirectoryInPack;
+import org.fiddlemc.fiddle.pack.read.filesprovider.FiddlePackFilesProvider;
+import org.fiddlemc.fiddle.pack.read.filesprovider.FileInPack;
+import org.fiddlemc.fiddle.pack.read.filesprovider.RegularFileInPack;
+import org.fiddlemc.fiddle.pack.read.ContentNamespacedKeyValidation;
+import org.fiddlemc.fiddle.pack.exception.PackException;
+import org.fiddlemc.fiddle.pack.read.meta.FiddlePackMetaParser;
+import org.jetbrains.annotations.NotNull;
+import org.slf4j.Logger;
+
+import javax.annotation.Nullable;
+import java.io.InputStream;
+import java.util.*;
+
+/**
+ * An implementation of {@link PackResources} for Fiddle packs,
+ * backed by a {@link FiddlePackFilesProvider}.
+ */
+public class FiddlePackResources implements PackResources {
+
+    private static final Logger LOGGER = LogUtils.getClassLogger();
+
+    private final String name;
+    private final FiddlePack pack;
+
+    FiddlePackResources(String name, FiddlePack pack) {
+        this.name = name;
+        this.pack = pack;
+    }
+
+    private FiddlePackFilesProvider getFilesProvider() {
+        return this.pack.filesProvider();
+    }
+
+    @Override
+    public @Nullable IoSupplier<InputStream> getRootResource(String @NotNull ... segments) {
+        return this.getResource(String.join("/", segments));
+    }
+
+    /**
+     * Note: this method does not check whether the given {@code id} is
+     * {@linkplain ContentNamespacedKeyValidation#isValidResourceLocation valid}.
+     */
+    @Override
+    public @Nullable IoSupplier<InputStream> getResource(@NotNull PackType type, @NotNull ResourceLocation id) {
+        return this.getResource(FilePackResources.getPathFromLocation(type, id));
+    }
+
+    /**
+     * Note: this method does not check whether the given {@code path} represents a
+     * {@linkplain ContentNamespacedKeyValidation#isValidResourceLocation valid} resource location.
+     */
+    private @Nullable IoSupplier<InputStream> getResource(String path) {
+        try {
+            @Nullable RegularFileInPack regularFileInPack = this.getFilesProvider().getRegularFileByPath(path);
+            return regularFileInPack == null ? null : regularFileInPack.getInputStreamSupplier(false, () -> path);
+        } catch (PackException e) {
+            throw new RuntimeException("An exception occurred while preparing to read a resource ('" + path + "') in a data pack: " + e.getMessage(), e);
+        }
+    }
+
+    private @Nullable DirectoryInPack getPackTypeDirectory(PackType type) {
+        try {
+            return this.getFilesProvider().getTopLevelDirectory(type.getDirectory());
+        } catch (PackException e) {
+            LOGGER.warn("Exception while trying to get the '" + type.getDirectory() + "' folder of pack '" + this.getFilesProvider().getLocation() + "': " + e.getMessage(), e);
+            return null;
+        }
+    }
+
+    /**
+     * This method will not do anything if the given {@code namespace} is not
+     * {@linkplain ContentNamespacedKeyValidation#isValidNamespace valid}.
+     * Any resources with a path that is not {@linkplain ContentNamespacedKeyValidation#isValidPath valid} will
+     * be skipped.
+     */
+    @Override
+    public void listResources(@NotNull PackType type, @NotNull String namespace, @NotNull String prefix, PackResources.@NotNull ResourceOutput consumer) {
+        @Nullable DirectoryInPack typeDirectory = this.getPackTypeDirectory(type);
+        if (typeDirectory == null) {
+            return;
+        }
+        @Nullable DirectoryInPack namespaceDirectory = typeDirectory.getTopLevelDirectory(namespace);
+        if (namespaceDirectory == null) {
+            return;
+        }
+        if (!ContentNamespacedKeyValidation.isValidNamespace(namespace)) {
+            LOGGER.warn("Ignored invalid namespace folder in data pack: {} in {}", type + "/" + namespace, this.getFilesProvider().getLocation());
+            return;
+        }
+        @Nullable DirectoryInPack prefixDirectory = namespaceDirectory.getTopLevelDirectory(prefix);
+        if (prefixDirectory == null) {
+            return;
+        }
+        try {
+            prefixDirectory.getNestedRegularFilesWithPathsStream().forEach(nestedRegularFileWithPath -> {
+                RegularFileInPack nestedRegularFile = nestedRegularFileWithPath.left();
+                String nestedRegularFilePath = nestedRegularFileWithPath.right();
+                if (!ContentNamespacedKeyValidation.isValidPathJSONFilename(nestedRegularFilePath)) {
+                    LOGGER.warn("Ignored invalid file name in data pack: {} in {}", type + "/" + namespace + "/" + prefix + "/" + nestedRegularFilePath, this.getFilesProvider().getLocation());
+                } else {
+                    String resourcePathPart = prefix + "/" + nestedRegularFilePath;
+                    ResourceLocation resourceLocation = ResourceLocation.tryBuild(namespace, resourcePathPart);
+                    if (resourceLocation != null) {
+                        consumer.accept(resourceLocation, nestedRegularFile.getInputStreamSupplier(false, () -> nestedRegularFilePath));
+                    } else {
+                        LOGGER.warn("Invalid path in data pack: {}:{}, ignoring", type + "/" + namespace + "/" + prefix + "/" + nestedRegularFilePath, resourcePathPart);
+                    }
+                }
+            });
+        } catch (PackException e) {
+            LOGGER.warn("Exception while trying to list the data pack resources in pack '" + this.getFilesProvider().getLocation() + "': " + e.getMessage(), e);
+        }
+    }
+
+    /**
+     * This method will not return any namespace that are not
+     * {@linkplain ContentNamespacedKeyValidation#isValidNamespace valid}.
+     */
+    @Override
+    public @NotNull Set<String> getNamespaces(@NotNull PackType type) {
+        DirectoryInPack typeDirectory = this.getPackTypeDirectory(type);
+        if (typeDirectory == null) {
+            return Collections.emptySet();
+        }
+        Set<String> namespaces = new HashSet<>(1);
+        for (FileInPack fileInTypeDirectory : typeDirectory.getTopLevelFiles()) {
+            if (fileInTypeDirectory instanceof DirectoryInPack directoryInTypeDirectory && directoryInTypeDirectory.containsAnyNestedRegularFile()) {
+                try {
+                    String name = directoryInTypeDirectory.getName();
+                    if (ContentNamespacedKeyValidation.isValidNamespace(name)) {
+                        namespaces.add(name);
+                    } else {
+                        LOGGER.warn("Ignored invalid namespace folder in data pack: {} in {}", name, this.getFilesProvider().getLocation());
+                    }
+                } catch (PackException e) {
+                    LOGGER.warn("Exception while trying to get the name of a namespace folder in " + type.getDirectory() + " folder of pack '" + this.getFilesProvider().getLocation() + "': " + e.getMessage(), e);
+                }
+            }
+        }
+        return namespaces;
+    }
+
+    @Override
+    public <T> @org.jetbrains.annotations.Nullable T getMetadataSection(@NotNull MetadataSectionSerializer<T> metaReader) {
+        // We can only provide a metadata section for packs: ignore any other meta readers
+        if (!metaReader.getMetadataSectionName().equals(FiddlePackMetaParser.dataPackMetaPackJsonKey)) {
+            return null;
+        }
+        FiddlePackMeta.DataPackMeta dataPackMeta = Objects.requireNonNull(this.pack.meta().dataPackMeta);
+        JsonObject metaPackJson = dataPackMeta.originalJson.getAsJsonObject(FiddlePackMetaParser.dataPackMetaPackJsonKey).deepCopy();
+        // Set a description for the data pack if it was not explicitly given
+        if (dataPackMeta.description == null) {
+            metaPackJson.add(FiddlePackMetaParser.dataPackMetaDescriptionJsonKey, new JsonPrimitive(pack.meta().displayName + " data pack"));
+        }
+        return metaReader.fromJson(metaPackJson);
+    }
+
+    @Override
+    public @NotNull String packId() {
+        return this.name;
+    }
+
+    @Override
+    public boolean isBuiltin() {
+        return false;
+    }
+
+    @Override
+    protected void finalize() throws Throwable {
+        this.close();
+        super.finalize();
+    }
+
+    @Override
+    public void close() {
+        try {
+            this.getFilesProvider().closeHandlesAndClearCacheUnlessInStartupLoadPhase();
+        } catch (Exception e) {
+            LOGGER.warn("Exception while closing pack resources: " + e.getMessage(), e);
+        }
+    }
+
+}
diff --git a/src/main/java/org/fiddlemc/fiddle/pack/read/meta/FiddlePackMetaParser.java b/src/main/java/org/fiddlemc/fiddle/pack/read/meta/FiddlePackMetaParser.java
index 646583ec11528b1651f4670f1795807018f101d0..34c0a2571b2210c07c04e00d553889b835133d27 100644
--- a/src/main/java/org/fiddlemc/fiddle/pack/read/meta/FiddlePackMetaParser.java
+++ b/src/main/java/org/fiddlemc/fiddle/pack/read/meta/FiddlePackMetaParser.java
@@ -133,7 +133,7 @@ public final class FiddlePackMetaParser {
             if (dataPackDescription != null && dataPackDescription.isJsonNull()) {
                 throw dataPackDescription.nullException();
             }
-            dataPackMeta = new FiddlePackMeta.DataPackMeta(dataPackFormat, dataPackDescription == null ? null : dataPackDescription.unnamed());
+            dataPackMeta = new FiddlePackMeta.DataPackMeta(dataPackFormat, dataPackDescription == null ? null : dataPackDescription.unnamed(), dataPackMetaJson.unnamed()); // Fiddle - load packs - data packs - pack resources - meta
         } else {
             dataPackMeta = null;
         }
