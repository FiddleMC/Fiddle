From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Mon, 10 Jul 2023 22:05:08 +0200
Subject: [PATCH] Modifiable Bukkit enums - Remove hard-coded properties -
 Material - Is empty, is transparent

Modifies the `Material` properties `isEmpty()` and `isTransparent()` so that they are no longer hard-coded directly.

Determining the values of the properties instead relies on functions
(either defined in `UnsafeValues`, and implemented in `CraftMagicNumbers` in the `fiddle-server` module, or defined and implemented in `MaterialDefaultImplementations`)
backed by the same hard-coded list, since the properties are not backed by any implementation that can be used.

License: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)
Fiddle - https://fiddlemc.org

diff --git a/src/main/java/org/bukkit/Material.java b/src/main/java/org/bukkit/Material.java
index 753fdbd7d588d5913bc918eb61ba0e4fcc4bc2d1..0a8e4c247d802feedcdeee8b8dcbed5d58f807fd 100644
--- a/src/main/java/org/bukkit/Material.java
+++ b/src/main/java/org/bukkit/Material.java
@@ -4440,15 +4440,13 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
 
     /**
      * @return If the type is either AIR, CAVE_AIR or VOID_AIR
+     * <!-- // Fiddle start - modifiable Bukkit enums - Material - remove hard-coded properties - is empty -->
+     * Because this method is exactly defined to be these types (as opposed to "any block that is empty" or "any block that is air"),
+     * it returns false for all materials added with Fiddle..
+     * <!-- // Fiddle end - modifiable Bukkit enums - Material - remove hard-coded properties - is empty -->
      */
     public boolean isEmpty() {
-        switch (this) {
-            case AIR:
-            case CAVE_AIR:
-            case VOID_AIR:
-                return true;
-        }
-        return false;
+        return org.fiddlemc.fiddle.material.MaterialDefaultImplementations.isEmpty(this); // Fiddle - modifiable Bukkit enums - Material - remove hard-coded properties - is empty
     }
 
     @Override
@@ -5086,142 +5084,22 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
      * @return True if this material is a block and does not block any light
      * @deprecated currently does not have an implementation which is well
      * linked to the underlying server. Contributions welcome.
+     * Because there is no linked implementation, this method returns false for all materials added with Fiddle.<!-- // Fiddle - modifiable Bukkit enums - Material - remove hard-coded properties - is transparent -->
      */
     @Deprecated
     public boolean isTransparent() {
-        if (!isBlock()) {
-            return false;
-        }
+        // Fiddle start - modifiable Bukkit enums - Material - remove hard-coded properties - is transparent
+        return Bukkit.getUnsafe().isTransparent(this);
+    }
+
+    /**
+     * @deprecated Do not use: this method is for internal testing purposes only.
+     */
+    @Deprecated(forRemoval = true)
+    public boolean isTransparentLegacy() {
         switch (this) {
-            //<editor-fold defaultstate="collapsed" desc="isTransparent">
-            case ACACIA_BUTTON:
-            case ACACIA_SAPLING:
-            case ACTIVATOR_RAIL:
-            case AIR:
-            case ALLIUM:
-            case ATTACHED_MELON_STEM:
-            case ATTACHED_PUMPKIN_STEM:
-            case AZURE_BLUET:
-            case BARRIER:
-            case BEETROOTS:
-            case BIRCH_BUTTON:
-            case BIRCH_SAPLING:
-            case BLACK_CARPET:
-            case BLUE_CARPET:
-            case BLUE_ORCHID:
-            case BROWN_CARPET:
-            case BROWN_MUSHROOM:
-            case CARROTS:
-            case CAVE_AIR:
-            case CHORUS_FLOWER:
-            case CHORUS_PLANT:
-            case COCOA:
-            case COMPARATOR:
-            case CREEPER_HEAD:
-            case CREEPER_WALL_HEAD:
-            case CYAN_CARPET:
-            case DANDELION:
-            case DARK_OAK_BUTTON:
-            case DARK_OAK_SAPLING:
-            case DEAD_BUSH:
-            case DETECTOR_RAIL:
-            case DRAGON_HEAD:
-            case DRAGON_WALL_HEAD:
-            case END_GATEWAY:
-            case END_PORTAL:
-            case END_ROD:
-            case FERN:
-            case FIRE:
-            case FLOWER_POT:
-            case GRASS:
-            case GRAY_CARPET:
-            case GREEN_CARPET:
-            case JUNGLE_BUTTON:
-            case JUNGLE_SAPLING:
-            case LADDER:
-            case LARGE_FERN:
-            case LEVER:
-            case LIGHT_BLUE_CARPET:
-            case LIGHT_GRAY_CARPET:
-            case LILAC:
-            case LILY_PAD:
-            case LIME_CARPET:
-            case MAGENTA_CARPET:
-            case MELON_STEM:
-            case NETHER_PORTAL:
-            case NETHER_WART:
-            case OAK_BUTTON:
-            case OAK_SAPLING:
-            case ORANGE_CARPET:
-            case ORANGE_TULIP:
-            case OXEYE_DAISY:
-            case PEONY:
-            case PINK_CARPET:
-            case PINK_TULIP:
-            case PLAYER_HEAD:
-            case PLAYER_WALL_HEAD:
-            case POPPY:
-            case POTATOES:
-            case POTTED_ACACIA_SAPLING:
-            case POTTED_ALLIUM:
-            case POTTED_AZALEA_BUSH:
-            case POTTED_AZURE_BLUET:
-            case POTTED_BIRCH_SAPLING:
-            case POTTED_BLUE_ORCHID:
-            case POTTED_BROWN_MUSHROOM:
-            case POTTED_CACTUS:
-            case POTTED_DANDELION:
-            case POTTED_DARK_OAK_SAPLING:
-            case POTTED_DEAD_BUSH:
-            case POTTED_FERN:
-            case POTTED_FLOWERING_AZALEA_BUSH:
-            case POTTED_JUNGLE_SAPLING:
-            case POTTED_OAK_SAPLING:
-            case POTTED_ORANGE_TULIP:
-            case POTTED_OXEYE_DAISY:
-            case POTTED_PINK_TULIP:
-            case POTTED_POPPY:
-            case POTTED_RED_MUSHROOM:
-            case POTTED_RED_TULIP:
-            case POTTED_SPRUCE_SAPLING:
-            case POTTED_WHITE_TULIP:
-            case POWERED_RAIL:
-            case PUMPKIN_STEM:
-            case PURPLE_CARPET:
-            case RAIL:
-            case REDSTONE_TORCH:
-            case REDSTONE_WALL_TORCH:
-            case REDSTONE_WIRE:
-            case RED_CARPET:
-            case RED_MUSHROOM:
-            case RED_TULIP:
-            case REPEATER:
-            case ROSE_BUSH:
-            case SKELETON_SKULL:
-            case SKELETON_WALL_SKULL:
-            case SNOW:
-            case SPRUCE_BUTTON:
-            case SPRUCE_SAPLING:
-            case STONE_BUTTON:
-            case STRUCTURE_VOID:
-            case SUGAR_CANE:
-            case SUNFLOWER:
-            case TALL_GRASS:
-            case TORCH:
-            case TRIPWIRE:
-            case TRIPWIRE_HOOK:
-            case VINE:
-            case VOID_AIR:
-            case WALL_TORCH:
-            case WHEAT:
-            case WHITE_CARPET:
-            case WHITE_TULIP:
-            case WITHER_SKELETON_SKULL:
-            case WITHER_SKELETON_WALL_SKULL:
-            case YELLOW_CARPET:
-            case ZOMBIE_HEAD:
-            case ZOMBIE_WALL_HEAD:
-            // ----- Legacy Separator -----
+            //<editor-fold defaultstate="collapsed" desc="isTransparentLegacy">
+            // Fiddle end - modifiable Bukkit enums - Material - remove hard-coded properties - is transparent
             case LEGACY_AIR:
             case LEGACY_SAPLING:
             case LEGACY_POWERED_RAIL:
diff --git a/src/main/java/org/bukkit/UnsafeValues.java b/src/main/java/org/bukkit/UnsafeValues.java
index 35e98fd602e1ec0bec8e9d15aedea76fe039102c..114073f7068438a149600e9b48c8d2008a822083 100644
--- a/src/main/java/org/bukkit/UnsafeValues.java
+++ b/src/main/java/org/bukkit/UnsafeValues.java
@@ -297,6 +297,8 @@ public interface UnsafeValues {
 
     boolean isAir(Material material);
 
+    boolean isTransparent(Material material); // Fiddle - modifiable Bukkit enums - Material - remove hard-coded properties - is transparent
+
     boolean isFlammable(Material material);
 
     boolean isBurnable(Material material);
diff --git a/src/main/java/org/fiddlemc/fiddle/material/MaterialDefaultImplementations.java b/src/main/java/org/fiddlemc/fiddle/material/MaterialDefaultImplementations.java
index 948eda0324709a816803ff979901500250c9f540..6157337d6da3ce508b9a4a989c4a138a9bf9961b 100644
--- a/src/main/java/org/fiddlemc/fiddle/material/MaterialDefaultImplementations.java
+++ b/src/main/java/org/fiddlemc/fiddle/material/MaterialDefaultImplementations.java
@@ -18,6 +18,16 @@ public final class MaterialDefaultImplementations {
         throw new RuntimeException();
     }
 
+    // Fiddle start - modifiable Bukkit enums - Material - remove hard-coded properties - is empty
+    public static boolean isEmpty(Material material) {
+        // Based on the original org.bukkit.Material#isEmpty()
+        return switch (material) {
+            case AIR, CAVE_AIR, VOID_AIR -> true;
+            default -> false;
+        };
+    }
+    // Fiddle end - modifiable Bukkit enums - Material - remove hard-coded properties - is empty
+
     // Fiddle start - modifiable Bukkit enums - Material - remove hard-coded properties - durability
     public static boolean hasNonZeroMaxDurability(Material material) {
         return material.getMaxDurability() != 0;
