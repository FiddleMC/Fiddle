From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Mon, 10 Jul 2023 22:05:08 +0200
Subject: [PATCH] Modifiable Bukkit enums - Remove hard-coded properties -
 Material - Utilities

Adds the CachedMaterialProperty (and sibling) utility classes,
and adds the MaterialDefaultImplementations class (empty, to be populated in following commits).

License: Fiddle Public License Agreement 1.0 (included in license/FPL-1.0.txt)
Fiddle - https://fiddlemc.org

diff --git a/src/main/java/org/fiddlemc/fiddle/material/CachedMaterialBooleanProperty.java b/src/main/java/org/fiddlemc/fiddle/material/CachedMaterialBooleanProperty.java
new file mode 100644
index 0000000000000000000000000000000000000000..91b883cd8f830ff5a8710f53c332ea5c849c4775
--- /dev/null
+++ b/src/main/java/org/fiddlemc/fiddle/material/CachedMaterialBooleanProperty.java
@@ -0,0 +1,51 @@
+// Fiddle start - modifiable Bukkit enums - Material - remove hard-coded properties - utilities
+
+package org.fiddlemc.fiddle.material;
+
+import org.bukkit.Material;
+import org.bukkit.UndefinedNullability;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+/**
+ * A sibling of {@link CachedMaterialProperty} that represents a {@code boolean} property.
+ */
+public class CachedMaterialBooleanProperty {
+
+    /**
+     * A function mapping an {@linkplain T Object} to a {@code boolean}.
+     * This class is analogous to {@link java.util.function.IntFunction}.
+     */
+    @FunctionalInterface
+    public interface ToBooleanFunction<T> {
+
+        /**
+         * Applies this function to the given argument.
+         *
+         * @param value the function argument
+         * @return the function result
+         */
+        @SuppressWarnings("deprecation")
+        boolean applyAsBoolean(@UndefinedNullability T value);
+
+    }
+
+    private final @NotNull ToBooleanFunction<@NotNull Material> propertyFunction;
+
+    private boolean @Nullable [] cache;
+
+    public CachedMaterialBooleanProperty(@NotNull ToBooleanFunction<@NotNull Material> propertyFunction) {
+        this.propertyFunction = propertyFunction;
+    }
+
+    public boolean get(@NotNull Material material) {
+        if (this.cache == null) {
+            this.cache = new boolean[CachedMaterialProperty.getCachedMaterialValues().length];
+            for (Material otherMaterial : CachedMaterialProperty.getCachedMaterialValues()) {
+                this.cache[otherMaterial.ordinal()] = propertyFunction.applyAsBoolean(otherMaterial);
+            }
+        }
+        return this.cache[material.ordinal()];
+    }
+
+}
diff --git a/src/main/java/org/fiddlemc/fiddle/material/CachedMaterialFloatProperty.java b/src/main/java/org/fiddlemc/fiddle/material/CachedMaterialFloatProperty.java
new file mode 100644
index 0000000000000000000000000000000000000000..bf51e306141039bf644d7cab6578da38c3ede48d
--- /dev/null
+++ b/src/main/java/org/fiddlemc/fiddle/material/CachedMaterialFloatProperty.java
@@ -0,0 +1,51 @@
+// Fiddle start - modifiable Bukkit enums - Material - remove hard-coded properties - utilities
+
+package org.fiddlemc.fiddle.material;
+
+import org.bukkit.Material;
+import org.bukkit.UndefinedNullability;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+/**
+ * A sibling of {@link CachedMaterialProperty} that represents a {@code float} property.
+ */
+public class CachedMaterialFloatProperty {
+
+    /**
+     * A function mapping an {@linkplain T Object} to a {@code float}.
+     * This class is analogous to {@link java.util.function.IntFunction}.
+     */
+    @FunctionalInterface
+    public interface ToFloatFunction<T> {
+
+        /**
+         * Applies this function to the given argument.
+         *
+         * @param value the function argument
+         * @return the function result
+         */
+        @SuppressWarnings("deprecation")
+        float applyAsFloat(@UndefinedNullability T value);
+
+    }
+
+    private final @NotNull ToFloatFunction<@NotNull Material> propertyFunction;
+
+    private float @Nullable [] cache;
+
+    public CachedMaterialFloatProperty(@NotNull ToFloatFunction<@NotNull Material> propertyFunction) {
+        this.propertyFunction = propertyFunction;
+    }
+
+    public float get(@NotNull Material material) {
+        if (this.cache == null) {
+            this.cache = new float[CachedMaterialProperty.getCachedMaterialValues().length];
+            for (Material otherMaterial : CachedMaterialProperty.getCachedMaterialValues()) {
+                this.cache[otherMaterial.ordinal()] = propertyFunction.applyAsFloat(otherMaterial);
+            }
+        }
+        return this.cache[material.ordinal()];
+    }
+
+}
diff --git a/src/main/java/org/fiddlemc/fiddle/material/CachedMaterialIntProperty.java b/src/main/java/org/fiddlemc/fiddle/material/CachedMaterialIntProperty.java
new file mode 100644
index 0000000000000000000000000000000000000000..3523c1a7d7f22696a42b813a7d706ce58f057ff9
--- /dev/null
+++ b/src/main/java/org/fiddlemc/fiddle/material/CachedMaterialIntProperty.java
@@ -0,0 +1,34 @@
+// Fiddle start - modifiable Bukkit enums - Material - remove hard-coded properties - utilities
+
+package org.fiddlemc.fiddle.material;
+
+import org.bukkit.Material;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.function.ToIntFunction;
+
+/**
+ * A sibling of {@link CachedMaterialProperty} that represents an {@code int} property.
+ */
+public class CachedMaterialIntProperty {
+
+    private final @NotNull ToIntFunction<@NotNull Material> propertyFunction;
+
+    private int @Nullable [] cache;
+
+    public CachedMaterialIntProperty(@NotNull ToIntFunction<@NotNull Material> propertyFunction) {
+        this.propertyFunction = propertyFunction;
+    }
+
+    public int get(@NotNull Material material) {
+        if (this.cache == null) {
+            this.cache = new int[CachedMaterialProperty.getCachedMaterialValues().length];
+            for (Material otherMaterial : CachedMaterialProperty.getCachedMaterialValues()) {
+                this.cache[otherMaterial.ordinal()] = propertyFunction.applyAsInt(otherMaterial);
+            }
+        }
+        return this.cache[material.ordinal()];
+    }
+
+}
diff --git a/src/main/java/org/fiddlemc/fiddle/material/CachedMaterialProperty.java b/src/main/java/org/fiddlemc/fiddle/material/CachedMaterialProperty.java
new file mode 100644
index 0000000000000000000000000000000000000000..2ee394de3974c6eac8bdeadc787153711d7afb29
--- /dev/null
+++ b/src/main/java/org/fiddlemc/fiddle/material/CachedMaterialProperty.java
@@ -0,0 +1,57 @@
+// Fiddle start - modifiable Bukkit enums - Material - remove hard-coded properties - utilities
+
+package org.fiddlemc.fiddle.material;
+
+import org.bukkit.Material;
+import org.bukkit.UndefinedNullability;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+import org.jetbrains.annotations.UnknownNullability;
+
+import java.util.function.Function;
+import java.util.function.IntFunction;
+
+/**
+ * A cache for a {@link Material} property.
+ * The first time that the value for a {@link Material} is requested, the value is computed and cached for each
+ * {@link Material}.
+ */
+public class CachedMaterialProperty<T> {
+
+    /**
+     * A lazily (when {@link #getCachedMaterialValues()} is first called) computed copy of {@link Material#values()}.
+     */
+    static @NotNull Material @Nullable [] cachedMaterialValues = null;
+
+    /**
+     * @see #cachedMaterialValues
+     */
+    static @NotNull Material @NotNull [] getCachedMaterialValues() {
+        if (cachedMaterialValues == null) {
+            cachedMaterialValues = Material.values();
+        }
+        return cachedMaterialValues;
+    }
+
+    private final @NotNull IntFunction<T @NotNull []> arrayConstructor;
+    private final @NotNull Function<@NotNull Material, T> propertyFunction;
+
+    private T @Nullable [] cache;
+
+    public CachedMaterialProperty(@NotNull IntFunction<T @NotNull []> arrayConstructor, @NotNull Function<@NotNull Material, @UnknownNullability T> propertyFunction) {
+        this.arrayConstructor = arrayConstructor;
+        this.propertyFunction = propertyFunction;
+    }
+
+    @SuppressWarnings("deprecation")
+    public @UndefinedNullability T get(@NotNull Material material) {
+        if (this.cache == null) {
+            this.cache = arrayConstructor.apply(getCachedMaterialValues().length);
+            for (Material otherMaterial : getCachedMaterialValues()) {
+                this.cache[otherMaterial.ordinal()] = propertyFunction.apply(otherMaterial);
+            }
+        }
+        return this.cache[material.ordinal()];
+    }
+
+}
diff --git a/src/main/java/org/fiddlemc/fiddle/material/CachedMaterialShortProperty.java b/src/main/java/org/fiddlemc/fiddle/material/CachedMaterialShortProperty.java
new file mode 100644
index 0000000000000000000000000000000000000000..5476a0c7fce77a2cf259b7ec9646b0c855b00748
--- /dev/null
+++ b/src/main/java/org/fiddlemc/fiddle/material/CachedMaterialShortProperty.java
@@ -0,0 +1,51 @@
+// Fiddle start - modifiable Bukkit enums - Material - remove hard-coded properties - utilities
+
+package org.fiddlemc.fiddle.material;
+
+import org.bukkit.Material;
+import org.bukkit.UndefinedNullability;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+/**
+ * A sibling of {@link CachedMaterialProperty} that represents a {@code short} property.
+ */
+public class CachedMaterialShortProperty {
+
+    /**
+     * A function mapping an {@linkplain T Object} to a {@code short}.
+     * This class is analogous to {@link java.util.function.IntFunction}.
+     */
+    @FunctionalInterface
+    public interface ToShortFunction<T> {
+
+        /**
+         * Applies this function to the given argument.
+         *
+         * @param value the function argument
+         * @return the function result
+         */
+        @SuppressWarnings("deprecation")
+        short applyAsShort(@UndefinedNullability T value);
+
+    }
+
+    private final @NotNull ToShortFunction<@NotNull Material> propertyFunction;
+
+    private short @Nullable [] cache;
+
+    public CachedMaterialShortProperty(@NotNull ToShortFunction<@NotNull Material> propertyFunction) {
+        this.propertyFunction = propertyFunction;
+    }
+
+    public short get(@NotNull Material material) {
+        if (this.cache == null) {
+            this.cache = new short[CachedMaterialProperty.getCachedMaterialValues().length];
+            for (Material otherMaterial : CachedMaterialProperty.getCachedMaterialValues()) {
+                this.cache[otherMaterial.ordinal()] = propertyFunction.applyAsShort(otherMaterial);
+            }
+        }
+        return this.cache[material.ordinal()];
+    }
+
+}
diff --git a/src/main/java/org/fiddlemc/fiddle/material/MaterialDefaultImplementations.java b/src/main/java/org/fiddlemc/fiddle/material/MaterialDefaultImplementations.java
new file mode 100644
index 0000000000000000000000000000000000000000..d1ca826aa4081ce7766c5ad705a3e772c2683860
--- /dev/null
+++ b/src/main/java/org/fiddlemc/fiddle/material/MaterialDefaultImplementations.java
@@ -0,0 +1,20 @@
+// Fiddle start - modifiable Bukkit enums - Material - remove hard-coded properties - utilities
+
+package org.fiddlemc.fiddle.material;
+
+import org.bukkit.Material;
+
+/**
+ * This class provides a number of default implementations for {@link Material} that
+ * must be available in the API module for unit tests.
+ *
+ * @deprecated Do not use: for internal use only.
+ */
+@Deprecated(forRemoval = true)
+public final class MaterialDefaultImplementations {
+
+    private MaterialDefaultImplementations() {
+        throw new RuntimeException();
+    }
+
+}
