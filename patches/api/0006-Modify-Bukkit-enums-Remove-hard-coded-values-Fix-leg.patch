From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Tue, 6 Jun 2023 12:04:00 +0200
Subject: [PATCH] Modify Bukkit enums - Remove hard-coded values - Fix legacy
 item conversion

License: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)
Fiddle - https://fiddlemc.org

diff --git a/src/main/java/org/bukkit/Material.java b/src/main/java/org/bukkit/Material.java
index 922071b7a44a7255ddfcd4fd6a2e43c7e5ef2c95..ac38454772cdcb705fe20f947559359e3c808170 100644
--- a/src/main/java/org/bukkit/Material.java
+++ b/src/main/java/org/bukkit/Material.java
@@ -5900,6 +5900,7 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
      * @param name Name of the material to get
      * @param legacyName whether this is a legacy name lookup
      * @return Material if found, or null
+     * @deprecated Do not use legacy names. <!-- // Fiddle - remove hard-coded Bukkit values - Material - fix legacy item conversion -->
      */
     @Nullable
     public static Material getMaterial(@NotNull String name, boolean legacyName) {
@@ -5909,7 +5910,7 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
             }
 
             Material match = BY_NAME.get(name);
-            return Bukkit.getUnsafe().fromLegacy(match);
+            return Bukkit.getUnsafe().fromLegacy(match, false); // Fiddle - remove hard-coded Bukkit values - Material - fix legacy item conversion
         }
 
         return BY_NAME.get(name);
diff --git a/src/main/java/org/bukkit/UnsafeValues.java b/src/main/java/org/bukkit/UnsafeValues.java
index c661eab343ae76488de701630424e2d589f44fc0..008ec1c4f74a926df805095fa99fdc21436fe34a 100644
--- a/src/main/java/org/bukkit/UnsafeValues.java
+++ b/src/main/java/org/bukkit/UnsafeValues.java
@@ -38,8 +38,23 @@ public interface UnsafeValues {
     void reportTimings(); // Paper
     Material toLegacy(Material material);
 
+
+    // Fiddle start - remove hard-coded Bukkit values - Material - fix legacy item conversion
+    /**
+     * @deprecated Use {@link #fromLegacy(Material, boolean)} instead.
+     */
+    @Deprecated
+    // Fiddle end - remove hard-coded Bukkit values - Material - fix legacy item conversion
     Material fromLegacy(Material material);
 
+    Material fromLegacy(Material material, boolean itemPriority); // Fiddle - remove hard-coded Bukkit values - Material - fix legacy item conversion
+
+    // Fiddle start - remove hard-coded Bukkit values - Material - fix legacy item conversion
+    /**
+     * @deprecated Use {@link #fromLegacy(MaterialData, boolean)} instead.
+     */
+    @Deprecated
+    // Fiddle end - remove hard-coded Bukkit values - Material - fix legacy item conversion
     Material fromLegacy(MaterialData material);
 
     Material fromLegacy(MaterialData material, boolean itemPriority);
diff --git a/src/test/java/org/bukkit/scoreboard/CriteriaTest.java b/src/test/java/org/bukkit/scoreboard/CriteriaTest.java
index a93f28e2f987a36e2c7e4f7d31506b750bdb222b..befde675669f2083849e24f0749d64ef9a45c847 100644
--- a/src/test/java/org/bukkit/scoreboard/CriteriaTest.java
+++ b/src/test/java/org/bukkit/scoreboard/CriteriaTest.java
@@ -5,19 +5,37 @@ import org.bukkit.Statistic;
 import org.bukkit.entity.EntityType;
 import org.junit.Assert;
 import org.junit.Test;
+import org.mockito.MockMakers;
+
+import static org.mockito.Mockito.*;
 
 public class CriteriaTest {
 
     @Test
     public void testStatistic() {
         io.papermc.paper.testing.TestServer.setup(); // Paper
+        // Fiddle start - remove hard-coded Bukkit values - Material - fix legacy item conversion
+        var nonBlockEnumValue = mock(Material.class, withSettings().mockMaker(MockMakers.INLINE)); // Used to be Material.DIAMOND_SWORD
+        when(nonBlockEnumValue.isItem()).thenReturn(true);
+        when(nonBlockEnumValue.isBlock()).thenReturn(false);
+        var nonItemEnumValue = mock(Material.class, withSettings().mockMaker(MockMakers.INLINE)); // Used to be Material.WATER
+        when(nonItemEnumValue.isItem()).thenReturn(false);
+        when(nonItemEnumValue.isBlock()).thenReturn(true);
+        var nonEntityButItemEnumValue = mock(Material.class, withSettings().mockMaker(MockMakers.INLINE)); // Used to be Material.AMETHYST_SHARD
+        when(nonEntityButItemEnumValue.isItem()).thenReturn(true);
+        when(nonEntityButItemEnumValue.isBlock()).thenReturn(false);
+        var nonEntityButBlockEnumValue = mock(Material.class, withSettings().mockMaker(MockMakers.INLINE)); // Used to be Material.STONE
+        when(nonEntityButBlockEnumValue.isItem()).thenReturn(true);
+        when(nonEntityButBlockEnumValue.isBlock()).thenReturn(true);
+        var arbitraryMaterialValue = nonEntityButBlockEnumValue; // Used to be Material.STONE
 
-        Assert.assertThrows(IllegalArgumentException.class, () -> Criteria.statistic(Statistic.AVIATE_ONE_CM, Material.STONE)); // Generic statistic with block
+        Assert.assertThrows(IllegalArgumentException.class, () -> Criteria.statistic(Statistic.AVIATE_ONE_CM, arbitraryMaterialValue)); // Generic statistic with block
         Assert.assertThrows(IllegalArgumentException.class, () -> Criteria.statistic(Statistic.AVIATE_ONE_CM, EntityType.CREEPER)); // Generic statistic with entity type
 
-        Assert.assertThrows(IllegalArgumentException.class, () -> Criteria.statistic(Statistic.ENTITY_KILLED_BY, Material.AMETHYST_SHARD)); // Entity statistic with material
-        Assert.assertThrows(IllegalArgumentException.class, () -> Criteria.statistic(Statistic.MINE_BLOCK, Material.DIAMOND_PICKAXE)); // Block statistic with item
-        Assert.assertThrows(IllegalArgumentException.class, () -> Criteria.statistic(Statistic.BREAK_ITEM, Material.WATER)); // Item statistic with block
-        Assert.assertThrows(IllegalArgumentException.class, () -> Criteria.statistic(Statistic.KILL_ENTITY, Material.STONE)); // Entity statistic with Material
+        Assert.assertThrows(IllegalArgumentException.class, () -> Criteria.statistic(Statistic.ENTITY_KILLED_BY, nonEntityButItemEnumValue)); // Entity statistic with material
+        Assert.assertThrows(IllegalArgumentException.class, () -> Criteria.statistic(Statistic.MINE_BLOCK, nonBlockEnumValue)); // Block statistic with item
+        Assert.assertThrows(IllegalArgumentException.class, () -> Criteria.statistic(Statistic.BREAK_ITEM, nonItemEnumValue)); // Item statistic with block
+        Assert.assertThrows(IllegalArgumentException.class, () -> Criteria.statistic(Statistic.KILL_ENTITY, nonEntityButBlockEnumValue)); // Entity statistic with Material
+        // Fiddle end - remove hard-coded Bukkit values - Material - fix legacy item conversion
     }
 }
