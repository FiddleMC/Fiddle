From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Wed, 12 Jul 2023 23:19:48 +0200
Subject: [PATCH] Modifiable Bukkit enums - Inject runtime versions - Material
 - Name and key conversion

License: Fiddle Public License Agreement 1.0 (included in license/FPL-1.0.txt)
Fiddle - https://fiddlemc.org

diff --git a/src/main/java/org/fiddlemc/fiddle/material/MaterialNameAndKeyConversion.java b/src/main/java/org/fiddlemc/fiddle/material/MaterialNameAndKeyConversion.java
index 6a43a90bd4fc533cfc5a738c3b196d72711b171e..d5f75659985e6e37b98f6e0e6936669b63003874 100644
--- a/src/main/java/org/fiddlemc/fiddle/material/MaterialNameAndKeyConversion.java
+++ b/src/main/java/org/fiddlemc/fiddle/material/MaterialNameAndKeyConversion.java
@@ -10,6 +10,7 @@ import org.bukkit.NamespacedKey;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.HashMap;
 import java.util.Locale;
 import java.util.Map;
 
@@ -26,12 +27,44 @@ public final class MaterialNameAndKeyConversion {
         throw new RuntimeException();
     }
 
+    // Fiddle start - modifiable Bukkit enums - inject runtime versions - Material - name and key conversion
+    public static final @NotNull String FIDDLE_ENUM_NAME_PREFIX = "FIDDLE_";
+
+    private static @Nullable Map<String, NamespacedKey> fiddleEnumNamesToNamespacedKey = new HashMap<>(0);
+
+    public static void registerFiddleEnumNameToNamespacedKey(@NotNull String enumName, @NotNull String namespace, @NotNull String path) {
+        if (fiddleEnumNamesToNamespacedKey == null) {
+            throw new IllegalStateException("Cannot register Fiddle enum name to namespaced key after the key cache has been filled");
+        }
+        fiddleEnumNamesToNamespacedKey.put(enumName, new NamespacedKey(namespace, path));
+    }
+    // Fiddle end - modifiable Bukkit enums - inject runtime versions - Material - name and key conversion
+
     // Fiddle start - modifiable Bukkit enums - Material - remove hard-coded properties - key
     private static final CachedMaterialProperty<NamespacedKey> keyCache = new CachedMaterialProperty<>(
         NamespacedKey[]::new,
-        // Based on the original org.bukkit.Material constructor
-        material -> NamespacedKey.minecraft(material.name().toLowerCase(Locale.ROOT))
-    );
+        // Fiddle start - modifiable Bukkit enums - inject runtime versions - Material - name and key conversion
+        material -> {
+            if (fiddleEnumNamesToNamespacedKey != null) {
+                @Nullable NamespacedKey fromFiddleEnumName = fiddleEnumNamesToNamespacedKey.get(material.name());
+                if (fromFiddleEnumName != null) {
+                    return fromFiddleEnumName;
+                }
+            }
+            // Based on the original org.bukkit.Material constructor
+            return NamespacedKey.minecraft(material.name().toLowerCase(Locale.ROOT));
+        }
+    ) {
+
+        @Override
+        protected void initializeIfNecessary(boolean legacy) {
+            super.initializeIfNecessary(legacy);
+            // Clear the registered Fiddle enum names to namespaced keys
+            fiddleEnumNamesToNamespacedKey = null;
+        }
+
+    };
+    // Fiddle end - modifiable Bukkit enums - inject runtime versions - Material - name and key conversion
     // Fiddle end - modifiable Bukkit enums - Material - remove hard-coded properties - key
 
     // Fiddle start - modifiable Bukkit enums - Material - remove hard-coded properties - getMaterial
