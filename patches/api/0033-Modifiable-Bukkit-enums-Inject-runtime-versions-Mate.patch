From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Wed, 10 Jan 2024 20:36:05 +0100
Subject: [PATCH] Modifiable Bukkit enums - Inject runtime versions - Material
 - Get key for Fiddle values

Allows `Material.getKey()` to return the correct value for Fiddle values.

This is done by adding a special case in the backing implementation of the `MaterialNameAndKeyConversion.keyCache`,
that relies on a backing map. This backing map can be populated using the `registerFiddleEnumNameToNamespacedKey` method,
which is called in the "Modifiable Bukkit enums - Inject runtime versions - Material - Register key for Fiddle values" patch in the `fiddle-server` module.

License: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)
Fiddle - https://fiddlemc.org

diff --git a/src/main/java/org/fiddlemc/fiddle/material/MaterialNameAndKeyConversion.java b/src/main/java/org/fiddlemc/fiddle/material/MaterialNameAndKeyConversion.java
index 95b8664aafb176bb549d376b7e248cf3e792de76..bbae3c95ffaf5697fd9509690d0953ce4b78badd 100644
--- a/src/main/java/org/fiddlemc/fiddle/material/MaterialNameAndKeyConversion.java
+++ b/src/main/java/org/fiddlemc/fiddle/material/MaterialNameAndKeyConversion.java
@@ -21,12 +21,42 @@ public final class MaterialNameAndKeyConversion {
         throw new RuntimeException();
     }
 
+    // Fiddle start - modifiable Bukkit enums - inject runtime versions - Material - keys for Fiddle values
+    private static @org.jetbrains.annotations.Nullable java.util.Map<String, org.bukkit.NamespacedKey> fiddleEnumNamesToNamespacedKey = new java.util.HashMap<>(0);
+
+    public static void registerFiddleEnumNameToNamespacedKey(String enumName, String namespace, String path) {
+        if (fiddleEnumNamesToNamespacedKey == null) {
+            throw new IllegalStateException("Cannot register Fiddle enum name to namespaced key after the key cache has been filled");
+        }
+        fiddleEnumNamesToNamespacedKey.put(enumName, new org.bukkit.NamespacedKey(namespace, path));
+    }
+    // Fiddle end - modifiable Bukkit enums - inject runtime versions - Material - keys for Fiddle values
+
     // Fiddle start - modifiable Bukkit enums - Material - remove hard-coded properties - key
     private static final CachedMaterialProperty<org.bukkit.NamespacedKey> keyCache = new CachedMaterialProperty<>(
         org.bukkit.NamespacedKey[]::new,
-        // Based on the original org.bukkit.Material constructor
-        material -> org.bukkit.NamespacedKey.minecraft(material.name().toLowerCase(java.util.Locale.ROOT))
-    );
+        // Fiddle start - modifiable Bukkit enums - inject runtime versions - Material - keys for Fiddle values
+        material -> {
+            if (fiddleEnumNamesToNamespacedKey != null) {
+                @org.jetbrains.annotations.Nullable org.bukkit.NamespacedKey fromFiddleEnumName = fiddleEnumNamesToNamespacedKey.get(material.name());
+                if (fromFiddleEnumName != null) {
+                    return fromFiddleEnumName;
+                }
+            }
+            // Based on the original org.bukkit.Material constructor
+            return org.bukkit.NamespacedKey.minecraft(material.name().toLowerCase(java.util.Locale.ROOT));
+        }
+    ) {
+
+        @Override
+        protected void initializeIfNecessary(boolean legacy) {
+            super.initializeIfNecessary(legacy);
+            // Clear the registered Fiddle enum names to namespaced keys
+            fiddleEnumNamesToNamespacedKey = null;
+        }
+
+    };
+    // Fiddle end - modifiable Bukkit enums - inject runtime versions - Material - keys for Fiddle values
     // Fiddle end - modifiable Bukkit enums - Material - remove hard-coded properties - key
 
     // Fiddle start - modifiable Bukkit enums - Material - remove hard-coded properties - getMaterial
