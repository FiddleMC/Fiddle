From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Mon, 10 Jul 2023 22:05:08 +0200
Subject: [PATCH] Modifiable Bukkit enums - Move implementations to
 corresponding interfaces

Moves base implementations of modifiable enum types to the interface that they implement for that reason.

License: Fiddle Public License Agreement 1.0 (included in license/FPL-1.0.txt)
Fiddle - https://fiddlemc.org

diff --git a/src/main/java/org/bukkit/Material.java b/src/main/java/org/bukkit/Material.java
index d2e4d85c512f52a7ff87d5cefa25dde573c6f634..1eb69b6acc6660114fd1f2b1216aed1432797355 100644
--- a/src/main/java/org/bukkit/Material.java
+++ b/src/main/java/org/bukkit/Material.java
@@ -1,6 +1,5 @@
 package org.bukkit;
 
-import com.google.common.base.Preconditions;
 import com.google.common.collect.Multimap;
 import java.util.function.Consumer;
 import org.bukkit.attribute.Attribute;
@@ -111,7 +110,6 @@ import org.bukkit.material.MaterialData;
 import org.fiddlemc.fiddle.material.AbstractMaterial;
 import org.fiddlemc.fiddle.material.MaterialDefaultImplementations;
 import org.fiddlemc.fiddle.material.MaterialLegacyNameChecker;
-import org.fiddlemc.fiddle.material.MaterialNameAndKeyConversion;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
@@ -4383,9 +4381,6 @@ public enum Material implements AbstractMaterial { // Paper // Fiddle - modifiab
     ;
     //</editor-fold>
 
-    @Deprecated
-    public static final String LEGACY_PREFIX = MaterialLegacyNameChecker.LEGACY_MATERIAL_PREFIX; // Fiddle - modifiable Bukkit enums - Material - remove hard-coded properties - is legacy
-
     private final int id;
     private final int maxStackHardcoded;
     private final short durabilityHardcoded;
@@ -4427,17 +4422,14 @@ public enum Material implements AbstractMaterial { // Paper // Fiddle - modifiab
      * it returns false for all materials added with Fiddle..
      * <!-- // Fiddle end - modifiable Bukkit enums - Material - remove hard-coded properties - is empty -->
      */
+    @Override // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     public boolean isEmpty() {
-        return MaterialDefaultImplementations.isEmpty(this); // Fiddle - modifiable Bukkit enums - Material - remove hard-coded properties - is empty
+        return AbstractMaterial.super.isEmpty(); // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     }
 
     @Override
     public @NotNull String translationKey() {
-        if (this.isItem()) {
-            return Bukkit.getUnsafe().getItemTranslationKey(this);
-        } else {
-            return Bukkit.getUnsafe().getBlockTranslationKey(this);
-        }
+        return AbstractMaterial.super.translationKey(); // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     }
 
     /**
@@ -4446,9 +4438,10 @@ public enum Material implements AbstractMaterial { // Paper // Fiddle - modifiab
      *
      * @return the item rarity
      */
+    @Override // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     @NotNull
     public io.papermc.paper.inventory.ItemRarity getItemRarity() {
-        return Bukkit.getUnsafe().getItemRarity(this);
+        return AbstractMaterial.super.getItemRarity(); // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     }
 
     /**
@@ -4460,10 +4453,10 @@ public enum Material implements AbstractMaterial { // Paper // Fiddle - modifiab
      * @return an immutable multimap of attributes
      * @deprecated use {@link #getDefaultAttributeModifiers(EquipmentSlot)}
      */
+    @Override // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     @NotNull
-    @Deprecated
     public Multimap<Attribute, AttributeModifier> getItemAttributes(@NotNull EquipmentSlot equipmentSlot) {
-        return Bukkit.getUnsafe().getItemAttributes(this, equipmentSlot);
+        return AbstractMaterial.super.getItemAttributes(equipmentSlot); // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     }
 
     /**
@@ -4472,8 +4465,9 @@ public enum Material implements AbstractMaterial { // Paper // Fiddle - modifiab
      * @return true if collidable
      * @throws IllegalArgumentException if {@link #isBlock()} is false
      */
+    @Override // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     public boolean isCollidable() {
-        return Bukkit.getUnsafe().isCollidable(this);
+        return AbstractMaterial.super.isCollidable(); // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     }
     // Paper end
 
@@ -4483,14 +4477,15 @@ public enum Material implements AbstractMaterial { // Paper // Fiddle - modifiab
      * @return ID of this material
      * @deprecated Magic value
      */
-    @Deprecated
+    @Override // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     public int getId() {
         // Fiddle start - modifiable Bukkit enums - Material - remove hard-coded properties - id
-        return MaterialDefaultImplementations.getLegacyId(this);
+        return AbstractMaterial.super.getId(); // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     }
 
     /**
      * @deprecated Do not use: this method is for internal testing purposes only.
+     * This method will not be present during runtime. <!-- // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material -->
      */
     @Deprecated(forRemoval = true)
     public int getIdLegacy() {
@@ -4504,14 +4499,15 @@ public enum Material implements AbstractMaterial { // Paper // Fiddle - modifiab
      * @return legacy status
      */
     // @Deprecated // Paper - this is useful, don't deprecate
+    @Override // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     public boolean isLegacy() {
-        return MaterialDefaultImplementations.isLegacy(this); // Fiddle - modifiable Bukkit enums - Material - remove hard-coded properties - is legacy
+        return AbstractMaterial.super.isLegacy(); // Fiddle - modifiable Bukkit enums - Material - remove hard-coded properties - is legacy // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     }
 
     @NotNull
     @Override
     public NamespacedKey getKey() {
-        return MaterialNameAndKeyConversion.getKey(this); // Fiddle - modifiable Bukkit enums - Material - remove hard-coded properties - key
+        return AbstractMaterial.super.getKey(); // Fiddle - modifiable Bukkit enums - Material - remove hard-coded properties - key // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     }
 
     /**
@@ -4519,13 +4515,15 @@ public enum Material implements AbstractMaterial { // Paper // Fiddle - modifiab
      *
      * @return Maximum stack size for this material
      */
+    @Override // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     public int getMaxStackSize() {
         // Fiddle start - modifiable Bukkit enums - Material - remove hard-coded properties - max stack size
-        return Bukkit.getUnsafe().getMaxStackSize(this);
+        return AbstractMaterial.super.getMaxStackSize(); // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     }
 
     /**
      * @deprecated Do not use: this method is for internal testing purposes only.
+     * This method will not be present during runtime. <!-- // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material -->
      */
     @Deprecated(forRemoval = true)
     public int getMaxStackSizeHardcoded() {
@@ -4538,17 +4536,20 @@ public enum Material implements AbstractMaterial { // Paper // Fiddle - modifiab
      *
      * @return Maximum durability for this material
      */
+    @Override // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     public short getMaxDurability() {
         // Fiddle start - modifiable Bukkit enums - Material - remove hard-coded properties - durability
-        return Bukkit.getUnsafe().getMaxDurability(this);
+        return AbstractMaterial.super.getMaxDurability(); // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     }
 
+    @Override // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     public boolean hasNonZeroMaxDurability() {
-        return MaterialDefaultImplementations.hasNonZeroMaxDurability(this);
+        return AbstractMaterial.super.hasNonZeroMaxDurability(); // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     }
 
     /**
      * @deprecated Do not use: this method is for internal testing purposes only.
+     * This method will not be present during runtime. <!-- // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material -->
      */
     @Deprecated(forRemoval = true)
     public short getMaxDurabilityHardcoded() {
@@ -4558,9 +4559,9 @@ public enum Material implements AbstractMaterial { // Paper // Fiddle - modifiab
     /**
      * @deprecated Do not use: for internal use only.
      */
-    @Deprecated(forRemoval = true)
+    @Override // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     public short getMaxDurabilityLegacy() {
-        return MaterialDefaultImplementations.getMaxDurabilityLegacy(this);
+        return AbstractMaterial.super.getMaxDurabilityLegacy(); // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
         // Fiddle end - modifiable Bukkit enums - Material - remove hard-coded properties - durability
     }
 
@@ -4570,9 +4571,10 @@ public enum Material implements AbstractMaterial { // Paper // Fiddle - modifiab
      *
      * @return new data instance
      */
+    @Override // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     @NotNull
     public BlockData createBlockData() {
-        return Bukkit.createBlockData(this);
+        return AbstractMaterial.super.createBlockData(); // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     }
 
     /**
@@ -4582,9 +4584,10 @@ public enum Material implements AbstractMaterial { // Paper // Fiddle - modifiab
      * @param consumer consumer to run on new instance before returning
      * @return new data instance
      */
+    @Override // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     @NotNull
     public BlockData createBlockData(@Nullable Consumer<BlockData> consumer) {
-        return Bukkit.createBlockData(this, consumer);
+        return AbstractMaterial.super.createBlockData(consumer); // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     }
 
     /**
@@ -4596,9 +4599,10 @@ public enum Material implements AbstractMaterial { // Paper // Fiddle - modifiab
      * @return new data instance
      * @throws IllegalArgumentException if the specified data is not valid
      */
+    @Override // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     @NotNull
     public BlockData createBlockData(@Nullable String data) throws IllegalArgumentException {
-        return Bukkit.createBlockData(this, data);
+        return AbstractMaterial.super.createBlockData(data); // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     }
 
     /**
@@ -4607,10 +4611,10 @@ public enum Material implements AbstractMaterial { // Paper // Fiddle - modifiab
      * @return MaterialData associated with this Material
      * @deprecated use {@link #createBlockData()}
      */
+    @Override // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     @NotNull
-    @Deprecated // Paper
     public Class<? extends MaterialData> getData() {
-        return MaterialDefaultImplementations.getMaterialDataConstructorDeclaringClass(this); // Fiddle - modifiable Bukkit enums - Material - remove hard-coded properties - cached constructor
+        return AbstractMaterial.super.getData(); // Fiddle - modifiable Bukkit enums - Material - remove hard-coded properties - cached constructor // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     }
 
     /**
@@ -4621,10 +4625,10 @@ public enum Material implements AbstractMaterial { // Paper // Fiddle - modifiab
      * @return New MaterialData with the given data
      * @deprecated Magic value
      */
-    @Deprecated
+    @Override // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     @NotNull
     public MaterialData getNewData(final byte raw) {
-        return MaterialDefaultImplementations.getNewMaterialDataInstance(this, raw); // Fiddle - modifiable Bukkit enums - Material - remove hard-coded properties - cached constructor
+        return AbstractMaterial.super.getNewData(raw); // Fiddle - modifiable Bukkit enums - Material - remove hard-coded properties - cached constructor // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     }
 
     // Fiddle start - modifiable Bukkit enums - Material - remove hard-coded properties - data
@@ -4632,10 +4636,10 @@ public enum Material implements AbstractMaterial { // Paper // Fiddle - modifiab
      * @return The computed value of {@link #data} that this instance should have.
      * @deprecated Do not use: for internal use only.
      */
-    @Deprecated(forRemoval = true)
+    @Override // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     @NotNull
     public Class<?> computeData() {
-        return Bukkit.getUnsafe().computeData(this);
+        return AbstractMaterial.super.computeData(); // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     }
     // Fiddle end - modifiable Bukkit enums - Material - remove hard-coded properties - data
 
@@ -4644,13 +4648,15 @@ public enum Material implements AbstractMaterial { // Paper // Fiddle - modifiab
      *
      * @return true if this material is a block
      */
+    @Override // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     public boolean isBlock() {
         // Fiddle start - modifiable Bukkit enums - Material - remove hard-coded properties - most properties
-        return Bukkit.getUnsafe().isBlock(this);
+        return AbstractMaterial.super.isBlock(); // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     }
 
     /**
      * @deprecated Do not use: this method is for internal testing purposes only.
+     * This method will not be present during runtime. <!-- // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material -->
      */
     @Deprecated(forRemoval = true)
     public boolean isBlockLegacy() {
@@ -4663,13 +4669,15 @@ public enum Material implements AbstractMaterial { // Paper // Fiddle - modifiab
      *
      * @return true if this Material is edible.
      */
+    @Override // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     public boolean isEdible() {
         // Fiddle start - modifiable Bukkit enums - Material - remove hard-coded properties - most properties
-        return Bukkit.getUnsafe().isEdible(this);
+        return AbstractMaterial.super.isEdible(); // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     }
 
     /**
      * @deprecated Do not use: this method is for internal testing purposes only.
+     * In fact, this method will not be present during runtime. <!-- // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material -->
      */
     @Deprecated(forRemoval = true)
     public boolean isEdibleLegacy() {
@@ -4724,7 +4732,7 @@ public enum Material implements AbstractMaterial { // Paper // Fiddle - modifiab
      */
     @Nullable
     public static Material getMaterial(@NotNull final String name) {
-        return MaterialNameAndKeyConversion.getMaterial(name); // Fiddle - modifiable Bukkit enums - Material - remove hard-coded properties - getMaterial
+        return (Material) AbstractMaterial.getAbstractMaterial(name); // Fiddle - modifiable Bukkit enums - Material - remove hard-coded properties - getMaterial // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     }
 
     /**
@@ -4746,7 +4754,7 @@ public enum Material implements AbstractMaterial { // Paper // Fiddle - modifiab
     @Nullable
     // Fiddle start - modifiable Bukkit enums - Material - remove hard-coded properties - getMaterial
     public static Material getMaterial(@NotNull final String name, boolean legacyName) {
-        return MaterialNameAndKeyConversion.getMaterial(name, legacyName);
+        return (Material) AbstractMaterial.getAbstractMaterial(name, legacyName); // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
         // Fiddle end - modifiable Bukkit enums - Material - remove hard-coded properties - getMaterial
     }
 
@@ -4762,7 +4770,7 @@ public enum Material implements AbstractMaterial { // Paper // Fiddle - modifiab
      */
     @Nullable
     public static Material matchMaterial(@NotNull final String name) {
-        return MaterialNameAndKeyConversion.matchMaterial(name); // Fiddle - modifiable Bukkit enums - Material - remove hard-coded properties - matchMaterial
+        return (Material) AbstractMaterial.matchAbstractMaterial(name); // Fiddle - modifiable Bukkit enums - Material - remove hard-coded properties - matchMaterial // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     }
 
     /**
@@ -4779,19 +4787,21 @@ public enum Material implements AbstractMaterial { // Paper // Fiddle - modifiab
      */
     @Nullable
     public static Material matchMaterial(@NotNull final String name, boolean legacyName) {
-        return MaterialNameAndKeyConversion.matchMaterial(name, legacyName); // Fiddle - modifiable Bukkit enums - Material - remove hard-coded properties - matchMaterial
+        return (Material) AbstractMaterial.matchAbstractMaterial(name, legacyName); // Fiddle - modifiable Bukkit enums - Material - remove hard-coded properties - matchMaterial // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     }
 
     /**
      * @return True if this material represents a playable music disk.
      */
+    @Override // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     public boolean isRecord() {
         // Fiddle start - modifiable Bukkit enums - Material - remove hard-coded properties - most properties
-        return Bukkit.getUnsafe().isRecord(this);
+        return AbstractMaterial.super.isRecord(); // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     }
 
     /**
      * @deprecated Do not use: this method is for internal testing purposes only.
+     * In fact, this method will not be present during runtime. <!-- // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material -->
      */
     @Deprecated(forRemoval = true)
     public boolean isRecordLegacy() {
@@ -4805,13 +4815,15 @@ public enum Material implements AbstractMaterial { // Paper // Fiddle - modifiab
      *
      * @return True if this material is a block and solid
      */
+    @Override // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     public boolean isSolid() {
         // Fiddle start - modifiable Bukkit enums - Material - remove hard-coded properties - most properties
-        return Bukkit.getUnsafe().isSolid(this);
+        return AbstractMaterial.super.isSolid(); // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     }
 
     /**
      * @deprecated Do not use: this method is for internal testing purposes only.
+     * In fact, this method will not be present during runtime. <!-- // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material -->
      */
     @Deprecated(forRemoval = true)
     public boolean isSolidLegacy() {
@@ -5029,13 +5041,15 @@ public enum Material implements AbstractMaterial { // Paper // Fiddle - modifiab
      *
      * @return True if this material is an air block.
      */
+    @Override // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     public boolean isAir() {
         // Fiddle start - modifiable Bukkit enums - Material - remove hard-coded properties - most properties
-        return Bukkit.getUnsafe().isAir(this);
+        return AbstractMaterial.super.isAir(); // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     }
 
     /**
      * @deprecated Do not use: this method is for internal testing purposes only.
+     * In fact, this method will not be present during runtime. <!-- // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material -->
      */
     @Deprecated(forRemoval = true)
     public boolean isAirLegacy() {
@@ -5051,14 +5065,15 @@ public enum Material implements AbstractMaterial { // Paper // Fiddle - modifiab
      * linked to the underlying server. Contributions welcome.
      * Because there is no linked implementation, this method returns false for all materials added with Fiddle.<!-- // Fiddle - modifiable Bukkit enums - Material - remove hard-coded properties - is transparent -->
      */
-    @Deprecated
+    @Override // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     public boolean isTransparent() {
         // Fiddle start - modifiable Bukkit enums - Material - remove hard-coded properties - is transparent
-        return Bukkit.getUnsafe().isTransparent(this);
+        return AbstractMaterial.super.isTransparent(); // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     }
 
     /**
      * @deprecated Do not use: this method is for internal testing purposes only.
+     * In fact, this method will not be present during runtime. <!-- // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material -->
      */
     @Deprecated(forRemoval = true)
     public boolean isTransparentLegacy() {
@@ -5128,13 +5143,15 @@ public enum Material implements AbstractMaterial { // Paper // Fiddle - modifiab
      *
      * @return True if this material is a block and can catch fire
      */
+    @Override // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     public boolean isFlammable() {
         // Fiddle start - modifiable Bukkit enums - Material - remove hard-coded properties - most properties
-        return Bukkit.getUnsafe().isFlammable(this);
+        return AbstractMaterial.super.isFlammable(); // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     }
 
     /**
      * @deprecated Do not use: this method is for internal testing purposes only.
+     * In fact, this method will not be present during runtime. <!-- // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material -->
      */
     @Deprecated(forRemoval = true)
     public boolean isFlammableLegacy() {
@@ -5208,13 +5225,15 @@ public enum Material implements AbstractMaterial { // Paper // Fiddle - modifiab
      *
      * @return True if this material is a block and can burn away
      */
+    @Override // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     public boolean isBurnable() {
         // Fiddle start - modifiable Bukkit enums - Material - remove hard-coded properties - most properties
-        return Bukkit.getUnsafe().isBurnable(this);
+        return AbstractMaterial.super.isBurnable(); // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     }
 
     /**
      * @deprecated Do not use: this method is for internal testing purposes only.
+     * In fact, this method will not be present during runtime. <!-- // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material -->
      */
     @Deprecated(forRemoval = true)
     public boolean isBurnableLegacy() {
@@ -5270,13 +5289,15 @@ public enum Material implements AbstractMaterial { // Paper // Fiddle - modifiab
      *
      * @return true if this Material can be used as fuel.
      */
+    @Override // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     public boolean isFuel() {
         // Fiddle start - modifiable Bukkit enums - Material - remove hard-coded properties - most properties
-        return Bukkit.getUnsafe().isFuel(this);
+        return AbstractMaterial.super.isFuel(); // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     }
 
     /**
      * @deprecated Do not use: this method is for internal testing purposes only.
+     * In fact, this method will not be present during runtime. <!-- // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material -->
      */
     @Deprecated(forRemoval = true)
     public boolean isFuelLegacy() {
@@ -5372,13 +5393,15 @@ public enum Material implements AbstractMaterial { // Paper // Fiddle - modifiab
      *
      * @return True if this material is a block and occludes light
      */
+    @Override // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     public boolean isOccluding() {
         // Fiddle start - modifiable Bukkit enums - Material - remove hard-coded properties - most properties
-        return Bukkit.getUnsafe().isOccluding(this);
+        return AbstractMaterial.super.isOccluding(); // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     }
 
     /**
      * @deprecated Do not use: this method is for internal testing purposes only.
+     * In fact, this method will not be present during runtime. <!-- // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material -->
      */
     @Deprecated(forRemoval = true)
     public boolean isOccludingLegacy() {
@@ -5511,13 +5534,15 @@ public enum Material implements AbstractMaterial { // Paper // Fiddle - modifiab
     /**
      * @return True if this material is affected by gravity.
      */
+    @Override // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     public boolean hasGravity() {
         // Fiddle start - modifiable Bukkit enums - Material - remove hard-coded properties - most properties
-        return Bukkit.getUnsafe().hasGravity(this);
+        return AbstractMaterial.super.hasGravity(); // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     }
 
     /**
      * @deprecated Do not use: this method is for internal testing purposes only.
+     * In fact, this method will not be present during runtime. <!-- // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material -->
      */
     @Deprecated(forRemoval = true)
     public boolean hasGravityLegacy() {
@@ -5541,13 +5566,15 @@ public enum Material implements AbstractMaterial { // Paper // Fiddle - modifiab
      *
      * @return true if this material is an item
      */
+    @Override // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     public boolean isItem() {
         // Fiddle start - modifiable Bukkit enums - Material - remove hard-coded properties - most properties
-        return Bukkit.getUnsafe().isItem(this);
+        return AbstractMaterial.super.isItem(); // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     }
 
     /**
      * @deprecated Do not use: this method is for internal testing purposes only.
+     * In fact, this method will not be present during runtime. <!-- // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material -->
      */
     @Deprecated(forRemoval = true)
     public boolean isItemLegacy() {
@@ -5571,8 +5598,9 @@ public enum Material implements AbstractMaterial { // Paper // Fiddle - modifiab
      *
      * @return true if this material can be interacted with.
      */
+    @Override // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     public boolean isInteractable() {
-        return Bukkit.getUnsafe().isInteractable(this); // Fiddle - modifiable Bukkit enums - Material - remove hard-coded properties - most properties
+        return AbstractMaterial.super.isInteractable(); // Fiddle - modifiable Bukkit enums - Material - remove hard-coded properties - most properties // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     }
 
     /**
@@ -5584,8 +5612,9 @@ public enum Material implements AbstractMaterial { // Paper // Fiddle - modifiab
      *
      * @return the hardness of that material.
      */
+    @Override // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     public float getHardness() {
-        return Bukkit.getUnsafe().getHardness(this); // Fiddle - modifiable Bukkit enums - Material - remove hard-coded properties - most properties
+        return AbstractMaterial.super.getHardness(); // Fiddle - modifiable Bukkit enums - Material - remove hard-coded properties - most properties // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     }
 
     /**
@@ -5598,8 +5627,9 @@ public enum Material implements AbstractMaterial { // Paper // Fiddle - modifiab
      *
      * @return the blast resistance of that material.
      */
+    @Override // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     public float getBlastResistance() {
-        return Bukkit.getUnsafe().getBlastResistance(this); // Fiddle - modifiable Bukkit enums - Material - remove hard-coded properties - most properties
+        return AbstractMaterial.super.getBlastResistance(); // Fiddle - modifiable Bukkit enums - Material - remove hard-coded properties - most properties // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     }
 
     /**
@@ -5614,8 +5644,9 @@ public enum Material implements AbstractMaterial { // Paper // Fiddle - modifiab
      *
      * @return the slipperiness of this block
      */
+    @Override // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     public float getSlipperiness() {
-        return Bukkit.getUnsafe().getSlipperiness(this); // Fiddle - modifiable Bukkit enums - Material - remove hard-coded properties - most properties
+        return AbstractMaterial.super.getSlipperiness(); // Fiddle - modifiable Bukkit enums - Material - remove hard-coded properties - most properties // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     }
 
     /**
@@ -5628,7 +5659,7 @@ public enum Material implements AbstractMaterial { // Paper // Fiddle - modifiab
      */
     @Nullable
     public Material getCraftingRemainingItem() {
-        return Bukkit.getUnsafe().getCraftingRemainingItem(this); // Fiddle - modifiable Bukkit enums - Material - remove hard-coded properties - most properties
+        return (Material) AbstractMaterial.super.getAbstractCraftingRemainingItem(); // Fiddle - modifiable Bukkit enums - Material - remove hard-coded properties - most properties // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     }
 
     /**
@@ -5638,9 +5669,10 @@ public enum Material implements AbstractMaterial { // Paper // Fiddle - modifiab
      *
      * @return the best EquipmentSlot for this Material
      */
+    @Override // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     @NotNull
     public EquipmentSlot getEquipmentSlot() {
-        return Bukkit.getUnsafe().getEquipmentSlot(this); // Fiddle - modifiable Bukkit enums - Material - remove hard-coded properties - most properties
+        return AbstractMaterial.super.getEquipmentSlot(); // Fiddle - modifiable Bukkit enums - Material - remove hard-coded properties - most properties // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     }
 
     /**
@@ -5656,11 +5688,10 @@ public enum Material implements AbstractMaterial { // Paper // Fiddle - modifiab
      * @return the immutable {@link Multimap} with the respective default
      * Attributes and modifiers, or an empty map if no attributes are set.
      */
+    @Override // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     @NotNull
     public Multimap<Attribute, AttributeModifier> getDefaultAttributeModifiers(@NotNull EquipmentSlot slot) {
-        Preconditions.checkArgument(isItem(), "The Material is not an item!");
-
-        return Bukkit.getUnsafe().getDefaultAttributeModifiers(this, slot);
+        return AbstractMaterial.super.getDefaultAttributeModifiers(slot); // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     }
 
     /**
@@ -5668,9 +5699,10 @@ public enum Material implements AbstractMaterial { // Paper // Fiddle - modifiab
      *
      * @return the creative category. null if does not belong to a category
      */
+    @Override // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     @Nullable
     public CreativeCategory getCreativeCategory() {
-        return Bukkit.getUnsafe().getCreativeCategory(this);
+        return AbstractMaterial.super.getCreativeCategory(); // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     }
 
     /**
@@ -5688,13 +5720,8 @@ public enum Material implements AbstractMaterial { // Paper // Fiddle - modifiab
      */
     @Override
     @NotNull
-    @Deprecated(forRemoval = true) // Paper
     public String getTranslationKey() {
-        if (this.isItem()) {
-            return Bukkit.getUnsafe().getItemTranslationKey(this);
-        } else {
-            return Bukkit.getUnsafe().getBlockTranslationKey(this);
-        }
+        return AbstractMaterial.super.getTranslationKey(); // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     }
 
     /**
@@ -5704,9 +5731,10 @@ public enum Material implements AbstractMaterial { // Paper // Fiddle - modifiab
      * @return the translation key of the block associated with this material,
      * or null if this material does not have an associated block
      */
+    @Override // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     @Nullable
     public String getBlockTranslationKey() {
-        return Bukkit.getUnsafe().getBlockTranslationKey(this);
+        return AbstractMaterial.super.getBlockTranslationKey(); // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     }
 
     /**
@@ -5716,9 +5744,10 @@ public enum Material implements AbstractMaterial { // Paper // Fiddle - modifiab
      * @return the translation key of the item associated with this material, or
      * null if this material does not have an associated item.
      */
+    @Override // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     @Nullable
     public String getItemTranslationKey() {
-        return Bukkit.getUnsafe().getItemTranslationKey(this);
+        return AbstractMaterial.super.getItemTranslationKey(); // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     }
 
     /**
@@ -5727,7 +5756,8 @@ public enum Material implements AbstractMaterial { // Paper // Fiddle - modifiab
      * @param world the world to check
      * @return true if this material can be used in this World.
      */
+    @Override // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     public boolean isEnabledByFeature(@NotNull World world) {
-        return Bukkit.getDataPackManager().isEnabledByFeature(this, world);
+        return AbstractMaterial.super.isEnabledByFeature(world); // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
     }
 }
diff --git a/src/main/java/org/fiddlemc/fiddle/material/AbstractMaterial.java b/src/main/java/org/fiddlemc/fiddle/material/AbstractMaterial.java
index c5232856b5537b21751f93d3b5d48c17c3fe9e83..4b0109aa795c352aba2e1cdddaa3f2f17a8830a8 100644
--- a/src/main/java/org/fiddlemc/fiddle/material/AbstractMaterial.java
+++ b/src/main/java/org/fiddlemc/fiddle/material/AbstractMaterial.java
@@ -5,7 +5,19 @@ package org.fiddlemc.fiddle.material;
 import org.bukkit.Keyed;
 import org.bukkit.Material;
 import org.bukkit.Translatable;
+import com.google.common.base.Preconditions;
+import com.google.common.collect.Multimap;
+import org.bukkit.*;
+import org.bukkit.attribute.Attribute;
+import org.bukkit.attribute.AttributeModifier;
+import org.bukkit.block.data.BlockData;
+import org.bukkit.inventory.CreativeCategory;
+import org.bukkit.inventory.EquipmentSlot;
+import org.bukkit.material.MaterialData;
 import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.function.Consumer;
 
 /**
  * An interface that provides default implementations for most {@link Material} methods.
@@ -18,4 +30,250 @@ public interface AbstractMaterial extends Keyed, Translatable, net.kyori.adventu
 
     @NotNull String name();
 
+    // Fiddle - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
+    @Deprecated
+    String LEGACY_PREFIX = MaterialLegacyNameChecker.LEGACY_MATERIAL_PREFIX;; // Fiddle - modifiable Bukkit enums - Material - remove hard-coded properties - is legacy
+
+    default boolean isEmpty() {
+        return MaterialDefaultImplementations.isEmpty((Material) this); // Fiddle - modifiable Bukkit enums - Material - remove hard-coded properties - is empty
+    }
+
+    @Override
+    default @NotNull String translationKey() {
+        if (this.isItem()) {
+            return Bukkit.getUnsafe().getItemTranslationKey((Material) this);
+        } else {
+            return Bukkit.getUnsafe().getBlockTranslationKey((Material) this);
+        }
+    }
+
+    @NotNull
+    default io.papermc.paper.inventory.ItemRarity getItemRarity() {
+        return Bukkit.getUnsafe().getItemRarity((Material) this);
+    }
+
+    @NotNull
+    @Deprecated
+    default Multimap<Attribute, AttributeModifier> getItemAttributes(@NotNull EquipmentSlot equipmentSlot) {
+        return Bukkit.getUnsafe().getItemAttributes((Material) this, equipmentSlot);
+    }
+
+    default boolean isCollidable() {
+        return Bukkit.getUnsafe().isCollidable((Material) this);
+    }
+
+    @Deprecated
+    default int getId() {
+        return MaterialDefaultImplementations.getLegacyId((Material) this); // Fiddle - modifiable Bukkit enums - Material - remove hard-coded properties - id
+    }
+
+    default boolean isLegacy() {
+        return MaterialDefaultImplementations.isLegacy((Material) this); // Fiddle - modifiable Bukkit enums - Material - remove hard-coded properties - is legacy
+    }
+
+    @NotNull
+    @Override
+    default NamespacedKey getKey() {
+        return MaterialNameAndKeyConversion.getKey((Material) this); // Fiddle - modifiable Bukkit enums - Material - remove hard-coded properties - key
+    }
+
+    default int getMaxStackSize() {
+        return Bukkit.getUnsafe().getMaxStackSize((Material) this); // Fiddle - modifiable Bukkit enums - Material - remove hard-coded properties - max stack size
+    }
+
+    default short getMaxDurability() {
+        return Bukkit.getUnsafe().getMaxDurability((Material) this); // Fiddle - modifiable Bukkit enums - Material - remove hard-coded properties - durability
+    }
+
+    default boolean hasNonZeroMaxDurability() {
+        return MaterialDefaultImplementations.hasNonZeroMaxDurability((Material) this); // Fiddle - modifiable Bukkit enums - Material - remove hard-coded properties - durability
+    }
+
+    @Deprecated(forRemoval = true)
+    default short getMaxDurabilityLegacy() {
+        return MaterialDefaultImplementations.getMaxDurabilityLegacy((Material) this); // Fiddle - modifiable Bukkit enums - Material - remove hard-coded properties - durability
+    }
+
+    @NotNull
+    default BlockData createBlockData() {
+        return Bukkit.createBlockData((Material) this);
+    }
+
+    @NotNull
+    default BlockData createBlockData(@Nullable Consumer<BlockData> consumer) {
+        return Bukkit.createBlockData((Material) this, consumer);
+    }
+
+    @NotNull
+    default BlockData createBlockData(@Nullable String data) throws IllegalArgumentException {
+        return Bukkit.createBlockData((Material) this, data);
+    }
+
+    @NotNull
+    @Deprecated // Paper
+    default Class<? extends MaterialData> getData() {
+        return MaterialDefaultImplementations.getMaterialDataConstructorDeclaringClass((Material) this); // Fiddle - modifiable Bukkit enums - Material - remove hard-coded properties - cached constructor
+    }
+
+    @Deprecated
+    @NotNull
+    default MaterialData getNewData(final byte raw) {
+        return MaterialDefaultImplementations.getNewMaterialDataInstance((Material) this, raw); // Fiddle - modifiable Bukkit enums - Material - remove hard-coded properties - cached constructor
+    }
+
+    @Deprecated(forRemoval = true)
+    @NotNull
+    default Class<?> computeData() {
+        return Bukkit.getUnsafe().computeData((Material) this); // Fiddle - modifiable Bukkit enums - Material - remove hard-coded properties - data
+    }
+
+    default boolean isBlock() {
+        return Bukkit.getUnsafe().isBlock((Material) this); // Fiddle - modifiable Bukkit enums - Material - remove hard-coded properties - most properties
+    }
+
+    default boolean isEdible() {
+        return Bukkit.getUnsafe().isEdible((Material) this); // Fiddle - modifiable Bukkit enums - Material - remove hard-coded properties - most properties
+    }
+
+    /**
+     * @deprecated Do not use: for internal use only.
+     */
+    @Deprecated(forRemoval = true)
+    static AbstractMaterial getAbstractMaterial(@NotNull final String name) {
+        return MaterialNameAndKeyConversion.getMaterial(name); // Fiddle - modifiable Bukkit enums - Material - remove hard-coded properties - getMaterial
+    }
+
+    /**
+     * @deprecated Do not use: for internal use only.
+     */
+    @Deprecated(forRemoval = true)
+    static AbstractMaterial getAbstractMaterial(@NotNull final String name, boolean legacyName) {
+        return MaterialNameAndKeyConversion.getMaterial(name, legacyName); // Fiddle - modifiable Bukkit enums - Material - remove hard-coded properties - getMaterial
+    }
+
+    /**
+     * @deprecated Do not use: for internal use only.
+     */
+    @Deprecated(forRemoval = true)
+    static AbstractMaterial matchAbstractMaterial(@NotNull final String name) {
+        return MaterialNameAndKeyConversion.matchMaterial(name); // Fiddle - modifiable Bukkit enums - Material - remove hard-coded properties - matchMaterial
+    }
+
+    /**
+     * @deprecated Do not use: for internal use only.
+     */
+    @Deprecated(forRemoval = true)
+    static AbstractMaterial matchAbstractMaterial(@NotNull final String name, boolean legacyName) {
+        return MaterialNameAndKeyConversion.matchMaterial(name, legacyName); // Fiddle - modifiable Bukkit enums - Material - remove hard-coded properties - matchMaterial
+    }
+
+    default boolean isRecord() {
+        return Bukkit.getUnsafe().isRecord((Material) this); // Fiddle - modifiable Bukkit enums - Material - remove hard-coded properties - most properties
+    }
+
+    default boolean isSolid() {
+        return Bukkit.getUnsafe().isSolid((Material) this); // Fiddle - modifiable Bukkit enums - Material - remove hard-coded properties - most properties
+    }
+
+    default boolean isAir() {
+        return Bukkit.getUnsafe().isAir((Material) this); // Fiddle - modifiable Bukkit enums - Material - remove hard-coded properties - most properties
+    }
+
+    @Deprecated
+    default boolean isTransparent() {
+        return Bukkit.getUnsafe().isTransparent((Material) this); // Fiddle - modifiable Bukkit enums - Material - remove hard-coded properties - is transparent
+    }
+
+    default boolean isBurnable() {
+        return Bukkit.getUnsafe().isBurnable((Material) this); // Fiddle - modifiable Bukkit enums - Material - remove hard-coded properties - most properties
+    }
+
+    default boolean isFlammable() {
+        return Bukkit.getUnsafe().isFlammable((Material) this); // Fiddle - modifiable Bukkit enums - Material - remove hard-coded properties - most properties
+    }
+
+    default boolean isFuel() {
+        return Bukkit.getUnsafe().isFuel((Material) this); // Fiddle - modifiable Bukkit enums - Material - remove hard-coded properties - most properties
+    }
+
+    default boolean isOccluding() {
+        return Bukkit.getUnsafe().isOccluding((Material) this); // Fiddle - modifiable Bukkit enums - Material - remove hard-coded properties - most properties
+    }
+
+    default boolean hasGravity() {
+        return Bukkit.getUnsafe().hasGravity((Material) this); // Fiddle - modifiable Bukkit enums - Material - remove hard-coded properties - most properties
+    }
+
+    default boolean isItem() {
+        return Bukkit.getUnsafe().isItem((Material) this); // Fiddle - modifiable Bukkit enums - Material - remove hard-coded properties - most properties
+    }
+
+    default boolean isInteractable() {
+        return Bukkit.getUnsafe().isInteractable((Material) this); // Fiddle - modifiable Bukkit enums - Material - remove hard-coded properties - most properties
+    }
+
+    default float getHardness() {
+        return Bukkit.getUnsafe().getHardness((Material) this); // Fiddle - modifiable Bukkit enums - Material - remove hard-coded properties - most properties
+    }
+
+    default float getBlastResistance() {
+        return Bukkit.getUnsafe().getBlastResistance((Material) this); // Fiddle - modifiable Bukkit enums - Material - remove hard-coded properties - most properties
+    }
+
+    default float getSlipperiness() {
+        return Bukkit.getUnsafe().getSlipperiness((Material) this); // Fiddle - modifiable Bukkit enums - Material - remove hard-coded properties - most properties
+    }
+
+    /**
+     * @deprecated Do not use: for internal use only.
+     */
+    @Deprecated(forRemoval = true)
+    @Nullable
+    default AbstractMaterial getAbstractCraftingRemainingItem() {
+        return Bukkit.getUnsafe().getCraftingRemainingItem((Material) this); // Fiddle - modifiable Bukkit enums - Material - remove hard-coded properties - most properties
+    }
+
+    @NotNull
+    default EquipmentSlot getEquipmentSlot() {
+        return Bukkit.getUnsafe().getEquipmentSlot((Material) this); // Fiddle - modifiable Bukkit enums - Material - remove hard-coded properties - most properties
+    }
+
+    @NotNull
+    default Multimap<Attribute, AttributeModifier> getDefaultAttributeModifiers(@NotNull EquipmentSlot slot) {
+        Preconditions.checkArgument(isItem(), "The Material is not an item!");
+
+        return Bukkit.getUnsafe().getDefaultAttributeModifiers((Material) this, slot);
+    }
+
+    @Nullable
+    default CreativeCategory getCreativeCategory() {
+        return Bukkit.getUnsafe().getCreativeCategory((Material) this);
+    }
+    
+    @Override
+    @NotNull
+    @Deprecated(forRemoval = true) // Paper
+    default String getTranslationKey() {
+        if (this.isItem()) {
+            return Bukkit.getUnsafe().getItemTranslationKey((Material) this);
+        } else {
+            return Bukkit.getUnsafe().getBlockTranslationKey((Material) this);
+        }
+    }
+    
+    @Nullable
+    default String getBlockTranslationKey() {
+        return Bukkit.getUnsafe().getBlockTranslationKey((Material) this);
+    }
+    
+    @Nullable
+    default String getItemTranslationKey() {
+        return Bukkit.getUnsafe().getItemTranslationKey((Material) this);
+    }
+
+    default boolean isEnabledByFeature(@NotNull World world) {
+        return Bukkit.getDataPackManager().isEnabledByFeature((Material) this, world);
+    }
+    // Fiddle end - modifiable Bukkit enums - move implementations to corresponding interfaces - Material
+
 }
