From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Wed, 3 Jan 2024 18:23:11 +0100
Subject: [PATCH] Flag for vanilla blocks, items and block states - Bukkit API

Allows getting whether a block, item or block state is present in vanilla.
This is done by providing the abstract methods `UnsafeValues.isVanillaBlock()`, `UnsafeValues.isVanillaItem()` and `BlockData.isVanilla()`, which are implemented in the "Flag for vanilla blocks, items and block states - Bukkit API" patch in the `fiddle-server` module,
and adding the `Material.isVanillaBlock()` and `Material.isVanillaItem()` aliases for the respective methods in `UnsafeValues`.

License: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)
Fiddle - https://fiddlemc.org

diff --git a/src/main/java/org/bukkit/Material.java b/src/main/java/org/bukkit/Material.java
index 9c49395c084acabe5bbf4d2b0421c93ab2dfddaf..67a67710736a023b1dfb01771f21576a76367f8e 100644
--- a/src/main/java/org/bukkit/Material.java
+++ b/src/main/java/org/bukkit/Material.java
@@ -11584,4 +11584,23 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
     public boolean isEnabledByFeature(@NotNull World world) {
         return Bukkit.getDataPackManager().isEnabledByFeature(this, world);
     }
+
+    // Fiddle start - flags for vanilla content - API - block
+    /**
+     * @return Whether this {@link Material} is present in vanilla as a block.
+     */
+    public boolean isVanillaBlock() {
+        return Bukkit.getUnsafe().isVanillaBlock(this);
+    }
+    // Fiddle end - flags for vanilla content - API - block
+
+    // Fiddle start - flags for vanilla content - API - item
+    /**
+     * @return Whether this {@link Material} is present in vanilla as an item.
+     */
+    public boolean isVanillaItem() {
+        return Bukkit.getUnsafe().isVanillaItem(this);
+    }
+    // Fiddle end - flags for vanilla content - API - item
+
 }
diff --git a/src/main/java/org/bukkit/UnsafeValues.java b/src/main/java/org/bukkit/UnsafeValues.java
index 9a65c4f614a6c358d74491794d7b25172a00bc11..58ca289b0492bffe0c47b3db90795bbd2d4a12a7 100644
--- a/src/main/java/org/bukkit/UnsafeValues.java
+++ b/src/main/java/org/bukkit/UnsafeValues.java
@@ -300,4 +300,21 @@ public interface UnsafeValues {
     // Paper end - lifecycle event API
 
     @NotNull java.util.List<net.kyori.adventure.text.Component> computeTooltipLines(@NotNull ItemStack itemStack, @NotNull io.papermc.paper.inventory.tooltip.TooltipContext tooltipContext, @Nullable org.bukkit.entity.Player player); // Paper - expose itemstack tooltip lines
+
+    // Fiddle start - flags for vanilla content - API - block
+    /**
+     * @param material A {@link Material} type.
+     * @return Whether the given {@link Material} is present in vanilla as a block.
+     */
+    boolean isVanillaBlock(Material material);
+    // Fiddle end - flags for vanilla content - API - block
+
+    // Fiddle start - flags for vanilla content - API - item
+    /**
+     * @param material A {@link Material} type.
+     * @return Whether the given {@link Material} is present in vanilla as an item.
+     */
+    boolean isVanillaItem(Material material);
+    // Fiddle end - flags for vanilla content - API - item
+
 }
diff --git a/src/main/java/org/bukkit/block/data/BlockData.java b/src/main/java/org/bukkit/block/data/BlockData.java
index fb4c7cf0f67f3e4227d17f6702ae7b7bf1c110ab..00e44c57c29b47a564ad85dab224bfadbf0bada8 100644
--- a/src/main/java/org/bukkit/block/data/BlockData.java
+++ b/src/main/java/org/bukkit/block/data/BlockData.java
@@ -314,4 +314,12 @@ public interface BlockData extends Cloneable {
      */
     boolean isRandomlyTicked();
     // Paper end - Tick API
+
+    // Fiddle start - flags for vanilla content - API - block state
+    /**
+     * @return Whether this block state is present in vanilla.
+     */
+    boolean isVanilla();
+    // Fiddle end - flags for vanilla content - API - block state
+
 }
